
CacheMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001240  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  0800148c  0800148c  0000248c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014d0  080014d0  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  080014d0  080014d0  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014d0  080014d0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014d0  080014d0  000024d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014d4  080014d4  000024d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080014d8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001534  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001534  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001149  00000000  00000000  00003092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005cf  00000000  00000000  000041db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  000047b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000109  00000000  00000000  00004938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025061  00000000  00000000  00004a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002305  00000000  00000000  00029aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d75b7  00000000  00000000  0002bda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010335e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c70  00000000  00000000  001033a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00104014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000005c 	.word	0x2000005c
 8000268:	00000000 	.word	0x00000000
 800026c:	08001474 	.word	0x08001474

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000060 	.word	0x20000060
 8000288:	08001474 	.word	0x08001474

0800028c <delay_ms>:
#include "SYSTICK.h"

void delay_ms(uint32_t ms)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	uint32_t i;
	SysTick->LOAD = 31999;
 8000294:	4b16      	ldr	r3, [pc, #88]	@ (80002f0 <delay_ms+0x64>)
 8000296:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800029a:	605a      	str	r2, [r3, #4]
	SysTick->VAL |= 0x00FFFFFF;
 800029c:	4b14      	ldr	r3, [pc, #80]	@ (80002f0 <delay_ms+0x64>)
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	4a13      	ldr	r2, [pc, #76]	@ (80002f0 <delay_ms+0x64>)
 80002a2:	f063 437f 	orn	r3, r3, #4278190080	@ 0xff000000
 80002a6:	6093      	str	r3, [r2, #8]
	SysTick->CTRL |= (1<<0) | (1<<2);
 80002a8:	4b11      	ldr	r3, [pc, #68]	@ (80002f0 <delay_ms+0x64>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a10      	ldr	r2, [pc, #64]	@ (80002f0 <delay_ms+0x64>)
 80002ae:	f043 0305 	orr.w	r3, r3, #5
 80002b2:	6013      	str	r3, [r2, #0]

	for(i = 0; i < ms; i++)
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e009      	b.n	80002ce <delay_ms+0x42>
	{
		while(!(SysTick->CTRL & (1<<16)));
 80002ba:	bf00      	nop
 80002bc:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <delay_ms+0x64>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <delay_ms+0x30>
	for(i = 0; i < ms; i++)
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d3f1      	bcc.n	80002ba <delay_ms+0x2e>
	}
	SysTick->CTRL &= ~(1U<<0) ;
 80002d6:	4b06      	ldr	r3, [pc, #24]	@ (80002f0 <delay_ms+0x64>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a05      	ldr	r2, [pc, #20]	@ (80002f0 <delay_ms+0x64>)
 80002dc:	f023 0301 	bic.w	r3, r3, #1
 80002e0:	6013      	str	r3, [r2, #0]
}
 80002e2:	bf00      	nop
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e010 	.word	0xe000e010

080002f4 <Compute_UART_Baud>:
#define UART_BAUDRATE	115200
#define SYS_FREQ		32000000
#define APB1_CLK		SYS_FREQ

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	085a      	lsrs	r2, r3, #1
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	441a      	add	r2, r3
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	fbb2 f3f3 	udiv	r3, r2, r3
 800030c:	b29b      	uxth	r3, r3
}
 800030e:	4618      	mov	r0, r3
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
	...

0800031c <UART3_SetBaudRate>:

static void UART3_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	6039      	str	r1, [r7, #0]
	USART3->BRR = Compute_UART_Baud(periph_clk,baudrate);
 8000326:	6839      	ldr	r1, [r7, #0]
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f7ff ffe3 	bl	80002f4 <Compute_UART_Baud>
 800032e:	4603      	mov	r3, r0
 8000330:	461a      	mov	r2, r3
 8000332:	4b03      	ldr	r3, [pc, #12]	@ (8000340 <UART3_SetBaudRate+0x24>)
 8000334:	60da      	str	r2, [r3, #12]
}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40004800 	.word	0x40004800

08000344 <UART3_Init>:

void UART3_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA and UART2 */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 8000348:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <UART3_Init+0x70>)
 800034a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800034e:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <UART3_Init+0x70>)
 8000350:	f043 0308 	orr.w	r3, r3, #8
 8000354:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    RCC->APB1LENR |= RCC_APB1LENR_USART3EN;
 8000358:	4b16      	ldr	r3, [pc, #88]	@ (80003b4 <UART3_Init+0x70>)
 800035a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800035e:	4a15      	ldr	r2, [pc, #84]	@ (80003b4 <UART3_Init+0x70>)
 8000360:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000364:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /* Set PD8 and PD9 to alternate function mode */
    GPIOD->MODER &= ~((3U << 16) | (3U << 18));
 8000368:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <UART3_Init+0x74>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a12      	ldr	r2, [pc, #72]	@ (80003b8 <UART3_Init+0x74>)
 800036e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000372:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (2U << 16) | (2U << 18);
 8000374:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <UART3_Init+0x74>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0f      	ldr	r2, [pc, #60]	@ (80003b8 <UART3_Init+0x74>)
 800037a:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800037e:	6013      	str	r3, [r2, #0]

    /* Set Alternate Function type to USART3 (AF7) */
    GPIOD->AFR[1] |= (7U << 0) | (7U << 4);
 8000380:	4b0d      	ldr	r3, [pc, #52]	@ (80003b8 <UART3_Init+0x74>)
 8000382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000384:	4a0c      	ldr	r2, [pc, #48]	@ (80003b8 <UART3_Init+0x74>)
 8000386:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800038a:	6253      	str	r3, [r2, #36]	@ 0x24

    // Disable USART3 Peripheral
    USART3->CR1 &= ~(1<<0);
 800038c:	4b0b      	ldr	r3, [pc, #44]	@ (80003bc <UART3_Init+0x78>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0a      	ldr	r2, [pc, #40]	@ (80003bc <UART3_Init+0x78>)
 8000392:	f023 0301 	bic.w	r3, r3, #1
 8000396:	6013      	str	r3, [r2, #0]

    /* Configure Baud Rate */
    UART3_SetBaudRate(APB1_CLK,UART_BAUDRATE); // For 32 MHz and 115200 baud
 8000398:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800039c:	4808      	ldr	r0, [pc, #32]	@ (80003c0 <UART3_Init+0x7c>)
 800039e:	f7ff ffbd 	bl	800031c <UART3_SetBaudRate>

    /* Enable TX, RX, and UART */
    USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <UART3_Init+0x78>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a05      	ldr	r2, [pc, #20]	@ (80003bc <UART3_Init+0x78>)
 80003a8:	f043 030d 	orr.w	r3, r3, #13
 80003ac:	6013      	str	r3, [r2, #0]
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	44020c00 	.word	0x44020c00
 80003b8:	42020c00 	.word	0x42020c00
 80003bc:	40004800 	.word	0x40004800
 80003c0:	01e84800 	.word	0x01e84800

080003c4 <UART3_TxChar>:

void UART3_TxChar(char ch)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART3->ISR & USART_ISR_TXE));
 80003ce:	bf00      	nop
 80003d0:	4b07      	ldr	r3, [pc, #28]	@ (80003f0 <UART3_TxChar+0x2c>)
 80003d2:	69db      	ldr	r3, [r3, #28]
 80003d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d0f9      	beq.n	80003d0 <UART3_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART3->TDR = (ch & 0xFF);
 80003dc:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <UART3_TxChar+0x2c>)
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40004800 	.word	0x40004800

080003f4 <UART3_RxChar>:
		UART3_TxChar(*str++);
	}
}

uint8_t UART3_RxChar(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
    while(!(USART3->ISR & USART_ISR_RXNE)); // Wait for RXNE flag (data received)
 80003f8:	bf00      	nop
 80003fa:	4b07      	ldr	r3, [pc, #28]	@ (8000418 <UART3_RxChar+0x24>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 0320 	and.w	r3, r3, #32
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0f9      	beq.n	80003fa <UART3_RxChar+0x6>
    return (uint8_t)(USART3->RDR & 0xFF); // Return the received data
 8000406:	4b04      	ldr	r3, [pc, #16]	@ (8000418 <UART3_RxChar+0x24>)
 8000408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800040a:	b2db      	uxtb	r3, r3
}
 800040c:	4618      	mov	r0, r3
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40004800 	.word	0x40004800

0800041c <_write>:

int _write(int file, char *ptr, int len)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	e009      	b.n	8000442 <_write+0x26>
    {
        UART3_TxChar(ptr[i]);  // Transmit each character via UART2
 800042e:	697b      	ldr	r3, [r7, #20]
 8000430:	68ba      	ldr	r2, [r7, #8]
 8000432:	4413      	add	r3, r2
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ffc4 	bl	80003c4 <UART3_TxChar>
    for (int i = 0; i < len; i++)
 800043c:	697b      	ldr	r3, [r7, #20]
 800043e:	3301      	adds	r3, #1
 8000440:	617b      	str	r3, [r7, #20]
 8000442:	697a      	ldr	r2, [r7, #20]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	429a      	cmp	r2, r3
 8000448:	dbf1      	blt.n	800042e <_write+0x12>
    }
    return len;  // Return the number of characters written
 800044a:	687b      	ldr	r3, [r7, #4]
}
 800044c:	4618      	mov	r0, r3
 800044e:	3718      	adds	r7, #24
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <_read>:

int _read(int file, char *ptr, int len)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b087      	sub	sp, #28
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
 8000464:	e017      	b.n	8000496 <_read+0x42>
    {
        ptr[i] = UART3_RxChar();  // Read each character via UART2
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	68ba      	ldr	r2, [r7, #8]
 800046a:	18d4      	adds	r4, r2, r3
 800046c:	f7ff ffc2 	bl	80003f4 <UART3_RxChar>
 8000470:	4603      	mov	r3, r0
 8000472:	7023      	strb	r3, [r4, #0]
        if (ptr[i] == '\r')      // Handle Enter key as a newline
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	4413      	add	r3, r2
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b0d      	cmp	r3, #13
 800047e:	d107      	bne.n	8000490 <_read+0x3c>
        {
            ptr[i] = '\n';       // Convert '\r' to '\n' for standard behavior
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	68ba      	ldr	r2, [r7, #8]
 8000484:	4413      	add	r3, r2
 8000486:	220a      	movs	r2, #10
 8000488:	701a      	strb	r2, [r3, #0]
            return i + 1;        // Return number of characters read
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	3301      	adds	r3, #1
 800048e:	e007      	b.n	80004a0 <_read+0x4c>
    for (int i = 0; i < len; i++)
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	3301      	adds	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
 8000496:	697a      	ldr	r2, [r7, #20]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	429a      	cmp	r2, r3
 800049c:	dbe3      	blt.n	8000466 <_read+0x12>
        }
    }
    return len;  // Return number of characters read
 800049e:	687b      	ldr	r3, [r7, #4]
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	371c      	adds	r7, #28
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd90      	pop	{r4, r7, pc}

080004a8 <main>:
#include "UART.h"
#include "SYSTICK.h"
#include <stdio.h>

int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
    UART3_Init();
 80004ac:	f7ff ff4a 	bl	8000344 <UART3_Init>

    while (1)
    {
    	printf("Hello World\n\r");
 80004b0:	4804      	ldr	r0, [pc, #16]	@ (80004c4 <main+0x1c>)
 80004b2:	f000 f95f 	bl	8000774 <iprintf>
    	delay_ms(1000);
 80004b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004ba:	f7ff fee7 	bl	800028c <delay_ms>
    	printf("Hello World\n\r");
 80004be:	bf00      	nop
 80004c0:	e7f6      	b.n	80004b0 <main+0x8>
 80004c2:	bf00      	nop
 80004c4:	0800148c 	.word	0x0800148c

080004c8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004f0:	605a      	str	r2, [r3, #4]
  return 0;
 80004f2:	2300      	movs	r3, #0
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <_isatty>:

int _isatty(int file)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000508:	2301      	movs	r3, #1
}
 800050a:	4618      	mov	r0, r3
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000516:	b480      	push	{r7}
 8000518:	b085      	sub	sp, #20
 800051a:	af00      	add	r7, sp, #0
 800051c:	60f8      	str	r0, [r7, #12]
 800051e:	60b9      	str	r1, [r7, #8]
 8000520:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000522:	2300      	movs	r3, #0
}
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000538:	4a14      	ldr	r2, [pc, #80]	@ (800058c <_sbrk+0x5c>)
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <_sbrk+0x60>)
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000544:	4b13      	ldr	r3, [pc, #76]	@ (8000594 <_sbrk+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800054c:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <_sbrk+0x64>)
 800054e:	4a12      	ldr	r2, [pc, #72]	@ (8000598 <_sbrk+0x68>)
 8000550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <_sbrk+0x64>)
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	693a      	ldr	r2, [r7, #16]
 800055c:	429a      	cmp	r2, r3
 800055e:	d207      	bcs.n	8000570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000560:	f000 f9ac 	bl	80008bc <__errno>
 8000564:	4603      	mov	r3, r0
 8000566:	220c      	movs	r2, #12
 8000568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800056a:	f04f 33ff 	mov.w	r3, #4294967295
 800056e:	e009      	b.n	8000584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000570:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <_sbrk+0x64>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000576:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <_sbrk+0x64>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4413      	add	r3, r2
 800057e:	4a05      	ldr	r2, [pc, #20]	@ (8000594 <_sbrk+0x64>)
 8000580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3718      	adds	r7, #24
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200a0000 	.word	0x200a0000
 8000590:	00000400 	.word	0x00000400
 8000594:	20000078 	.word	0x20000078
 8000598:	200001c8 	.word	0x200001c8

0800059c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800059c:	480d      	ldr	r0, [pc, #52]	@ (80005d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a4:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a6:	490d      	ldr	r1, [pc, #52]	@ (80005dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a8:	4a0d      	ldr	r2, [pc, #52]	@ (80005e0 <LoopForever+0xe>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ac:	e002      	b.n	80005b4 <LoopCopyDataInit>

080005ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b2:	3304      	adds	r3, #4

080005b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b8:	d3f9      	bcc.n	80005ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ba:	4a0a      	ldr	r2, [pc, #40]	@ (80005e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005bc:	4c0a      	ldr	r4, [pc, #40]	@ (80005e8 <LoopForever+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c0:	e001      	b.n	80005c6 <LoopFillZerobss>

080005c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c4:	3204      	adds	r2, #4

080005c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c8:	d3fb      	bcc.n	80005c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ca:	f000 f97d 	bl	80008c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ce:	f7ff ff6b 	bl	80004a8 <main>

080005d2 <LoopForever>:

LoopForever:
  b LoopForever
 80005d2:	e7fe      	b.n	80005d2 <LoopForever>
  ldr   r0, =_estack
 80005d4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005e0:	080014d8 	.word	0x080014d8
  ldr r2, =_sbss
 80005e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005e8:	200001c8 	.word	0x200001c8

080005ec <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_IRQHandler>
	...

080005f0 <std>:
 80005f0:	2300      	movs	r3, #0
 80005f2:	b510      	push	{r4, lr}
 80005f4:	4604      	mov	r4, r0
 80005f6:	6083      	str	r3, [r0, #8]
 80005f8:	8181      	strh	r1, [r0, #12]
 80005fa:	4619      	mov	r1, r3
 80005fc:	6643      	str	r3, [r0, #100]	@ 0x64
 80005fe:	81c2      	strh	r2, [r0, #14]
 8000600:	2208      	movs	r2, #8
 8000602:	6183      	str	r3, [r0, #24]
 8000604:	e9c0 3300 	strd	r3, r3, [r0]
 8000608:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800060c:	305c      	adds	r0, #92	@ 0x5c
 800060e:	f000 f906 	bl	800081e <memset>
 8000612:	4b0d      	ldr	r3, [pc, #52]	@ (8000648 <std+0x58>)
 8000614:	6224      	str	r4, [r4, #32]
 8000616:	6263      	str	r3, [r4, #36]	@ 0x24
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <std+0x5c>)
 800061a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <std+0x60>)
 800061e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <std+0x64>)
 8000622:	6323      	str	r3, [r4, #48]	@ 0x30
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <std+0x68>)
 8000626:	429c      	cmp	r4, r3
 8000628:	d006      	beq.n	8000638 <std+0x48>
 800062a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800062e:	4294      	cmp	r4, r2
 8000630:	d002      	beq.n	8000638 <std+0x48>
 8000632:	33d0      	adds	r3, #208	@ 0xd0
 8000634:	429c      	cmp	r4, r3
 8000636:	d105      	bne.n	8000644 <std+0x54>
 8000638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800063c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000640:	f000 b966 	b.w	8000910 <__retarget_lock_init_recursive>
 8000644:	bd10      	pop	{r4, pc}
 8000646:	bf00      	nop
 8000648:	08000799 	.word	0x08000799
 800064c:	080007bb 	.word	0x080007bb
 8000650:	080007f3 	.word	0x080007f3
 8000654:	08000817 	.word	0x08000817
 8000658:	2000007c 	.word	0x2000007c

0800065c <stdio_exit_handler>:
 800065c:	4a02      	ldr	r2, [pc, #8]	@ (8000668 <stdio_exit_handler+0xc>)
 800065e:	4903      	ldr	r1, [pc, #12]	@ (800066c <stdio_exit_handler+0x10>)
 8000660:	4803      	ldr	r0, [pc, #12]	@ (8000670 <stdio_exit_handler+0x14>)
 8000662:	f000 b869 	b.w	8000738 <_fwalk_sglue>
 8000666:	bf00      	nop
 8000668:	20000000 	.word	0x20000000
 800066c:	080011b9 	.word	0x080011b9
 8000670:	20000010 	.word	0x20000010

08000674 <cleanup_stdio>:
 8000674:	6841      	ldr	r1, [r0, #4]
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <cleanup_stdio+0x34>)
 8000678:	4299      	cmp	r1, r3
 800067a:	b510      	push	{r4, lr}
 800067c:	4604      	mov	r4, r0
 800067e:	d001      	beq.n	8000684 <cleanup_stdio+0x10>
 8000680:	f000 fd9a 	bl	80011b8 <_fflush_r>
 8000684:	68a1      	ldr	r1, [r4, #8]
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <cleanup_stdio+0x38>)
 8000688:	4299      	cmp	r1, r3
 800068a:	d002      	beq.n	8000692 <cleanup_stdio+0x1e>
 800068c:	4620      	mov	r0, r4
 800068e:	f000 fd93 	bl	80011b8 <_fflush_r>
 8000692:	68e1      	ldr	r1, [r4, #12]
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <cleanup_stdio+0x3c>)
 8000696:	4299      	cmp	r1, r3
 8000698:	d004      	beq.n	80006a4 <cleanup_stdio+0x30>
 800069a:	4620      	mov	r0, r4
 800069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a0:	f000 bd8a 	b.w	80011b8 <_fflush_r>
 80006a4:	bd10      	pop	{r4, pc}
 80006a6:	bf00      	nop
 80006a8:	2000007c 	.word	0x2000007c
 80006ac:	200000e4 	.word	0x200000e4
 80006b0:	2000014c 	.word	0x2000014c

080006b4 <global_stdio_init.part.0>:
 80006b4:	b510      	push	{r4, lr}
 80006b6:	4b0b      	ldr	r3, [pc, #44]	@ (80006e4 <global_stdio_init.part.0+0x30>)
 80006b8:	2104      	movs	r1, #4
 80006ba:	4c0b      	ldr	r4, [pc, #44]	@ (80006e8 <global_stdio_init.part.0+0x34>)
 80006bc:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <global_stdio_init.part.0+0x38>)
 80006be:	4620      	mov	r0, r4
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f7ff ff94 	bl	80005f0 <std>
 80006c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006cc:	2201      	movs	r2, #1
 80006ce:	2109      	movs	r1, #9
 80006d0:	f7ff ff8e 	bl	80005f0 <std>
 80006d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006d8:	2202      	movs	r2, #2
 80006da:	2112      	movs	r1, #18
 80006dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006e0:	f7ff bf86 	b.w	80005f0 <std>
 80006e4:	200001b4 	.word	0x200001b4
 80006e8:	2000007c 	.word	0x2000007c
 80006ec:	0800065d 	.word	0x0800065d

080006f0 <__sfp_lock_acquire>:
 80006f0:	4801      	ldr	r0, [pc, #4]	@ (80006f8 <__sfp_lock_acquire+0x8>)
 80006f2:	f000 b90e 	b.w	8000912 <__retarget_lock_acquire_recursive>
 80006f6:	bf00      	nop
 80006f8:	200001bd 	.word	0x200001bd

080006fc <__sfp_lock_release>:
 80006fc:	4801      	ldr	r0, [pc, #4]	@ (8000704 <__sfp_lock_release+0x8>)
 80006fe:	f000 b909 	b.w	8000914 <__retarget_lock_release_recursive>
 8000702:	bf00      	nop
 8000704:	200001bd 	.word	0x200001bd

08000708 <__sinit>:
 8000708:	b510      	push	{r4, lr}
 800070a:	4604      	mov	r4, r0
 800070c:	f7ff fff0 	bl	80006f0 <__sfp_lock_acquire>
 8000710:	6a23      	ldr	r3, [r4, #32]
 8000712:	b11b      	cbz	r3, 800071c <__sinit+0x14>
 8000714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000718:	f7ff bff0 	b.w	80006fc <__sfp_lock_release>
 800071c:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <__sinit+0x28>)
 800071e:	6223      	str	r3, [r4, #32]
 8000720:	4b04      	ldr	r3, [pc, #16]	@ (8000734 <__sinit+0x2c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d1f5      	bne.n	8000714 <__sinit+0xc>
 8000728:	f7ff ffc4 	bl	80006b4 <global_stdio_init.part.0>
 800072c:	e7f2      	b.n	8000714 <__sinit+0xc>
 800072e:	bf00      	nop
 8000730:	08000675 	.word	0x08000675
 8000734:	200001b4 	.word	0x200001b4

08000738 <_fwalk_sglue>:
 8000738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800073c:	4607      	mov	r7, r0
 800073e:	4688      	mov	r8, r1
 8000740:	4614      	mov	r4, r2
 8000742:	2600      	movs	r6, #0
 8000744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000748:	f1b9 0901 	subs.w	r9, r9, #1
 800074c:	d505      	bpl.n	800075a <_fwalk_sglue+0x22>
 800074e:	6824      	ldr	r4, [r4, #0]
 8000750:	2c00      	cmp	r4, #0
 8000752:	d1f7      	bne.n	8000744 <_fwalk_sglue+0xc>
 8000754:	4630      	mov	r0, r6
 8000756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800075a:	89ab      	ldrh	r3, [r5, #12]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d907      	bls.n	8000770 <_fwalk_sglue+0x38>
 8000760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000764:	3301      	adds	r3, #1
 8000766:	d003      	beq.n	8000770 <_fwalk_sglue+0x38>
 8000768:	4629      	mov	r1, r5
 800076a:	4638      	mov	r0, r7
 800076c:	47c0      	blx	r8
 800076e:	4306      	orrs	r6, r0
 8000770:	3568      	adds	r5, #104	@ 0x68
 8000772:	e7e9      	b.n	8000748 <_fwalk_sglue+0x10>

08000774 <iprintf>:
 8000774:	b40f      	push	{r0, r1, r2, r3}
 8000776:	b507      	push	{r0, r1, r2, lr}
 8000778:	4906      	ldr	r1, [pc, #24]	@ (8000794 <iprintf+0x20>)
 800077a:	ab04      	add	r3, sp, #16
 800077c:	6808      	ldr	r0, [r1, #0]
 800077e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000782:	6881      	ldr	r1, [r0, #8]
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	f000 f9e9 	bl	8000b5c <_vfiprintf_r>
 800078a:	b003      	add	sp, #12
 800078c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000790:	b004      	add	sp, #16
 8000792:	4770      	bx	lr
 8000794:	2000000c 	.word	0x2000000c

08000798 <__sread>:
 8000798:	b510      	push	{r4, lr}
 800079a:	460c      	mov	r4, r1
 800079c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007a0:	f000 f868 	bl	8000874 <_read_r>
 80007a4:	2800      	cmp	r0, #0
 80007a6:	bfab      	itete	ge
 80007a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80007aa:	89a3      	ldrhlt	r3, [r4, #12]
 80007ac:	181b      	addge	r3, r3, r0
 80007ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80007b2:	bfac      	ite	ge
 80007b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80007b6:	81a3      	strhlt	r3, [r4, #12]
 80007b8:	bd10      	pop	{r4, pc}

080007ba <__swrite>:
 80007ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007be:	461f      	mov	r7, r3
 80007c0:	898b      	ldrh	r3, [r1, #12]
 80007c2:	4605      	mov	r5, r0
 80007c4:	460c      	mov	r4, r1
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	4616      	mov	r6, r2
 80007ca:	d505      	bpl.n	80007d8 <__swrite+0x1e>
 80007cc:	2302      	movs	r3, #2
 80007ce:	2200      	movs	r2, #0
 80007d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007d4:	f000 f83c 	bl	8000850 <_lseek_r>
 80007d8:	89a3      	ldrh	r3, [r4, #12]
 80007da:	4632      	mov	r2, r6
 80007dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007e0:	4628      	mov	r0, r5
 80007e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007e6:	81a3      	strh	r3, [r4, #12]
 80007e8:	463b      	mov	r3, r7
 80007ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007ee:	f000 b853 	b.w	8000898 <_write_r>

080007f2 <__sseek>:
 80007f2:	b510      	push	{r4, lr}
 80007f4:	460c      	mov	r4, r1
 80007f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007fa:	f000 f829 	bl	8000850 <_lseek_r>
 80007fe:	1c43      	adds	r3, r0, #1
 8000800:	89a3      	ldrh	r3, [r4, #12]
 8000802:	bf15      	itete	ne
 8000804:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000806:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800080a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800080e:	81a3      	strheq	r3, [r4, #12]
 8000810:	bf18      	it	ne
 8000812:	81a3      	strhne	r3, [r4, #12]
 8000814:	bd10      	pop	{r4, pc}

08000816 <__sclose>:
 8000816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800081a:	f000 b809 	b.w	8000830 <_close_r>

0800081e <memset>:
 800081e:	4402      	add	r2, r0
 8000820:	4603      	mov	r3, r0
 8000822:	4293      	cmp	r3, r2
 8000824:	d100      	bne.n	8000828 <memset+0xa>
 8000826:	4770      	bx	lr
 8000828:	f803 1b01 	strb.w	r1, [r3], #1
 800082c:	e7f9      	b.n	8000822 <memset+0x4>
	...

08000830 <_close_r>:
 8000830:	b538      	push	{r3, r4, r5, lr}
 8000832:	2300      	movs	r3, #0
 8000834:	4d05      	ldr	r5, [pc, #20]	@ (800084c <_close_r+0x1c>)
 8000836:	4604      	mov	r4, r0
 8000838:	4608      	mov	r0, r1
 800083a:	602b      	str	r3, [r5, #0]
 800083c:	f7ff fe44 	bl	80004c8 <_close>
 8000840:	1c43      	adds	r3, r0, #1
 8000842:	d102      	bne.n	800084a <_close_r+0x1a>
 8000844:	682b      	ldr	r3, [r5, #0]
 8000846:	b103      	cbz	r3, 800084a <_close_r+0x1a>
 8000848:	6023      	str	r3, [r4, #0]
 800084a:	bd38      	pop	{r3, r4, r5, pc}
 800084c:	200001b8 	.word	0x200001b8

08000850 <_lseek_r>:
 8000850:	b538      	push	{r3, r4, r5, lr}
 8000852:	4604      	mov	r4, r0
 8000854:	4d06      	ldr	r5, [pc, #24]	@ (8000870 <_lseek_r+0x20>)
 8000856:	4608      	mov	r0, r1
 8000858:	4611      	mov	r1, r2
 800085a:	2200      	movs	r2, #0
 800085c:	602a      	str	r2, [r5, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	f7ff fe59 	bl	8000516 <_lseek>
 8000864:	1c43      	adds	r3, r0, #1
 8000866:	d102      	bne.n	800086e <_lseek_r+0x1e>
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	b103      	cbz	r3, 800086e <_lseek_r+0x1e>
 800086c:	6023      	str	r3, [r4, #0]
 800086e:	bd38      	pop	{r3, r4, r5, pc}
 8000870:	200001b8 	.word	0x200001b8

08000874 <_read_r>:
 8000874:	b538      	push	{r3, r4, r5, lr}
 8000876:	4604      	mov	r4, r0
 8000878:	4d06      	ldr	r5, [pc, #24]	@ (8000894 <_read_r+0x20>)
 800087a:	4608      	mov	r0, r1
 800087c:	4611      	mov	r1, r2
 800087e:	2200      	movs	r2, #0
 8000880:	602a      	str	r2, [r5, #0]
 8000882:	461a      	mov	r2, r3
 8000884:	f7ff fde6 	bl	8000454 <_read>
 8000888:	1c43      	adds	r3, r0, #1
 800088a:	d102      	bne.n	8000892 <_read_r+0x1e>
 800088c:	682b      	ldr	r3, [r5, #0]
 800088e:	b103      	cbz	r3, 8000892 <_read_r+0x1e>
 8000890:	6023      	str	r3, [r4, #0]
 8000892:	bd38      	pop	{r3, r4, r5, pc}
 8000894:	200001b8 	.word	0x200001b8

08000898 <_write_r>:
 8000898:	b538      	push	{r3, r4, r5, lr}
 800089a:	4604      	mov	r4, r0
 800089c:	4d06      	ldr	r5, [pc, #24]	@ (80008b8 <_write_r+0x20>)
 800089e:	4608      	mov	r0, r1
 80008a0:	4611      	mov	r1, r2
 80008a2:	2200      	movs	r2, #0
 80008a4:	602a      	str	r2, [r5, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	f7ff fdb8 	bl	800041c <_write>
 80008ac:	1c43      	adds	r3, r0, #1
 80008ae:	d102      	bne.n	80008b6 <_write_r+0x1e>
 80008b0:	682b      	ldr	r3, [r5, #0]
 80008b2:	b103      	cbz	r3, 80008b6 <_write_r+0x1e>
 80008b4:	6023      	str	r3, [r4, #0]
 80008b6:	bd38      	pop	{r3, r4, r5, pc}
 80008b8:	200001b8 	.word	0x200001b8

080008bc <__errno>:
 80008bc:	4b01      	ldr	r3, [pc, #4]	@ (80008c4 <__errno+0x8>)
 80008be:	6818      	ldr	r0, [r3, #0]
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	2000000c 	.word	0x2000000c

080008c8 <__libc_init_array>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	4d0d      	ldr	r5, [pc, #52]	@ (8000900 <__libc_init_array+0x38>)
 80008cc:	2600      	movs	r6, #0
 80008ce:	4c0d      	ldr	r4, [pc, #52]	@ (8000904 <__libc_init_array+0x3c>)
 80008d0:	1b64      	subs	r4, r4, r5
 80008d2:	10a4      	asrs	r4, r4, #2
 80008d4:	42a6      	cmp	r6, r4
 80008d6:	d109      	bne.n	80008ec <__libc_init_array+0x24>
 80008d8:	4d0b      	ldr	r5, [pc, #44]	@ (8000908 <__libc_init_array+0x40>)
 80008da:	2600      	movs	r6, #0
 80008dc:	4c0b      	ldr	r4, [pc, #44]	@ (800090c <__libc_init_array+0x44>)
 80008de:	f000 fdc9 	bl	8001474 <_init>
 80008e2:	1b64      	subs	r4, r4, r5
 80008e4:	10a4      	asrs	r4, r4, #2
 80008e6:	42a6      	cmp	r6, r4
 80008e8:	d105      	bne.n	80008f6 <__libc_init_array+0x2e>
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80008f0:	3601      	adds	r6, #1
 80008f2:	4798      	blx	r3
 80008f4:	e7ee      	b.n	80008d4 <__libc_init_array+0xc>
 80008f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008fa:	3601      	adds	r6, #1
 80008fc:	4798      	blx	r3
 80008fe:	e7f2      	b.n	80008e6 <__libc_init_array+0x1e>
 8000900:	080014d0 	.word	0x080014d0
 8000904:	080014d0 	.word	0x080014d0
 8000908:	080014d0 	.word	0x080014d0
 800090c:	080014d4 	.word	0x080014d4

08000910 <__retarget_lock_init_recursive>:
 8000910:	4770      	bx	lr

08000912 <__retarget_lock_acquire_recursive>:
 8000912:	4770      	bx	lr

08000914 <__retarget_lock_release_recursive>:
 8000914:	4770      	bx	lr
	...

08000918 <_free_r>:
 8000918:	b538      	push	{r3, r4, r5, lr}
 800091a:	4605      	mov	r5, r0
 800091c:	2900      	cmp	r1, #0
 800091e:	d041      	beq.n	80009a4 <_free_r+0x8c>
 8000920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000924:	1f0c      	subs	r4, r1, #4
 8000926:	2b00      	cmp	r3, #0
 8000928:	bfb8      	it	lt
 800092a:	18e4      	addlt	r4, r4, r3
 800092c:	f000 f8e0 	bl	8000af0 <__malloc_lock>
 8000930:	4a1d      	ldr	r2, [pc, #116]	@ (80009a8 <_free_r+0x90>)
 8000932:	6813      	ldr	r3, [r2, #0]
 8000934:	b933      	cbnz	r3, 8000944 <_free_r+0x2c>
 8000936:	6063      	str	r3, [r4, #4]
 8000938:	6014      	str	r4, [r2, #0]
 800093a:	4628      	mov	r0, r5
 800093c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000940:	f000 b8dc 	b.w	8000afc <__malloc_unlock>
 8000944:	42a3      	cmp	r3, r4
 8000946:	d908      	bls.n	800095a <_free_r+0x42>
 8000948:	6820      	ldr	r0, [r4, #0]
 800094a:	1821      	adds	r1, r4, r0
 800094c:	428b      	cmp	r3, r1
 800094e:	bf01      	itttt	eq
 8000950:	6819      	ldreq	r1, [r3, #0]
 8000952:	685b      	ldreq	r3, [r3, #4]
 8000954:	1809      	addeq	r1, r1, r0
 8000956:	6021      	streq	r1, [r4, #0]
 8000958:	e7ed      	b.n	8000936 <_free_r+0x1e>
 800095a:	461a      	mov	r2, r3
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	b10b      	cbz	r3, 8000964 <_free_r+0x4c>
 8000960:	42a3      	cmp	r3, r4
 8000962:	d9fa      	bls.n	800095a <_free_r+0x42>
 8000964:	6811      	ldr	r1, [r2, #0]
 8000966:	1850      	adds	r0, r2, r1
 8000968:	42a0      	cmp	r0, r4
 800096a:	d10b      	bne.n	8000984 <_free_r+0x6c>
 800096c:	6820      	ldr	r0, [r4, #0]
 800096e:	4401      	add	r1, r0
 8000970:	1850      	adds	r0, r2, r1
 8000972:	6011      	str	r1, [r2, #0]
 8000974:	4283      	cmp	r3, r0
 8000976:	d1e0      	bne.n	800093a <_free_r+0x22>
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	4408      	add	r0, r1
 800097e:	6053      	str	r3, [r2, #4]
 8000980:	6010      	str	r0, [r2, #0]
 8000982:	e7da      	b.n	800093a <_free_r+0x22>
 8000984:	d902      	bls.n	800098c <_free_r+0x74>
 8000986:	230c      	movs	r3, #12
 8000988:	602b      	str	r3, [r5, #0]
 800098a:	e7d6      	b.n	800093a <_free_r+0x22>
 800098c:	6820      	ldr	r0, [r4, #0]
 800098e:	1821      	adds	r1, r4, r0
 8000990:	428b      	cmp	r3, r1
 8000992:	bf02      	ittt	eq
 8000994:	6819      	ldreq	r1, [r3, #0]
 8000996:	685b      	ldreq	r3, [r3, #4]
 8000998:	1809      	addeq	r1, r1, r0
 800099a:	6063      	str	r3, [r4, #4]
 800099c:	bf08      	it	eq
 800099e:	6021      	streq	r1, [r4, #0]
 80009a0:	6054      	str	r4, [r2, #4]
 80009a2:	e7ca      	b.n	800093a <_free_r+0x22>
 80009a4:	bd38      	pop	{r3, r4, r5, pc}
 80009a6:	bf00      	nop
 80009a8:	200001c4 	.word	0x200001c4

080009ac <sbrk_aligned>:
 80009ac:	b570      	push	{r4, r5, r6, lr}
 80009ae:	4e0f      	ldr	r6, [pc, #60]	@ (80009ec <sbrk_aligned+0x40>)
 80009b0:	460c      	mov	r4, r1
 80009b2:	4605      	mov	r5, r0
 80009b4:	6831      	ldr	r1, [r6, #0]
 80009b6:	b911      	cbnz	r1, 80009be <sbrk_aligned+0x12>
 80009b8:	f000 fcba 	bl	8001330 <_sbrk_r>
 80009bc:	6030      	str	r0, [r6, #0]
 80009be:	4621      	mov	r1, r4
 80009c0:	4628      	mov	r0, r5
 80009c2:	f000 fcb5 	bl	8001330 <_sbrk_r>
 80009c6:	1c43      	adds	r3, r0, #1
 80009c8:	d103      	bne.n	80009d2 <sbrk_aligned+0x26>
 80009ca:	f04f 34ff 	mov.w	r4, #4294967295
 80009ce:	4620      	mov	r0, r4
 80009d0:	bd70      	pop	{r4, r5, r6, pc}
 80009d2:	1cc4      	adds	r4, r0, #3
 80009d4:	f024 0403 	bic.w	r4, r4, #3
 80009d8:	42a0      	cmp	r0, r4
 80009da:	d0f8      	beq.n	80009ce <sbrk_aligned+0x22>
 80009dc:	1a21      	subs	r1, r4, r0
 80009de:	4628      	mov	r0, r5
 80009e0:	f000 fca6 	bl	8001330 <_sbrk_r>
 80009e4:	3001      	adds	r0, #1
 80009e6:	d1f2      	bne.n	80009ce <sbrk_aligned+0x22>
 80009e8:	e7ef      	b.n	80009ca <sbrk_aligned+0x1e>
 80009ea:	bf00      	nop
 80009ec:	200001c0 	.word	0x200001c0

080009f0 <_malloc_r>:
 80009f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009f4:	1ccd      	adds	r5, r1, #3
 80009f6:	4606      	mov	r6, r0
 80009f8:	f025 0503 	bic.w	r5, r5, #3
 80009fc:	3508      	adds	r5, #8
 80009fe:	2d0c      	cmp	r5, #12
 8000a00:	bf38      	it	cc
 8000a02:	250c      	movcc	r5, #12
 8000a04:	2d00      	cmp	r5, #0
 8000a06:	db01      	blt.n	8000a0c <_malloc_r+0x1c>
 8000a08:	42a9      	cmp	r1, r5
 8000a0a:	d904      	bls.n	8000a16 <_malloc_r+0x26>
 8000a0c:	230c      	movs	r3, #12
 8000a0e:	6033      	str	r3, [r6, #0]
 8000a10:	2000      	movs	r0, #0
 8000a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000aec <_malloc_r+0xfc>
 8000a1a:	f000 f869 	bl	8000af0 <__malloc_lock>
 8000a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8000a22:	461c      	mov	r4, r3
 8000a24:	bb44      	cbnz	r4, 8000a78 <_malloc_r+0x88>
 8000a26:	4629      	mov	r1, r5
 8000a28:	4630      	mov	r0, r6
 8000a2a:	f7ff ffbf 	bl	80009ac <sbrk_aligned>
 8000a2e:	1c43      	adds	r3, r0, #1
 8000a30:	4604      	mov	r4, r0
 8000a32:	d158      	bne.n	8000ae6 <_malloc_r+0xf6>
 8000a34:	f8d8 4000 	ldr.w	r4, [r8]
 8000a38:	4627      	mov	r7, r4
 8000a3a:	2f00      	cmp	r7, #0
 8000a3c:	d143      	bne.n	8000ac6 <_malloc_r+0xd6>
 8000a3e:	2c00      	cmp	r4, #0
 8000a40:	d04b      	beq.n	8000ada <_malloc_r+0xea>
 8000a42:	6823      	ldr	r3, [r4, #0]
 8000a44:	4639      	mov	r1, r7
 8000a46:	4630      	mov	r0, r6
 8000a48:	eb04 0903 	add.w	r9, r4, r3
 8000a4c:	f000 fc70 	bl	8001330 <_sbrk_r>
 8000a50:	4581      	cmp	r9, r0
 8000a52:	d142      	bne.n	8000ada <_malloc_r+0xea>
 8000a54:	6821      	ldr	r1, [r4, #0]
 8000a56:	4630      	mov	r0, r6
 8000a58:	1a6d      	subs	r5, r5, r1
 8000a5a:	4629      	mov	r1, r5
 8000a5c:	f7ff ffa6 	bl	80009ac <sbrk_aligned>
 8000a60:	3001      	adds	r0, #1
 8000a62:	d03a      	beq.n	8000ada <_malloc_r+0xea>
 8000a64:	6823      	ldr	r3, [r4, #0]
 8000a66:	442b      	add	r3, r5
 8000a68:	6023      	str	r3, [r4, #0]
 8000a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	bb62      	cbnz	r2, 8000acc <_malloc_r+0xdc>
 8000a72:	f8c8 7000 	str.w	r7, [r8]
 8000a76:	e00f      	b.n	8000a98 <_malloc_r+0xa8>
 8000a78:	6822      	ldr	r2, [r4, #0]
 8000a7a:	1b52      	subs	r2, r2, r5
 8000a7c:	d420      	bmi.n	8000ac0 <_malloc_r+0xd0>
 8000a7e:	2a0b      	cmp	r2, #11
 8000a80:	d917      	bls.n	8000ab2 <_malloc_r+0xc2>
 8000a82:	1961      	adds	r1, r4, r5
 8000a84:	42a3      	cmp	r3, r4
 8000a86:	6025      	str	r5, [r4, #0]
 8000a88:	bf18      	it	ne
 8000a8a:	6059      	strne	r1, [r3, #4]
 8000a8c:	6863      	ldr	r3, [r4, #4]
 8000a8e:	bf08      	it	eq
 8000a90:	f8c8 1000 	streq.w	r1, [r8]
 8000a94:	5162      	str	r2, [r4, r5]
 8000a96:	604b      	str	r3, [r1, #4]
 8000a98:	4630      	mov	r0, r6
 8000a9a:	f000 f82f 	bl	8000afc <__malloc_unlock>
 8000a9e:	f104 000b 	add.w	r0, r4, #11
 8000aa2:	1d23      	adds	r3, r4, #4
 8000aa4:	f020 0007 	bic.w	r0, r0, #7
 8000aa8:	1ac2      	subs	r2, r0, r3
 8000aaa:	bf1c      	itt	ne
 8000aac:	1a1b      	subne	r3, r3, r0
 8000aae:	50a3      	strne	r3, [r4, r2]
 8000ab0:	e7af      	b.n	8000a12 <_malloc_r+0x22>
 8000ab2:	6862      	ldr	r2, [r4, #4]
 8000ab4:	42a3      	cmp	r3, r4
 8000ab6:	bf0c      	ite	eq
 8000ab8:	f8c8 2000 	streq.w	r2, [r8]
 8000abc:	605a      	strne	r2, [r3, #4]
 8000abe:	e7eb      	b.n	8000a98 <_malloc_r+0xa8>
 8000ac0:	4623      	mov	r3, r4
 8000ac2:	6864      	ldr	r4, [r4, #4]
 8000ac4:	e7ae      	b.n	8000a24 <_malloc_r+0x34>
 8000ac6:	463c      	mov	r4, r7
 8000ac8:	687f      	ldr	r7, [r7, #4]
 8000aca:	e7b6      	b.n	8000a3a <_malloc_r+0x4a>
 8000acc:	461a      	mov	r2, r3
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	42a3      	cmp	r3, r4
 8000ad2:	d1fb      	bne.n	8000acc <_malloc_r+0xdc>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	6053      	str	r3, [r2, #4]
 8000ad8:	e7de      	b.n	8000a98 <_malloc_r+0xa8>
 8000ada:	230c      	movs	r3, #12
 8000adc:	4630      	mov	r0, r6
 8000ade:	6033      	str	r3, [r6, #0]
 8000ae0:	f000 f80c 	bl	8000afc <__malloc_unlock>
 8000ae4:	e794      	b.n	8000a10 <_malloc_r+0x20>
 8000ae6:	6005      	str	r5, [r0, #0]
 8000ae8:	e7d6      	b.n	8000a98 <_malloc_r+0xa8>
 8000aea:	bf00      	nop
 8000aec:	200001c4 	.word	0x200001c4

08000af0 <__malloc_lock>:
 8000af0:	4801      	ldr	r0, [pc, #4]	@ (8000af8 <__malloc_lock+0x8>)
 8000af2:	f7ff bf0e 	b.w	8000912 <__retarget_lock_acquire_recursive>
 8000af6:	bf00      	nop
 8000af8:	200001bc 	.word	0x200001bc

08000afc <__malloc_unlock>:
 8000afc:	4801      	ldr	r0, [pc, #4]	@ (8000b04 <__malloc_unlock+0x8>)
 8000afe:	f7ff bf09 	b.w	8000914 <__retarget_lock_release_recursive>
 8000b02:	bf00      	nop
 8000b04:	200001bc 	.word	0x200001bc

08000b08 <__sfputc_r>:
 8000b08:	6893      	ldr	r3, [r2, #8]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	6093      	str	r3, [r2, #8]
 8000b10:	b410      	push	{r4}
 8000b12:	da08      	bge.n	8000b26 <__sfputc_r+0x1e>
 8000b14:	6994      	ldr	r4, [r2, #24]
 8000b16:	42a3      	cmp	r3, r4
 8000b18:	db01      	blt.n	8000b1e <__sfputc_r+0x16>
 8000b1a:	290a      	cmp	r1, #10
 8000b1c:	d103      	bne.n	8000b26 <__sfputc_r+0x1e>
 8000b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b22:	f000 bb71 	b.w	8001208 <__swbuf_r>
 8000b26:	6813      	ldr	r3, [r2, #0]
 8000b28:	1c58      	adds	r0, r3, #1
 8000b2a:	6010      	str	r0, [r2, #0]
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	7019      	strb	r1, [r3, #0]
 8000b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <__sfputs_r>:
 8000b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b38:	4606      	mov	r6, r0
 8000b3a:	460f      	mov	r7, r1
 8000b3c:	4614      	mov	r4, r2
 8000b3e:	18d5      	adds	r5, r2, r3
 8000b40:	42ac      	cmp	r4, r5
 8000b42:	d101      	bne.n	8000b48 <__sfputs_r+0x12>
 8000b44:	2000      	movs	r0, #0
 8000b46:	e007      	b.n	8000b58 <__sfputs_r+0x22>
 8000b48:	463a      	mov	r2, r7
 8000b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f7ff ffda 	bl	8000b08 <__sfputc_r>
 8000b54:	1c43      	adds	r3, r0, #1
 8000b56:	d1f3      	bne.n	8000b40 <__sfputs_r+0xa>
 8000b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b5c <_vfiprintf_r>:
 8000b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b60:	460d      	mov	r5, r1
 8000b62:	b09d      	sub	sp, #116	@ 0x74
 8000b64:	4614      	mov	r4, r2
 8000b66:	4698      	mov	r8, r3
 8000b68:	4606      	mov	r6, r0
 8000b6a:	b118      	cbz	r0, 8000b74 <_vfiprintf_r+0x18>
 8000b6c:	6a03      	ldr	r3, [r0, #32]
 8000b6e:	b90b      	cbnz	r3, 8000b74 <_vfiprintf_r+0x18>
 8000b70:	f7ff fdca 	bl	8000708 <__sinit>
 8000b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b76:	07d9      	lsls	r1, r3, #31
 8000b78:	d405      	bmi.n	8000b86 <_vfiprintf_r+0x2a>
 8000b7a:	89ab      	ldrh	r3, [r5, #12]
 8000b7c:	059a      	lsls	r2, r3, #22
 8000b7e:	d402      	bmi.n	8000b86 <_vfiprintf_r+0x2a>
 8000b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b82:	f7ff fec6 	bl	8000912 <__retarget_lock_acquire_recursive>
 8000b86:	89ab      	ldrh	r3, [r5, #12]
 8000b88:	071b      	lsls	r3, r3, #28
 8000b8a:	d501      	bpl.n	8000b90 <_vfiprintf_r+0x34>
 8000b8c:	692b      	ldr	r3, [r5, #16]
 8000b8e:	b99b      	cbnz	r3, 8000bb8 <_vfiprintf_r+0x5c>
 8000b90:	4629      	mov	r1, r5
 8000b92:	4630      	mov	r0, r6
 8000b94:	f000 fb76 	bl	8001284 <__swsetup_r>
 8000b98:	b170      	cbz	r0, 8000bb8 <_vfiprintf_r+0x5c>
 8000b9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b9c:	07dc      	lsls	r4, r3, #31
 8000b9e:	d504      	bpl.n	8000baa <_vfiprintf_r+0x4e>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	b01d      	add	sp, #116	@ 0x74
 8000ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000baa:	89ab      	ldrh	r3, [r5, #12]
 8000bac:	0598      	lsls	r0, r3, #22
 8000bae:	d4f7      	bmi.n	8000ba0 <_vfiprintf_r+0x44>
 8000bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bb2:	f7ff feaf 	bl	8000914 <__retarget_lock_release_recursive>
 8000bb6:	e7f3      	b.n	8000ba0 <_vfiprintf_r+0x44>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bbe:	f04f 0901 	mov.w	r9, #1
 8000bc2:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8000d78 <_vfiprintf_r+0x21c>
 8000bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bc8:	2320      	movs	r3, #32
 8000bca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000bce:	2330      	movs	r3, #48	@ 0x30
 8000bd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000bd4:	4623      	mov	r3, r4
 8000bd6:	469a      	mov	sl, r3
 8000bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bdc:	b10a      	cbz	r2, 8000be2 <_vfiprintf_r+0x86>
 8000bde:	2a25      	cmp	r2, #37	@ 0x25
 8000be0:	d1f9      	bne.n	8000bd6 <_vfiprintf_r+0x7a>
 8000be2:	ebba 0b04 	subs.w	fp, sl, r4
 8000be6:	d00b      	beq.n	8000c00 <_vfiprintf_r+0xa4>
 8000be8:	465b      	mov	r3, fp
 8000bea:	4622      	mov	r2, r4
 8000bec:	4629      	mov	r1, r5
 8000bee:	4630      	mov	r0, r6
 8000bf0:	f7ff ffa1 	bl	8000b36 <__sfputs_r>
 8000bf4:	3001      	adds	r0, #1
 8000bf6:	f000 80a7 	beq.w	8000d48 <_vfiprintf_r+0x1ec>
 8000bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000bfc:	445a      	add	r2, fp
 8000bfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c00:	f89a 3000 	ldrb.w	r3, [sl]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	f000 809f 	beq.w	8000d48 <_vfiprintf_r+0x1ec>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	f10a 0a01 	add.w	sl, sl, #1
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	9307      	str	r3, [sp, #28]
 8000c18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c1c:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c22:	4654      	mov	r4, sl
 8000c24:	2205      	movs	r2, #5
 8000c26:	4854      	ldr	r0, [pc, #336]	@ (8000d78 <_vfiprintf_r+0x21c>)
 8000c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c2c:	f000 fb90 	bl	8001350 <memchr>
 8000c30:	9a04      	ldr	r2, [sp, #16]
 8000c32:	b9d8      	cbnz	r0, 8000c6c <_vfiprintf_r+0x110>
 8000c34:	06d1      	lsls	r1, r2, #27
 8000c36:	bf44      	itt	mi
 8000c38:	2320      	movmi	r3, #32
 8000c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c3e:	0713      	lsls	r3, r2, #28
 8000c40:	bf44      	itt	mi
 8000c42:	232b      	movmi	r3, #43	@ 0x2b
 8000c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c48:	f89a 3000 	ldrb.w	r3, [sl]
 8000c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c4e:	d015      	beq.n	8000c7c <_vfiprintf_r+0x120>
 8000c50:	9a07      	ldr	r2, [sp, #28]
 8000c52:	4654      	mov	r4, sl
 8000c54:	2000      	movs	r0, #0
 8000c56:	f04f 0c0a 	mov.w	ip, #10
 8000c5a:	4621      	mov	r1, r4
 8000c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c60:	3b30      	subs	r3, #48	@ 0x30
 8000c62:	2b09      	cmp	r3, #9
 8000c64:	d94b      	bls.n	8000cfe <_vfiprintf_r+0x1a2>
 8000c66:	b1b0      	cbz	r0, 8000c96 <_vfiprintf_r+0x13a>
 8000c68:	9207      	str	r2, [sp, #28]
 8000c6a:	e014      	b.n	8000c96 <_vfiprintf_r+0x13a>
 8000c6c:	eba0 0308 	sub.w	r3, r0, r8
 8000c70:	46a2      	mov	sl, r4
 8000c72:	fa09 f303 	lsl.w	r3, r9, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	9304      	str	r3, [sp, #16]
 8000c7a:	e7d2      	b.n	8000c22 <_vfiprintf_r+0xc6>
 8000c7c:	9b03      	ldr	r3, [sp, #12]
 8000c7e:	1d19      	adds	r1, r3, #4
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	9103      	str	r1, [sp, #12]
 8000c86:	bfbb      	ittet	lt
 8000c88:	425b      	neglt	r3, r3
 8000c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8000c8e:	9307      	strge	r3, [sp, #28]
 8000c90:	9307      	strlt	r3, [sp, #28]
 8000c92:	bfb8      	it	lt
 8000c94:	9204      	strlt	r2, [sp, #16]
 8000c96:	7823      	ldrb	r3, [r4, #0]
 8000c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c9a:	d10a      	bne.n	8000cb2 <_vfiprintf_r+0x156>
 8000c9c:	7863      	ldrb	r3, [r4, #1]
 8000c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ca0:	d132      	bne.n	8000d08 <_vfiprintf_r+0x1ac>
 8000ca2:	9b03      	ldr	r3, [sp, #12]
 8000ca4:	3402      	adds	r4, #2
 8000ca6:	1d1a      	adds	r2, r3, #4
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000cae:	9203      	str	r2, [sp, #12]
 8000cb0:	9305      	str	r3, [sp, #20]
 8000cb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000d88 <_vfiprintf_r+0x22c>
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	7821      	ldrb	r1, [r4, #0]
 8000cba:	4650      	mov	r0, sl
 8000cbc:	f000 fb48 	bl	8001350 <memchr>
 8000cc0:	b138      	cbz	r0, 8000cd2 <_vfiprintf_r+0x176>
 8000cc2:	eba0 000a 	sub.w	r0, r0, sl
 8000cc6:	2240      	movs	r2, #64	@ 0x40
 8000cc8:	9b04      	ldr	r3, [sp, #16]
 8000cca:	3401      	adds	r4, #1
 8000ccc:	4082      	lsls	r2, r0
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	9304      	str	r3, [sp, #16]
 8000cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cd6:	2206      	movs	r2, #6
 8000cd8:	4828      	ldr	r0, [pc, #160]	@ (8000d7c <_vfiprintf_r+0x220>)
 8000cda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000cde:	f000 fb37 	bl	8001350 <memchr>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d03f      	beq.n	8000d66 <_vfiprintf_r+0x20a>
 8000ce6:	4b26      	ldr	r3, [pc, #152]	@ (8000d80 <_vfiprintf_r+0x224>)
 8000ce8:	bb1b      	cbnz	r3, 8000d32 <_vfiprintf_r+0x1d6>
 8000cea:	9b03      	ldr	r3, [sp, #12]
 8000cec:	3307      	adds	r3, #7
 8000cee:	f023 0307 	bic.w	r3, r3, #7
 8000cf2:	3308      	adds	r3, #8
 8000cf4:	9303      	str	r3, [sp, #12]
 8000cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000cf8:	443b      	add	r3, r7
 8000cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cfc:	e76a      	b.n	8000bd4 <_vfiprintf_r+0x78>
 8000cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d02:	460c      	mov	r4, r1
 8000d04:	2001      	movs	r0, #1
 8000d06:	e7a8      	b.n	8000c5a <_vfiprintf_r+0xfe>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	3401      	adds	r4, #1
 8000d0c:	f04f 0c0a 	mov.w	ip, #10
 8000d10:	4619      	mov	r1, r3
 8000d12:	9305      	str	r3, [sp, #20]
 8000d14:	4620      	mov	r0, r4
 8000d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d1a:	3a30      	subs	r2, #48	@ 0x30
 8000d1c:	2a09      	cmp	r2, #9
 8000d1e:	d903      	bls.n	8000d28 <_vfiprintf_r+0x1cc>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0c6      	beq.n	8000cb2 <_vfiprintf_r+0x156>
 8000d24:	9105      	str	r1, [sp, #20]
 8000d26:	e7c4      	b.n	8000cb2 <_vfiprintf_r+0x156>
 8000d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e7f0      	b.n	8000d14 <_vfiprintf_r+0x1b8>
 8000d32:	ab03      	add	r3, sp, #12
 8000d34:	462a      	mov	r2, r5
 8000d36:	a904      	add	r1, sp, #16
 8000d38:	4630      	mov	r0, r6
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <_vfiprintf_r+0x228>)
 8000d3e:	f3af 8000 	nop.w
 8000d42:	4607      	mov	r7, r0
 8000d44:	1c78      	adds	r0, r7, #1
 8000d46:	d1d6      	bne.n	8000cf6 <_vfiprintf_r+0x19a>
 8000d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d4a:	07d9      	lsls	r1, r3, #31
 8000d4c:	d405      	bmi.n	8000d5a <_vfiprintf_r+0x1fe>
 8000d4e:	89ab      	ldrh	r3, [r5, #12]
 8000d50:	059a      	lsls	r2, r3, #22
 8000d52:	d402      	bmi.n	8000d5a <_vfiprintf_r+0x1fe>
 8000d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d56:	f7ff fddd 	bl	8000914 <__retarget_lock_release_recursive>
 8000d5a:	89ab      	ldrh	r3, [r5, #12]
 8000d5c:	065b      	lsls	r3, r3, #25
 8000d5e:	f53f af1f 	bmi.w	8000ba0 <_vfiprintf_r+0x44>
 8000d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d64:	e71e      	b.n	8000ba4 <_vfiprintf_r+0x48>
 8000d66:	ab03      	add	r3, sp, #12
 8000d68:	462a      	mov	r2, r5
 8000d6a:	a904      	add	r1, sp, #16
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	4b04      	ldr	r3, [pc, #16]	@ (8000d84 <_vfiprintf_r+0x228>)
 8000d72:	f000 f87d 	bl	8000e70 <_printf_i>
 8000d76:	e7e4      	b.n	8000d42 <_vfiprintf_r+0x1e6>
 8000d78:	0800149a 	.word	0x0800149a
 8000d7c:	080014a4 	.word	0x080014a4
 8000d80:	00000000 	.word	0x00000000
 8000d84:	08000b37 	.word	0x08000b37
 8000d88:	080014a0 	.word	0x080014a0

08000d8c <_printf_common>:
 8000d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d90:	4616      	mov	r6, r2
 8000d92:	4698      	mov	r8, r3
 8000d94:	688a      	ldr	r2, [r1, #8]
 8000d96:	4607      	mov	r7, r0
 8000d98:	690b      	ldr	r3, [r1, #16]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	bfb8      	it	lt
 8000da4:	4613      	movlt	r3, r2
 8000da6:	6033      	str	r3, [r6, #0]
 8000da8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000dac:	b10a      	cbz	r2, 8000db2 <_printf_common+0x26>
 8000dae:	3301      	adds	r3, #1
 8000db0:	6033      	str	r3, [r6, #0]
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	0699      	lsls	r1, r3, #26
 8000db6:	bf42      	ittt	mi
 8000db8:	6833      	ldrmi	r3, [r6, #0]
 8000dba:	3302      	addmi	r3, #2
 8000dbc:	6033      	strmi	r3, [r6, #0]
 8000dbe:	6825      	ldr	r5, [r4, #0]
 8000dc0:	f015 0506 	ands.w	r5, r5, #6
 8000dc4:	d106      	bne.n	8000dd4 <_printf_common+0x48>
 8000dc6:	f104 0a19 	add.w	sl, r4, #25
 8000dca:	68e3      	ldr	r3, [r4, #12]
 8000dcc:	6832      	ldr	r2, [r6, #0]
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	dc2b      	bgt.n	8000e2c <_printf_common+0xa0>
 8000dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000dd8:	6822      	ldr	r2, [r4, #0]
 8000dda:	3b00      	subs	r3, #0
 8000ddc:	bf18      	it	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	0692      	lsls	r2, r2, #26
 8000de2:	d430      	bmi.n	8000e46 <_printf_common+0xba>
 8000de4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000de8:	4641      	mov	r1, r8
 8000dea:	4638      	mov	r0, r7
 8000dec:	47c8      	blx	r9
 8000dee:	3001      	adds	r0, #1
 8000df0:	d023      	beq.n	8000e3a <_printf_common+0xae>
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	341a      	adds	r4, #26
 8000df6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8000dfa:	f003 0306 	and.w	r3, r3, #6
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf0a      	itet	eq
 8000e02:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8000e06:	2500      	movne	r5, #0
 8000e08:	6833      	ldreq	r3, [r6, #0]
 8000e0a:	f04f 0600 	mov.w	r6, #0
 8000e0e:	bf08      	it	eq
 8000e10:	1aed      	subeq	r5, r5, r3
 8000e12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000e16:	bf08      	it	eq
 8000e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	bfc4      	itt	gt
 8000e20:	1a9b      	subgt	r3, r3, r2
 8000e22:	18ed      	addgt	r5, r5, r3
 8000e24:	42b5      	cmp	r5, r6
 8000e26:	d11a      	bne.n	8000e5e <_printf_common+0xd2>
 8000e28:	2000      	movs	r0, #0
 8000e2a:	e008      	b.n	8000e3e <_printf_common+0xb2>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	4652      	mov	r2, sl
 8000e30:	4641      	mov	r1, r8
 8000e32:	4638      	mov	r0, r7
 8000e34:	47c8      	blx	r9
 8000e36:	3001      	adds	r0, #1
 8000e38:	d103      	bne.n	8000e42 <_printf_common+0xb6>
 8000e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	3501      	adds	r5, #1
 8000e44:	e7c1      	b.n	8000dca <_printf_common+0x3e>
 8000e46:	18e1      	adds	r1, r4, r3
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	2030      	movs	r0, #48	@ 0x30
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	4422      	add	r2, r4
 8000e50:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e5c:	e7c2      	b.n	8000de4 <_printf_common+0x58>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	4622      	mov	r2, r4
 8000e62:	4641      	mov	r1, r8
 8000e64:	4638      	mov	r0, r7
 8000e66:	47c8      	blx	r9
 8000e68:	3001      	adds	r0, #1
 8000e6a:	d0e6      	beq.n	8000e3a <_printf_common+0xae>
 8000e6c:	3601      	adds	r6, #1
 8000e6e:	e7d9      	b.n	8000e24 <_printf_common+0x98>

08000e70 <_printf_i>:
 8000e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e74:	7e0f      	ldrb	r7, [r1, #24]
 8000e76:	4691      	mov	r9, r2
 8000e78:	4680      	mov	r8, r0
 8000e7a:	460c      	mov	r4, r1
 8000e7c:	2f78      	cmp	r7, #120	@ 0x78
 8000e7e:	469a      	mov	sl, r3
 8000e80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e86:	d807      	bhi.n	8000e98 <_printf_i+0x28>
 8000e88:	2f62      	cmp	r7, #98	@ 0x62
 8000e8a:	d80a      	bhi.n	8000ea2 <_printf_i+0x32>
 8000e8c:	2f00      	cmp	r7, #0
 8000e8e:	f000 80d2 	beq.w	8001036 <_printf_i+0x1c6>
 8000e92:	2f58      	cmp	r7, #88	@ 0x58
 8000e94:	f000 80b9 	beq.w	800100a <_printf_i+0x19a>
 8000e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ea0:	e03a      	b.n	8000f18 <_printf_i+0xa8>
 8000ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ea6:	2b15      	cmp	r3, #21
 8000ea8:	d8f6      	bhi.n	8000e98 <_printf_i+0x28>
 8000eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8000eb0 <_printf_i+0x40>)
 8000eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000eb0:	08000f09 	.word	0x08000f09
 8000eb4:	08000f1d 	.word	0x08000f1d
 8000eb8:	08000e99 	.word	0x08000e99
 8000ebc:	08000e99 	.word	0x08000e99
 8000ec0:	08000e99 	.word	0x08000e99
 8000ec4:	08000e99 	.word	0x08000e99
 8000ec8:	08000f1d 	.word	0x08000f1d
 8000ecc:	08000e99 	.word	0x08000e99
 8000ed0:	08000e99 	.word	0x08000e99
 8000ed4:	08000e99 	.word	0x08000e99
 8000ed8:	08000e99 	.word	0x08000e99
 8000edc:	0800101d 	.word	0x0800101d
 8000ee0:	08000f47 	.word	0x08000f47
 8000ee4:	08000fd7 	.word	0x08000fd7
 8000ee8:	08000e99 	.word	0x08000e99
 8000eec:	08000e99 	.word	0x08000e99
 8000ef0:	0800103f 	.word	0x0800103f
 8000ef4:	08000e99 	.word	0x08000e99
 8000ef8:	08000f47 	.word	0x08000f47
 8000efc:	08000e99 	.word	0x08000e99
 8000f00:	08000e99 	.word	0x08000e99
 8000f04:	08000fdf 	.word	0x08000fdf
 8000f08:	6833      	ldr	r3, [r6, #0]
 8000f0a:	1d1a      	adds	r2, r3, #4
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6032      	str	r2, [r6, #0]
 8000f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e09d      	b.n	8001058 <_printf_i+0x1e8>
 8000f1c:	6833      	ldr	r3, [r6, #0]
 8000f1e:	6820      	ldr	r0, [r4, #0]
 8000f20:	1d19      	adds	r1, r3, #4
 8000f22:	6031      	str	r1, [r6, #0]
 8000f24:	0606      	lsls	r6, r0, #24
 8000f26:	d501      	bpl.n	8000f2c <_printf_i+0xbc>
 8000f28:	681d      	ldr	r5, [r3, #0]
 8000f2a:	e003      	b.n	8000f34 <_printf_i+0xc4>
 8000f2c:	0645      	lsls	r5, r0, #25
 8000f2e:	d5fb      	bpl.n	8000f28 <_printf_i+0xb8>
 8000f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f34:	2d00      	cmp	r5, #0
 8000f36:	da03      	bge.n	8000f40 <_printf_i+0xd0>
 8000f38:	232d      	movs	r3, #45	@ 0x2d
 8000f3a:	426d      	negs	r5, r5
 8000f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f40:	4859      	ldr	r0, [pc, #356]	@ (80010a8 <_printf_i+0x238>)
 8000f42:	230a      	movs	r3, #10
 8000f44:	e011      	b.n	8000f6a <_printf_i+0xfa>
 8000f46:	6821      	ldr	r1, [r4, #0]
 8000f48:	6833      	ldr	r3, [r6, #0]
 8000f4a:	0608      	lsls	r0, r1, #24
 8000f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f50:	d402      	bmi.n	8000f58 <_printf_i+0xe8>
 8000f52:	0649      	lsls	r1, r1, #25
 8000f54:	bf48      	it	mi
 8000f56:	b2ad      	uxthmi	r5, r5
 8000f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f5a:	6033      	str	r3, [r6, #0]
 8000f5c:	4852      	ldr	r0, [pc, #328]	@ (80010a8 <_printf_i+0x238>)
 8000f5e:	bf14      	ite	ne
 8000f60:	230a      	movne	r3, #10
 8000f62:	2308      	moveq	r3, #8
 8000f64:	2100      	movs	r1, #0
 8000f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f6a:	6866      	ldr	r6, [r4, #4]
 8000f6c:	2e00      	cmp	r6, #0
 8000f6e:	60a6      	str	r6, [r4, #8]
 8000f70:	bfa2      	ittt	ge
 8000f72:	6821      	ldrge	r1, [r4, #0]
 8000f74:	f021 0104 	bicge.w	r1, r1, #4
 8000f78:	6021      	strge	r1, [r4, #0]
 8000f7a:	b90d      	cbnz	r5, 8000f80 <_printf_i+0x110>
 8000f7c:	2e00      	cmp	r6, #0
 8000f7e:	d04b      	beq.n	8001018 <_printf_i+0x1a8>
 8000f80:	4616      	mov	r6, r2
 8000f82:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f86:	fb03 5711 	mls	r7, r3, r1, r5
 8000f8a:	5dc7      	ldrb	r7, [r0, r7]
 8000f8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f90:	462f      	mov	r7, r5
 8000f92:	460d      	mov	r5, r1
 8000f94:	42bb      	cmp	r3, r7
 8000f96:	d9f4      	bls.n	8000f82 <_printf_i+0x112>
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d10b      	bne.n	8000fb4 <_printf_i+0x144>
 8000f9c:	6823      	ldr	r3, [r4, #0]
 8000f9e:	07df      	lsls	r7, r3, #31
 8000fa0:	d508      	bpl.n	8000fb4 <_printf_i+0x144>
 8000fa2:	6923      	ldr	r3, [r4, #16]
 8000fa4:	6861      	ldr	r1, [r4, #4]
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	bfde      	ittt	le
 8000faa:	2330      	movle	r3, #48	@ 0x30
 8000fac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000fb4:	1b92      	subs	r2, r2, r6
 8000fb6:	6122      	str	r2, [r4, #16]
 8000fb8:	464b      	mov	r3, r9
 8000fba:	aa03      	add	r2, sp, #12
 8000fbc:	4621      	mov	r1, r4
 8000fbe:	4640      	mov	r0, r8
 8000fc0:	f8cd a000 	str.w	sl, [sp]
 8000fc4:	f7ff fee2 	bl	8000d8c <_printf_common>
 8000fc8:	3001      	adds	r0, #1
 8000fca:	d14a      	bne.n	8001062 <_printf_i+0x1f2>
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	b004      	add	sp, #16
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	6023      	str	r3, [r4, #0]
 8000fde:	2778      	movs	r7, #120	@ 0x78
 8000fe0:	4832      	ldr	r0, [pc, #200]	@ (80010ac <_printf_i+0x23c>)
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000fe8:	061f      	lsls	r7, r3, #24
 8000fea:	6831      	ldr	r1, [r6, #0]
 8000fec:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ff0:	d402      	bmi.n	8000ff8 <_printf_i+0x188>
 8000ff2:	065f      	lsls	r7, r3, #25
 8000ff4:	bf48      	it	mi
 8000ff6:	b2ad      	uxthmi	r5, r5
 8000ff8:	6031      	str	r1, [r6, #0]
 8000ffa:	07d9      	lsls	r1, r3, #31
 8000ffc:	bf44      	itt	mi
 8000ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8001002:	6023      	strmi	r3, [r4, #0]
 8001004:	b11d      	cbz	r5, 800100e <_printf_i+0x19e>
 8001006:	2310      	movs	r3, #16
 8001008:	e7ac      	b.n	8000f64 <_printf_i+0xf4>
 800100a:	4827      	ldr	r0, [pc, #156]	@ (80010a8 <_printf_i+0x238>)
 800100c:	e7e9      	b.n	8000fe2 <_printf_i+0x172>
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	f023 0320 	bic.w	r3, r3, #32
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	e7f6      	b.n	8001006 <_printf_i+0x196>
 8001018:	4616      	mov	r6, r2
 800101a:	e7bd      	b.n	8000f98 <_printf_i+0x128>
 800101c:	6833      	ldr	r3, [r6, #0]
 800101e:	6825      	ldr	r5, [r4, #0]
 8001020:	1d18      	adds	r0, r3, #4
 8001022:	6961      	ldr	r1, [r4, #20]
 8001024:	6030      	str	r0, [r6, #0]
 8001026:	062e      	lsls	r6, r5, #24
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	d501      	bpl.n	8001030 <_printf_i+0x1c0>
 800102c:	6019      	str	r1, [r3, #0]
 800102e:	e002      	b.n	8001036 <_printf_i+0x1c6>
 8001030:	0668      	lsls	r0, r5, #25
 8001032:	d5fb      	bpl.n	800102c <_printf_i+0x1bc>
 8001034:	8019      	strh	r1, [r3, #0]
 8001036:	2300      	movs	r3, #0
 8001038:	4616      	mov	r6, r2
 800103a:	6123      	str	r3, [r4, #16]
 800103c:	e7bc      	b.n	8000fb8 <_printf_i+0x148>
 800103e:	6833      	ldr	r3, [r6, #0]
 8001040:	2100      	movs	r1, #0
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	6032      	str	r2, [r6, #0]
 8001046:	681e      	ldr	r6, [r3, #0]
 8001048:	6862      	ldr	r2, [r4, #4]
 800104a:	4630      	mov	r0, r6
 800104c:	f000 f980 	bl	8001350 <memchr>
 8001050:	b108      	cbz	r0, 8001056 <_printf_i+0x1e6>
 8001052:	1b80      	subs	r0, r0, r6
 8001054:	6060      	str	r0, [r4, #4]
 8001056:	6863      	ldr	r3, [r4, #4]
 8001058:	6123      	str	r3, [r4, #16]
 800105a:	2300      	movs	r3, #0
 800105c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001060:	e7aa      	b.n	8000fb8 <_printf_i+0x148>
 8001062:	6923      	ldr	r3, [r4, #16]
 8001064:	4632      	mov	r2, r6
 8001066:	4649      	mov	r1, r9
 8001068:	4640      	mov	r0, r8
 800106a:	47d0      	blx	sl
 800106c:	3001      	adds	r0, #1
 800106e:	d0ad      	beq.n	8000fcc <_printf_i+0x15c>
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	079b      	lsls	r3, r3, #30
 8001074:	d413      	bmi.n	800109e <_printf_i+0x22e>
 8001076:	68e0      	ldr	r0, [r4, #12]
 8001078:	9b03      	ldr	r3, [sp, #12]
 800107a:	4298      	cmp	r0, r3
 800107c:	bfb8      	it	lt
 800107e:	4618      	movlt	r0, r3
 8001080:	e7a6      	b.n	8000fd0 <_printf_i+0x160>
 8001082:	2301      	movs	r3, #1
 8001084:	4632      	mov	r2, r6
 8001086:	4649      	mov	r1, r9
 8001088:	4640      	mov	r0, r8
 800108a:	47d0      	blx	sl
 800108c:	3001      	adds	r0, #1
 800108e:	d09d      	beq.n	8000fcc <_printf_i+0x15c>
 8001090:	3501      	adds	r5, #1
 8001092:	68e3      	ldr	r3, [r4, #12]
 8001094:	9903      	ldr	r1, [sp, #12]
 8001096:	1a5b      	subs	r3, r3, r1
 8001098:	42ab      	cmp	r3, r5
 800109a:	dcf2      	bgt.n	8001082 <_printf_i+0x212>
 800109c:	e7eb      	b.n	8001076 <_printf_i+0x206>
 800109e:	2500      	movs	r5, #0
 80010a0:	f104 0619 	add.w	r6, r4, #25
 80010a4:	e7f5      	b.n	8001092 <_printf_i+0x222>
 80010a6:	bf00      	nop
 80010a8:	080014ab 	.word	0x080014ab
 80010ac:	080014bc 	.word	0x080014bc

080010b0 <__sflush_r>:
 80010b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80010b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b8:	0716      	lsls	r6, r2, #28
 80010ba:	4605      	mov	r5, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	d454      	bmi.n	800116a <__sflush_r+0xba>
 80010c0:	684b      	ldr	r3, [r1, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dc02      	bgt.n	80010cc <__sflush_r+0x1c>
 80010c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dd48      	ble.n	800115e <__sflush_r+0xae>
 80010cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d045      	beq.n	800115e <__sflush_r+0xae>
 80010d2:	2300      	movs	r3, #0
 80010d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80010d8:	682f      	ldr	r7, [r5, #0]
 80010da:	6a21      	ldr	r1, [r4, #32]
 80010dc:	602b      	str	r3, [r5, #0]
 80010de:	d030      	beq.n	8001142 <__sflush_r+0x92>
 80010e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010e2:	89a3      	ldrh	r3, [r4, #12]
 80010e4:	0759      	lsls	r1, r3, #29
 80010e6:	d505      	bpl.n	80010f4 <__sflush_r+0x44>
 80010e8:	6863      	ldr	r3, [r4, #4]
 80010ea:	1ad2      	subs	r2, r2, r3
 80010ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80010ee:	b10b      	cbz	r3, 80010f4 <__sflush_r+0x44>
 80010f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	2300      	movs	r3, #0
 80010f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010f8:	6a21      	ldr	r1, [r4, #32]
 80010fa:	4628      	mov	r0, r5
 80010fc:	47b0      	blx	r6
 80010fe:	1c43      	adds	r3, r0, #1
 8001100:	89a3      	ldrh	r3, [r4, #12]
 8001102:	d106      	bne.n	8001112 <__sflush_r+0x62>
 8001104:	6829      	ldr	r1, [r5, #0]
 8001106:	291d      	cmp	r1, #29
 8001108:	d82b      	bhi.n	8001162 <__sflush_r+0xb2>
 800110a:	4a2a      	ldr	r2, [pc, #168]	@ (80011b4 <__sflush_r+0x104>)
 800110c:	410a      	asrs	r2, r1
 800110e:	07d6      	lsls	r6, r2, #31
 8001110:	d427      	bmi.n	8001162 <__sflush_r+0xb2>
 8001112:	2200      	movs	r2, #0
 8001114:	04d9      	lsls	r1, r3, #19
 8001116:	6062      	str	r2, [r4, #4]
 8001118:	6922      	ldr	r2, [r4, #16]
 800111a:	6022      	str	r2, [r4, #0]
 800111c:	d504      	bpl.n	8001128 <__sflush_r+0x78>
 800111e:	1c42      	adds	r2, r0, #1
 8001120:	d101      	bne.n	8001126 <__sflush_r+0x76>
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	b903      	cbnz	r3, 8001128 <__sflush_r+0x78>
 8001126:	6560      	str	r0, [r4, #84]	@ 0x54
 8001128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800112a:	602f      	str	r7, [r5, #0]
 800112c:	b1b9      	cbz	r1, 800115e <__sflush_r+0xae>
 800112e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001132:	4299      	cmp	r1, r3
 8001134:	d002      	beq.n	800113c <__sflush_r+0x8c>
 8001136:	4628      	mov	r0, r5
 8001138:	f7ff fbee 	bl	8000918 <_free_r>
 800113c:	2300      	movs	r3, #0
 800113e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001140:	e00d      	b.n	800115e <__sflush_r+0xae>
 8001142:	2301      	movs	r3, #1
 8001144:	4628      	mov	r0, r5
 8001146:	47b0      	blx	r6
 8001148:	4602      	mov	r2, r0
 800114a:	1c50      	adds	r0, r2, #1
 800114c:	d1c9      	bne.n	80010e2 <__sflush_r+0x32>
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0c6      	beq.n	80010e2 <__sflush_r+0x32>
 8001154:	2b1d      	cmp	r3, #29
 8001156:	d001      	beq.n	800115c <__sflush_r+0xac>
 8001158:	2b16      	cmp	r3, #22
 800115a:	d11d      	bne.n	8001198 <__sflush_r+0xe8>
 800115c:	602f      	str	r7, [r5, #0]
 800115e:	2000      	movs	r0, #0
 8001160:	e021      	b.n	80011a6 <__sflush_r+0xf6>
 8001162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001166:	b21b      	sxth	r3, r3
 8001168:	e01a      	b.n	80011a0 <__sflush_r+0xf0>
 800116a:	690f      	ldr	r7, [r1, #16]
 800116c:	2f00      	cmp	r7, #0
 800116e:	d0f6      	beq.n	800115e <__sflush_r+0xae>
 8001170:	0793      	lsls	r3, r2, #30
 8001172:	680e      	ldr	r6, [r1, #0]
 8001174:	600f      	str	r7, [r1, #0]
 8001176:	bf0c      	ite	eq
 8001178:	694b      	ldreq	r3, [r1, #20]
 800117a:	2300      	movne	r3, #0
 800117c:	eba6 0807 	sub.w	r8, r6, r7
 8001180:	608b      	str	r3, [r1, #8]
 8001182:	f1b8 0f00 	cmp.w	r8, #0
 8001186:	ddea      	ble.n	800115e <__sflush_r+0xae>
 8001188:	4643      	mov	r3, r8
 800118a:	463a      	mov	r2, r7
 800118c:	6a21      	ldr	r1, [r4, #32]
 800118e:	4628      	mov	r0, r5
 8001190:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001192:	47b0      	blx	r6
 8001194:	2800      	cmp	r0, #0
 8001196:	dc08      	bgt.n	80011aa <__sflush_r+0xfa>
 8001198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800119c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	81a3      	strh	r3, [r4, #12]
 80011a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011aa:	4407      	add	r7, r0
 80011ac:	eba8 0800 	sub.w	r8, r8, r0
 80011b0:	e7e7      	b.n	8001182 <__sflush_r+0xd2>
 80011b2:	bf00      	nop
 80011b4:	dfbffffe 	.word	0xdfbffffe

080011b8 <_fflush_r>:
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	690b      	ldr	r3, [r1, #16]
 80011bc:	4605      	mov	r5, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	b913      	cbnz	r3, 80011c8 <_fflush_r+0x10>
 80011c2:	2500      	movs	r5, #0
 80011c4:	4628      	mov	r0, r5
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	b118      	cbz	r0, 80011d2 <_fflush_r+0x1a>
 80011ca:	6a03      	ldr	r3, [r0, #32]
 80011cc:	b90b      	cbnz	r3, 80011d2 <_fflush_r+0x1a>
 80011ce:	f7ff fa9b 	bl	8000708 <__sinit>
 80011d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f3      	beq.n	80011c2 <_fflush_r+0xa>
 80011da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80011dc:	07d0      	lsls	r0, r2, #31
 80011de:	d404      	bmi.n	80011ea <_fflush_r+0x32>
 80011e0:	0599      	lsls	r1, r3, #22
 80011e2:	d402      	bmi.n	80011ea <_fflush_r+0x32>
 80011e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011e6:	f7ff fb94 	bl	8000912 <__retarget_lock_acquire_recursive>
 80011ea:	4628      	mov	r0, r5
 80011ec:	4621      	mov	r1, r4
 80011ee:	f7ff ff5f 	bl	80010b0 <__sflush_r>
 80011f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80011f4:	4605      	mov	r5, r0
 80011f6:	07da      	lsls	r2, r3, #31
 80011f8:	d4e4      	bmi.n	80011c4 <_fflush_r+0xc>
 80011fa:	89a3      	ldrh	r3, [r4, #12]
 80011fc:	059b      	lsls	r3, r3, #22
 80011fe:	d4e1      	bmi.n	80011c4 <_fflush_r+0xc>
 8001200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001202:	f7ff fb87 	bl	8000914 <__retarget_lock_release_recursive>
 8001206:	e7dd      	b.n	80011c4 <_fflush_r+0xc>

08001208 <__swbuf_r>:
 8001208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800120a:	460e      	mov	r6, r1
 800120c:	4614      	mov	r4, r2
 800120e:	4605      	mov	r5, r0
 8001210:	b118      	cbz	r0, 800121a <__swbuf_r+0x12>
 8001212:	6a03      	ldr	r3, [r0, #32]
 8001214:	b90b      	cbnz	r3, 800121a <__swbuf_r+0x12>
 8001216:	f7ff fa77 	bl	8000708 <__sinit>
 800121a:	69a3      	ldr	r3, [r4, #24]
 800121c:	60a3      	str	r3, [r4, #8]
 800121e:	89a3      	ldrh	r3, [r4, #12]
 8001220:	071a      	lsls	r2, r3, #28
 8001222:	d501      	bpl.n	8001228 <__swbuf_r+0x20>
 8001224:	6923      	ldr	r3, [r4, #16]
 8001226:	b943      	cbnz	r3, 800123a <__swbuf_r+0x32>
 8001228:	4621      	mov	r1, r4
 800122a:	4628      	mov	r0, r5
 800122c:	f000 f82a 	bl	8001284 <__swsetup_r>
 8001230:	b118      	cbz	r0, 800123a <__swbuf_r+0x32>
 8001232:	f04f 37ff 	mov.w	r7, #4294967295
 8001236:	4638      	mov	r0, r7
 8001238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	b2f6      	uxtb	r6, r6
 800123e:	6922      	ldr	r2, [r4, #16]
 8001240:	4637      	mov	r7, r6
 8001242:	1a98      	subs	r0, r3, r2
 8001244:	6963      	ldr	r3, [r4, #20]
 8001246:	4283      	cmp	r3, r0
 8001248:	dc05      	bgt.n	8001256 <__swbuf_r+0x4e>
 800124a:	4621      	mov	r1, r4
 800124c:	4628      	mov	r0, r5
 800124e:	f7ff ffb3 	bl	80011b8 <_fflush_r>
 8001252:	2800      	cmp	r0, #0
 8001254:	d1ed      	bne.n	8001232 <__swbuf_r+0x2a>
 8001256:	68a3      	ldr	r3, [r4, #8]
 8001258:	3b01      	subs	r3, #1
 800125a:	60a3      	str	r3, [r4, #8]
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	6022      	str	r2, [r4, #0]
 8001262:	701e      	strb	r6, [r3, #0]
 8001264:	1c43      	adds	r3, r0, #1
 8001266:	6962      	ldr	r2, [r4, #20]
 8001268:	429a      	cmp	r2, r3
 800126a:	d004      	beq.n	8001276 <__swbuf_r+0x6e>
 800126c:	89a3      	ldrh	r3, [r4, #12]
 800126e:	07db      	lsls	r3, r3, #31
 8001270:	d5e1      	bpl.n	8001236 <__swbuf_r+0x2e>
 8001272:	2e0a      	cmp	r6, #10
 8001274:	d1df      	bne.n	8001236 <__swbuf_r+0x2e>
 8001276:	4621      	mov	r1, r4
 8001278:	4628      	mov	r0, r5
 800127a:	f7ff ff9d 	bl	80011b8 <_fflush_r>
 800127e:	2800      	cmp	r0, #0
 8001280:	d0d9      	beq.n	8001236 <__swbuf_r+0x2e>
 8001282:	e7d6      	b.n	8001232 <__swbuf_r+0x2a>

08001284 <__swsetup_r>:
 8001284:	b538      	push	{r3, r4, r5, lr}
 8001286:	4b29      	ldr	r3, [pc, #164]	@ (800132c <__swsetup_r+0xa8>)
 8001288:	4605      	mov	r5, r0
 800128a:	460c      	mov	r4, r1
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	b118      	cbz	r0, 8001298 <__swsetup_r+0x14>
 8001290:	6a03      	ldr	r3, [r0, #32]
 8001292:	b90b      	cbnz	r3, 8001298 <__swsetup_r+0x14>
 8001294:	f7ff fa38 	bl	8000708 <__sinit>
 8001298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800129c:	0719      	lsls	r1, r3, #28
 800129e:	d422      	bmi.n	80012e6 <__swsetup_r+0x62>
 80012a0:	06da      	lsls	r2, r3, #27
 80012a2:	d407      	bmi.n	80012b4 <__swsetup_r+0x30>
 80012a4:	2209      	movs	r2, #9
 80012a6:	602a      	str	r2, [r5, #0]
 80012a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	81a3      	strh	r3, [r4, #12]
 80012b2:	e033      	b.n	800131c <__swsetup_r+0x98>
 80012b4:	0758      	lsls	r0, r3, #29
 80012b6:	d512      	bpl.n	80012de <__swsetup_r+0x5a>
 80012b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012ba:	b141      	cbz	r1, 80012ce <__swsetup_r+0x4a>
 80012bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012c0:	4299      	cmp	r1, r3
 80012c2:	d002      	beq.n	80012ca <__swsetup_r+0x46>
 80012c4:	4628      	mov	r0, r5
 80012c6:	f7ff fb27 	bl	8000918 <_free_r>
 80012ca:	2300      	movs	r3, #0
 80012cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80012d4:	81a3      	strh	r3, [r4, #12]
 80012d6:	2300      	movs	r3, #0
 80012d8:	6063      	str	r3, [r4, #4]
 80012da:	6923      	ldr	r3, [r4, #16]
 80012dc:	6023      	str	r3, [r4, #0]
 80012de:	89a3      	ldrh	r3, [r4, #12]
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	81a3      	strh	r3, [r4, #12]
 80012e6:	6923      	ldr	r3, [r4, #16]
 80012e8:	b94b      	cbnz	r3, 80012fe <__swsetup_r+0x7a>
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80012f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012f4:	d003      	beq.n	80012fe <__swsetup_r+0x7a>
 80012f6:	4621      	mov	r1, r4
 80012f8:	4628      	mov	r0, r5
 80012fa:	f000 f85c 	bl	80013b6 <__smakebuf_r>
 80012fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001302:	f013 0201 	ands.w	r2, r3, #1
 8001306:	d00a      	beq.n	800131e <__swsetup_r+0x9a>
 8001308:	2200      	movs	r2, #0
 800130a:	60a2      	str	r2, [r4, #8]
 800130c:	6962      	ldr	r2, [r4, #20]
 800130e:	4252      	negs	r2, r2
 8001310:	61a2      	str	r2, [r4, #24]
 8001312:	6922      	ldr	r2, [r4, #16]
 8001314:	b942      	cbnz	r2, 8001328 <__swsetup_r+0xa4>
 8001316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800131a:	d1c5      	bne.n	80012a8 <__swsetup_r+0x24>
 800131c:	bd38      	pop	{r3, r4, r5, pc}
 800131e:	0799      	lsls	r1, r3, #30
 8001320:	bf58      	it	pl
 8001322:	6962      	ldrpl	r2, [r4, #20]
 8001324:	60a2      	str	r2, [r4, #8]
 8001326:	e7f4      	b.n	8001312 <__swsetup_r+0x8e>
 8001328:	2000      	movs	r0, #0
 800132a:	e7f7      	b.n	800131c <__swsetup_r+0x98>
 800132c:	2000000c 	.word	0x2000000c

08001330 <_sbrk_r>:
 8001330:	b538      	push	{r3, r4, r5, lr}
 8001332:	2300      	movs	r3, #0
 8001334:	4d05      	ldr	r5, [pc, #20]	@ (800134c <_sbrk_r+0x1c>)
 8001336:	4604      	mov	r4, r0
 8001338:	4608      	mov	r0, r1
 800133a:	602b      	str	r3, [r5, #0]
 800133c:	f7ff f8f8 	bl	8000530 <_sbrk>
 8001340:	1c43      	adds	r3, r0, #1
 8001342:	d102      	bne.n	800134a <_sbrk_r+0x1a>
 8001344:	682b      	ldr	r3, [r5, #0]
 8001346:	b103      	cbz	r3, 800134a <_sbrk_r+0x1a>
 8001348:	6023      	str	r3, [r4, #0]
 800134a:	bd38      	pop	{r3, r4, r5, pc}
 800134c:	200001b8 	.word	0x200001b8

08001350 <memchr>:
 8001350:	b2c9      	uxtb	r1, r1
 8001352:	4603      	mov	r3, r0
 8001354:	4402      	add	r2, r0
 8001356:	b510      	push	{r4, lr}
 8001358:	4293      	cmp	r3, r2
 800135a:	4618      	mov	r0, r3
 800135c:	d101      	bne.n	8001362 <memchr+0x12>
 800135e:	2000      	movs	r0, #0
 8001360:	e003      	b.n	800136a <memchr+0x1a>
 8001362:	7804      	ldrb	r4, [r0, #0]
 8001364:	3301      	adds	r3, #1
 8001366:	428c      	cmp	r4, r1
 8001368:	d1f6      	bne.n	8001358 <memchr+0x8>
 800136a:	bd10      	pop	{r4, pc}

0800136c <__swhatbuf_r>:
 800136c:	b570      	push	{r4, r5, r6, lr}
 800136e:	460c      	mov	r4, r1
 8001370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001374:	b096      	sub	sp, #88	@ 0x58
 8001376:	4615      	mov	r5, r2
 8001378:	2900      	cmp	r1, #0
 800137a:	461e      	mov	r6, r3
 800137c:	da0c      	bge.n	8001398 <__swhatbuf_r+0x2c>
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	2100      	movs	r1, #0
 8001382:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001386:	bf14      	ite	ne
 8001388:	2340      	movne	r3, #64	@ 0x40
 800138a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800138e:	2000      	movs	r0, #0
 8001390:	6031      	str	r1, [r6, #0]
 8001392:	602b      	str	r3, [r5, #0]
 8001394:	b016      	add	sp, #88	@ 0x58
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	466a      	mov	r2, sp
 800139a:	f000 f849 	bl	8001430 <_fstat_r>
 800139e:	2800      	cmp	r0, #0
 80013a0:	dbed      	blt.n	800137e <__swhatbuf_r+0x12>
 80013a2:	9901      	ldr	r1, [sp, #4]
 80013a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013ac:	4259      	negs	r1, r3
 80013ae:	4159      	adcs	r1, r3
 80013b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b4:	e7eb      	b.n	800138e <__swhatbuf_r+0x22>

080013b6 <__smakebuf_r>:
 80013b6:	898b      	ldrh	r3, [r1, #12]
 80013b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013ba:	079d      	lsls	r5, r3, #30
 80013bc:	4606      	mov	r6, r0
 80013be:	460c      	mov	r4, r1
 80013c0:	d507      	bpl.n	80013d2 <__smakebuf_r+0x1c>
 80013c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013c6:	6023      	str	r3, [r4, #0]
 80013c8:	6123      	str	r3, [r4, #16]
 80013ca:	2301      	movs	r3, #1
 80013cc:	6163      	str	r3, [r4, #20]
 80013ce:	b003      	add	sp, #12
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d2:	ab01      	add	r3, sp, #4
 80013d4:	466a      	mov	r2, sp
 80013d6:	f7ff ffc9 	bl	800136c <__swhatbuf_r>
 80013da:	9f00      	ldr	r7, [sp, #0]
 80013dc:	4605      	mov	r5, r0
 80013de:	4630      	mov	r0, r6
 80013e0:	4639      	mov	r1, r7
 80013e2:	f7ff fb05 	bl	80009f0 <_malloc_r>
 80013e6:	b948      	cbnz	r0, 80013fc <__smakebuf_r+0x46>
 80013e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ec:	059a      	lsls	r2, r3, #22
 80013ee:	d4ee      	bmi.n	80013ce <__smakebuf_r+0x18>
 80013f0:	f023 0303 	bic.w	r3, r3, #3
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	81a3      	strh	r3, [r4, #12]
 80013fa:	e7e2      	b.n	80013c2 <__smakebuf_r+0xc>
 80013fc:	89a3      	ldrh	r3, [r4, #12]
 80013fe:	6020      	str	r0, [r4, #0]
 8001400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001404:	81a3      	strh	r3, [r4, #12]
 8001406:	9b01      	ldr	r3, [sp, #4]
 8001408:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800140c:	b15b      	cbz	r3, 8001426 <__smakebuf_r+0x70>
 800140e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001412:	4630      	mov	r0, r6
 8001414:	f000 f81e 	bl	8001454 <_isatty_r>
 8001418:	b128      	cbz	r0, 8001426 <__smakebuf_r+0x70>
 800141a:	89a3      	ldrh	r3, [r4, #12]
 800141c:	f023 0303 	bic.w	r3, r3, #3
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	81a3      	strh	r3, [r4, #12]
 8001426:	89a3      	ldrh	r3, [r4, #12]
 8001428:	431d      	orrs	r5, r3
 800142a:	81a5      	strh	r5, [r4, #12]
 800142c:	e7cf      	b.n	80013ce <__smakebuf_r+0x18>
	...

08001430 <_fstat_r>:
 8001430:	b538      	push	{r3, r4, r5, lr}
 8001432:	2300      	movs	r3, #0
 8001434:	4d06      	ldr	r5, [pc, #24]	@ (8001450 <_fstat_r+0x20>)
 8001436:	4604      	mov	r4, r0
 8001438:	4608      	mov	r0, r1
 800143a:	4611      	mov	r1, r2
 800143c:	602b      	str	r3, [r5, #0]
 800143e:	f7ff f84f 	bl	80004e0 <_fstat>
 8001442:	1c43      	adds	r3, r0, #1
 8001444:	d102      	bne.n	800144c <_fstat_r+0x1c>
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	b103      	cbz	r3, 800144c <_fstat_r+0x1c>
 800144a:	6023      	str	r3, [r4, #0]
 800144c:	bd38      	pop	{r3, r4, r5, pc}
 800144e:	bf00      	nop
 8001450:	200001b8 	.word	0x200001b8

08001454 <_isatty_r>:
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	2300      	movs	r3, #0
 8001458:	4d05      	ldr	r5, [pc, #20]	@ (8001470 <_isatty_r+0x1c>)
 800145a:	4604      	mov	r4, r0
 800145c:	4608      	mov	r0, r1
 800145e:	602b      	str	r3, [r5, #0]
 8001460:	f7ff f84e 	bl	8000500 <_isatty>
 8001464:	1c43      	adds	r3, r0, #1
 8001466:	d102      	bne.n	800146e <_isatty_r+0x1a>
 8001468:	682b      	ldr	r3, [r5, #0]
 800146a:	b103      	cbz	r3, 800146e <_isatty_r+0x1a>
 800146c:	6023      	str	r3, [r4, #0]
 800146e:	bd38      	pop	{r3, r4, r5, pc}
 8001470:	200001b8 	.word	0x200001b8

08001474 <_init>:
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001476:	bf00      	nop
 8001478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147a:	bc08      	pop	{r3}
 800147c:	469e      	mov	lr, r3
 800147e:	4770      	bx	lr

08001480 <_fini>:
 8001480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001482:	bf00      	nop
 8001484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001486:	bc08      	pop	{r3}
 8001488:	469e      	mov	lr, r3
 800148a:	4770      	bx	lr
