
CacheMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001308  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08001554  08001554  00002554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a00  08001a00  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a00  08001a00  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a00  08001a00  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a00  08001a00  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a04  08001a04  00002a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001a08  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001a64  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001a64  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000206f  00000000  00000000  00003092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000725  00000000  00000000  00005101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00005828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000146  00000000  00000000  00005a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e1f  00000000  00000000  00005b4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a91  00000000  00000000  0002a96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7ee1  00000000  00000000  0002d3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001052df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d70  00000000  00000000  00105324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00106094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000005c 	.word	0x2000005c
 8000268:	00000000 	.word	0x00000000
 800026c:	0800153c 	.word	0x0800153c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000060 	.word	0x20000060
 8000288:	0800153c 	.word	0x0800153c

0800028c <ICACHE_Init>:
#include <CACHE.h>
#include <stdio.h>

static void ICACHE_Init(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
    // Disable ICACHE before configuration
    ICACHE->CR &= ~ICACHE_CR_EN;
 8000290:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <ICACHE_Init+0x58>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a13      	ldr	r2, [pc, #76]	@ (80002e4 <ICACHE_Init+0x58>)
 8000296:	f023 0301 	bic.w	r3, r3, #1
 800029a:	6013      	str	r3, [r2, #0]
    // Invalidate the cache
    ICACHE->CR |= ICACHE_CR_CACHEINV;
 800029c:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <ICACHE_Init+0x58>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a10      	ldr	r2, [pc, #64]	@ (80002e4 <ICACHE_Init+0x58>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6013      	str	r3, [r2, #0]
    while (ICACHE->SR & ICACHE_SR_BUSYF); // Wait until invalidation completes
 80002a8:	bf00      	nop
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <ICACHE_Init+0x58>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d1f9      	bne.n	80002aa <ICACHE_Init+0x1e>
    // Enable HIT/MISS monitoring
    ICACHE->CR |= ICACHE_CR_MISSMEN | ICACHE_CR_HITMEN;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <ICACHE_Init+0x58>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0a      	ldr	r2, [pc, #40]	@ (80002e4 <ICACHE_Init+0x58>)
 80002bc:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80002c0:	6013      	str	r3, [r2, #0]
    // Reset HIT/MISS counters
    ICACHE->CR &= ~(ICACHE_CR_MISSMRST | ICACHE_CR_HITMRST);
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <ICACHE_Init+0x58>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <ICACHE_Init+0x58>)
 80002c8:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002cc:	6013      	str	r3, [r2, #0]
    // Enable ICACHE
    ICACHE->CR |= ICACHE_CR_EN;
 80002ce:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <ICACHE_Init+0x58>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <ICACHE_Init+0x58>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40030400 	.word	0x40030400

080002e8 <CACHE_Init>:

void CACHE_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	ICACHE_Init();
 80002ec:	f7ff ffce 	bl	800028c <ICACHE_Init>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}

080002f4 <CACHE_ClearMonitor>:

static void CACHE_ClearMonitor(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	printf("\033[2J\033[H");
 80002f8:	4802      	ldr	r0, [pc, #8]	@ (8000304 <CACHE_ClearMonitor+0x10>)
 80002fa:	f000 fa9f 	bl	800083c <iprintf>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	08001554 	.word	0x08001554

08000308 <CACHE_PrintBanner>:

static void CACHE_PrintBanner(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	printf("\n\r");
 800030c:	480b      	ldr	r0, [pc, #44]	@ (800033c <CACHE_PrintBanner+0x34>)
 800030e:	f000 fa95 	bl	800083c <iprintf>
	printf(" ██████  █████   ██████ ██   ██ ███████     ███    ███  ██████  ███    ██ ██ ████████  ██████  ██████  \n\r");
 8000312:	480b      	ldr	r0, [pc, #44]	@ (8000340 <CACHE_PrintBanner+0x38>)
 8000314:	f000 fa92 	bl	800083c <iprintf>
	printf("██      ██   ██ ██      ██   ██ ██          ████  ████ ██    ██ ████   ██ ██    ██    ██    ██ ██   ██ \n\r");
 8000318:	480a      	ldr	r0, [pc, #40]	@ (8000344 <CACHE_PrintBanner+0x3c>)
 800031a:	f000 fa8f 	bl	800083c <iprintf>
	printf("██      ███████ ██      ███████ █████       ██ ████ ██ ██    ██ ██ ██  ██ ██    ██    ██    ██ ██████  \n\r");
 800031e:	480a      	ldr	r0, [pc, #40]	@ (8000348 <CACHE_PrintBanner+0x40>)
 8000320:	f000 fa8c 	bl	800083c <iprintf>
	printf("██      ██   ██ ██      ██   ██ ██          ██  ██  ██ ██    ██ ██  ██ ██ ██    ██    ██    ██ ██   ██ \n\r");
 8000324:	4809      	ldr	r0, [pc, #36]	@ (800034c <CACHE_PrintBanner+0x44>)
 8000326:	f000 fa89 	bl	800083c <iprintf>
	printf(" ██████ ██   ██  ██████ ██   ██ ███████     ██      ██  ██████  ██   ████ ██    ██     ██████  ██   ██ \n\r");
 800032a:	4809      	ldr	r0, [pc, #36]	@ (8000350 <CACHE_PrintBanner+0x48>)
 800032c:	f000 fa86 	bl	800083c <iprintf>
	printf("\n\r");
 8000330:	4802      	ldr	r0, [pc, #8]	@ (800033c <CACHE_PrintBanner+0x34>)
 8000332:	f000 fa83 	bl	800083c <iprintf>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	0800155c 	.word	0x0800155c
 8000340:	08001560 	.word	0x08001560
 8000344:	08001650 	.word	0x08001650
 8000348:	08001714 	.word	0x08001714
 800034c:	080017ec 	.word	0x080017ec
 8000350:	080018ac 	.word	0x080018ac

08000354 <CACHE_UpdateMonitor>:

void CACHE_UpdateMonitor(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	CACHE_ClearMonitor();
 8000358:	f7ff ffcc 	bl	80002f4 <CACHE_ClearMonitor>
	CACHE_PrintBanner();
 800035c:	f7ff ffd4 	bl	8000308 <CACHE_PrintBanner>
	printf("\n\n\r");
 8000360:	480b      	ldr	r0, [pc, #44]	@ (8000390 <CACHE_UpdateMonitor+0x3c>)
 8000362:	f000 fa6b 	bl	800083c <iprintf>
	printf("█ ICACHE HIT  Counter : %lu\n\r", ICACHE->HMONR);
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <CACHE_UpdateMonitor+0x40>)
 8000368:	691b      	ldr	r3, [r3, #16]
 800036a:	4619      	mov	r1, r3
 800036c:	480a      	ldr	r0, [pc, #40]	@ (8000398 <CACHE_UpdateMonitor+0x44>)
 800036e:	f000 fa65 	bl	800083c <iprintf>
    printf("\n\r");
 8000372:	480a      	ldr	r0, [pc, #40]	@ (800039c <CACHE_UpdateMonitor+0x48>)
 8000374:	f000 fa62 	bl	800083c <iprintf>
    printf("█ ICACHE MISS Counter : %lu\n\r", ICACHE->MMONR);
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <CACHE_UpdateMonitor+0x40>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4619      	mov	r1, r3
 800037e:	4808      	ldr	r0, [pc, #32]	@ (80003a0 <CACHE_UpdateMonitor+0x4c>)
 8000380:	f000 fa5c 	bl	800083c <iprintf>
    printf("\n\r");
 8000384:	4805      	ldr	r0, [pc, #20]	@ (800039c <CACHE_UpdateMonitor+0x48>)
 8000386:	f000 fa59 	bl	800083c <iprintf>

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	08001988 	.word	0x08001988
 8000394:	40030400 	.word	0x40030400
 8000398:	0800198c 	.word	0x0800198c
 800039c:	0800155c 	.word	0x0800155c
 80003a0:	080019ac 	.word	0x080019ac

080003a4 <TIM2_IRQHandler>:
    NVIC_SetPriority(TIM2_IRQn, 1);
    TIM2->CR1 |= TIM_CR1_CEN;
}

void TIM2_IRQHandler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 80003a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ac:	691b      	ldr	r3, [r3, #16]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d009      	beq.n	80003ca <TIM2_IRQHandler+0x26>
    {
        TIM2->SR &= ~TIM_SR_UIF;
 80003b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ba:	691b      	ldr	r3, [r3, #16]
 80003bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003c0:	f023 0301 	bic.w	r3, r3, #1
 80003c4:	6113      	str	r3, [r2, #16]
        CACHE_UpdateMonitor();
 80003c6:	f7ff ffc5 	bl	8000354 <CACHE_UpdateMonitor>
    }
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}

080003ce <Compute_UART_Baud>:
#define UART_BAUDRATE	115200
#define SYS_FREQ		32000000
#define APB1_CLK		SYS_FREQ

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	085a      	lsrs	r2, r3, #1
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	441a      	add	r2, r3
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80003e6:	b29b      	uxth	r3, r3
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <UART3_SetBaudRate>:

static void UART3_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
	USART3->BRR = Compute_UART_Baud(periph_clk,baudrate);
 80003fe:	6839      	ldr	r1, [r7, #0]
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f7ff ffe4 	bl	80003ce <Compute_UART_Baud>
 8000406:	4603      	mov	r3, r0
 8000408:	461a      	mov	r2, r3
 800040a:	4b03      	ldr	r3, [pc, #12]	@ (8000418 <UART3_SetBaudRate+0x24>)
 800040c:	60da      	str	r2, [r3, #12]
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40004800 	.word	0x40004800

0800041c <UART3_Init>:

void UART3_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA and UART2 */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 8000420:	4b1a      	ldr	r3, [pc, #104]	@ (800048c <UART3_Init+0x70>)
 8000422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000426:	4a19      	ldr	r2, [pc, #100]	@ (800048c <UART3_Init+0x70>)
 8000428:	f043 0308 	orr.w	r3, r3, #8
 800042c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    RCC->APB1LENR |= RCC_APB1LENR_USART3EN;
 8000430:	4b16      	ldr	r3, [pc, #88]	@ (800048c <UART3_Init+0x70>)
 8000432:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000436:	4a15      	ldr	r2, [pc, #84]	@ (800048c <UART3_Init+0x70>)
 8000438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800043c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /* Set PD8 and PD9 to alternate function mode */
    GPIOD->MODER &= ~((3U << 16) | (3U << 18));
 8000440:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <UART3_Init+0x74>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a12      	ldr	r2, [pc, #72]	@ (8000490 <UART3_Init+0x74>)
 8000446:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800044a:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (2U << 16) | (2U << 18);
 800044c:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <UART3_Init+0x74>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a0f      	ldr	r2, [pc, #60]	@ (8000490 <UART3_Init+0x74>)
 8000452:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000456:	6013      	str	r3, [r2, #0]

    /* Set Alternate Function type to USART3 (AF7) */
    GPIOD->AFR[1] |= (7U << 0) | (7U << 4);
 8000458:	4b0d      	ldr	r3, [pc, #52]	@ (8000490 <UART3_Init+0x74>)
 800045a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800045c:	4a0c      	ldr	r2, [pc, #48]	@ (8000490 <UART3_Init+0x74>)
 800045e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8000462:	6253      	str	r3, [r2, #36]	@ 0x24

    // Disable USART3 Peripheral
    USART3->CR1 &= ~(1<<0);
 8000464:	4b0b      	ldr	r3, [pc, #44]	@ (8000494 <UART3_Init+0x78>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <UART3_Init+0x78>)
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	6013      	str	r3, [r2, #0]

    /* Configure Baud Rate */
    UART3_SetBaudRate(APB1_CLK,UART_BAUDRATE); // For 32 MHz and 115200 baud
 8000470:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000474:	4808      	ldr	r0, [pc, #32]	@ (8000498 <UART3_Init+0x7c>)
 8000476:	f7ff ffbd 	bl	80003f4 <UART3_SetBaudRate>

    /* Enable TX, RX, and UART */
    USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800047a:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <UART3_Init+0x78>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <UART3_Init+0x78>)
 8000480:	f043 030d 	orr.w	r3, r3, #13
 8000484:	6013      	str	r3, [r2, #0]
}
 8000486:	bf00      	nop
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	44020c00 	.word	0x44020c00
 8000490:	42020c00 	.word	0x42020c00
 8000494:	40004800 	.word	0x40004800
 8000498:	01e84800 	.word	0x01e84800

0800049c <UART3_TxChar>:

void UART3_TxChar(char ch)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART3->ISR & USART_ISR_TXE));
 80004a6:	bf00      	nop
 80004a8:	4b07      	ldr	r3, [pc, #28]	@ (80004c8 <UART3_TxChar+0x2c>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f9      	beq.n	80004a8 <UART3_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART3->TDR = (ch & 0xFF);
 80004b4:	4a04      	ldr	r2, [pc, #16]	@ (80004c8 <UART3_TxChar+0x2c>)
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40004800 	.word	0x40004800

080004cc <UART3_RxChar>:
		UART3_TxChar(*str++);
	}
}

uint8_t UART3_RxChar(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
    while(!(USART3->ISR & USART_ISR_RXNE)); // Wait for RXNE flag (data received)
 80004d0:	bf00      	nop
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <UART3_RxChar+0x24>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	f003 0320 	and.w	r3, r3, #32
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d0f9      	beq.n	80004d2 <UART3_RxChar+0x6>
    return (uint8_t)(USART3->RDR & 0xFF); // Return the received data
 80004de:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <UART3_RxChar+0x24>)
 80004e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004e2:	b2db      	uxtb	r3, r3
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40004800 	.word	0x40004800

080004f4 <_write>:

int _write(int file, char *ptr, int len)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	e009      	b.n	800051a <_write+0x26>
    {
        UART3_TxChar(ptr[i]);  // Transmit each character via UART2
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	68ba      	ldr	r2, [r7, #8]
 800050a:	4413      	add	r3, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f7ff ffc4 	bl	800049c <UART3_TxChar>
    for (int i = 0; i < len; i++)
 8000514:	697b      	ldr	r3, [r7, #20]
 8000516:	3301      	adds	r3, #1
 8000518:	617b      	str	r3, [r7, #20]
 800051a:	697a      	ldr	r2, [r7, #20]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	429a      	cmp	r2, r3
 8000520:	dbf1      	blt.n	8000506 <_write+0x12>
    }
    return len;  // Return the number of characters written
 8000522:	687b      	ldr	r3, [r7, #4]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3718      	adds	r7, #24
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <_read>:

int _read(int file, char *ptr, int len)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b087      	sub	sp, #28
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e017      	b.n	800056e <_read+0x42>
    {
        ptr[i] = UART3_RxChar();  // Read each character via UART2
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	68ba      	ldr	r2, [r7, #8]
 8000542:	18d4      	adds	r4, r2, r3
 8000544:	f7ff ffc2 	bl	80004cc <UART3_RxChar>
 8000548:	4603      	mov	r3, r0
 800054a:	7023      	strb	r3, [r4, #0]
        if (ptr[i] == '\r')      // Handle Enter key as a newline
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	4413      	add	r3, r2
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b0d      	cmp	r3, #13
 8000556:	d107      	bne.n	8000568 <_read+0x3c>
        {
            ptr[i] = '\n';       // Convert '\r' to '\n' for standard behavior
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	4413      	add	r3, r2
 800055e:	220a      	movs	r2, #10
 8000560:	701a      	strb	r2, [r3, #0]
            return i + 1;        // Return number of characters read
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	e007      	b.n	8000578 <_read+0x4c>
    for (int i = 0; i < len; i++)
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	3301      	adds	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	429a      	cmp	r2, r3
 8000574:	dbe3      	blt.n	800053e <_read+0x12>
        }
    }
    return len;  // Return number of characters read
 8000576:	687b      	ldr	r3, [r7, #4]
}
 8000578:	4618      	mov	r0, r3
 800057a:	371c      	adds	r7, #28
 800057c:	46bd      	mov	sp, r7
 800057e:	bd90      	pop	{r4, r7, pc}

08000580 <main>:

#include <stdio.h>
#include <stdint.h>

int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	UART3_Init();
 8000584:	f7ff ff4a 	bl	800041c <UART3_Init>
	CACHE_Init();
 8000588:	f7ff feae 	bl	80002e8 <CACHE_Init>

    while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <main+0xc>

08000590 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800059c:	4618      	mov	r0, r3
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005b8:	605a      	str	r2, [r3, #4]
  return 0;
 80005ba:	2300      	movs	r3, #0
}
 80005bc:	4618      	mov	r0, r3
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <_isatty>:

int _isatty(int file)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005d0:	2301      	movs	r3, #1
}
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr

080005de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005de:	b480      	push	{r7}
 80005e0:	b085      	sub	sp, #20
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	60f8      	str	r0, [r7, #12]
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ea:	2300      	movs	r3, #0
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	@ (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f000 f9ac 	bl	8000984 <__errno>
 800062c:	4603      	mov	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a05      	ldr	r2, [pc, #20]	@ (800065c <_sbrk+0x64>)
 8000648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200a0000 	.word	0x200a0000
 8000658:	00000400 	.word	0x00000400
 800065c:	20000078 	.word	0x20000078
 8000660:	200001c8 	.word	0x200001c8

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000664:	480d      	ldr	r0, [pc, #52]	@ (800069c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000666:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000668:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	@ (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	@ (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000692:	f000 f97d 	bl	8000990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000696:	f7ff ff73 	bl	8000580 <main>

0800069a <LoopForever>:

LoopForever:
  b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   r0, =_estack
 800069c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006a8:	08001a08 	.word	0x08001a08
  ldr r2, =_sbss
 80006ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006b0:	200001c8 	.word	0x200001c8

080006b4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC1_IRQHandler>
	...

080006b8 <std>:
 80006b8:	2300      	movs	r3, #0
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4604      	mov	r4, r0
 80006be:	6083      	str	r3, [r0, #8]
 80006c0:	8181      	strh	r1, [r0, #12]
 80006c2:	4619      	mov	r1, r3
 80006c4:	6643      	str	r3, [r0, #100]	@ 0x64
 80006c6:	81c2      	strh	r2, [r0, #14]
 80006c8:	2208      	movs	r2, #8
 80006ca:	6183      	str	r3, [r0, #24]
 80006cc:	e9c0 3300 	strd	r3, r3, [r0]
 80006d0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006d4:	305c      	adds	r0, #92	@ 0x5c
 80006d6:	f000 f906 	bl	80008e6 <memset>
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <std+0x58>)
 80006dc:	6224      	str	r4, [r4, #32]
 80006de:	6263      	str	r3, [r4, #36]	@ 0x24
 80006e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <std+0x5c>)
 80006e2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <std+0x60>)
 80006e6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <std+0x64>)
 80006ea:	6323      	str	r3, [r4, #48]	@ 0x30
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <std+0x68>)
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d006      	beq.n	8000700 <std+0x48>
 80006f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006f6:	4294      	cmp	r4, r2
 80006f8:	d002      	beq.n	8000700 <std+0x48>
 80006fa:	33d0      	adds	r3, #208	@ 0xd0
 80006fc:	429c      	cmp	r4, r3
 80006fe:	d105      	bne.n	800070c <std+0x54>
 8000700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000708:	f000 b966 	b.w	80009d8 <__retarget_lock_init_recursive>
 800070c:	bd10      	pop	{r4, pc}
 800070e:	bf00      	nop
 8000710:	08000861 	.word	0x08000861
 8000714:	08000883 	.word	0x08000883
 8000718:	080008bb 	.word	0x080008bb
 800071c:	080008df 	.word	0x080008df
 8000720:	2000007c 	.word	0x2000007c

08000724 <stdio_exit_handler>:
 8000724:	4a02      	ldr	r2, [pc, #8]	@ (8000730 <stdio_exit_handler+0xc>)
 8000726:	4903      	ldr	r1, [pc, #12]	@ (8000734 <stdio_exit_handler+0x10>)
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <stdio_exit_handler+0x14>)
 800072a:	f000 b869 	b.w	8000800 <_fwalk_sglue>
 800072e:	bf00      	nop
 8000730:	20000000 	.word	0x20000000
 8000734:	08001281 	.word	0x08001281
 8000738:	20000010 	.word	0x20000010

0800073c <cleanup_stdio>:
 800073c:	6841      	ldr	r1, [r0, #4]
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <cleanup_stdio+0x34>)
 8000740:	4299      	cmp	r1, r3
 8000742:	b510      	push	{r4, lr}
 8000744:	4604      	mov	r4, r0
 8000746:	d001      	beq.n	800074c <cleanup_stdio+0x10>
 8000748:	f000 fd9a 	bl	8001280 <_fflush_r>
 800074c:	68a1      	ldr	r1, [r4, #8]
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <cleanup_stdio+0x38>)
 8000750:	4299      	cmp	r1, r3
 8000752:	d002      	beq.n	800075a <cleanup_stdio+0x1e>
 8000754:	4620      	mov	r0, r4
 8000756:	f000 fd93 	bl	8001280 <_fflush_r>
 800075a:	68e1      	ldr	r1, [r4, #12]
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <cleanup_stdio+0x3c>)
 800075e:	4299      	cmp	r1, r3
 8000760:	d004      	beq.n	800076c <cleanup_stdio+0x30>
 8000762:	4620      	mov	r0, r4
 8000764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000768:	f000 bd8a 	b.w	8001280 <_fflush_r>
 800076c:	bd10      	pop	{r4, pc}
 800076e:	bf00      	nop
 8000770:	2000007c 	.word	0x2000007c
 8000774:	200000e4 	.word	0x200000e4
 8000778:	2000014c 	.word	0x2000014c

0800077c <global_stdio_init.part.0>:
 800077c:	b510      	push	{r4, lr}
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <global_stdio_init.part.0+0x30>)
 8000780:	2104      	movs	r1, #4
 8000782:	4c0b      	ldr	r4, [pc, #44]	@ (80007b0 <global_stdio_init.part.0+0x34>)
 8000784:	4a0b      	ldr	r2, [pc, #44]	@ (80007b4 <global_stdio_init.part.0+0x38>)
 8000786:	4620      	mov	r0, r4
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	2200      	movs	r2, #0
 800078c:	f7ff ff94 	bl	80006b8 <std>
 8000790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000794:	2201      	movs	r2, #1
 8000796:	2109      	movs	r1, #9
 8000798:	f7ff ff8e 	bl	80006b8 <std>
 800079c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007a0:	2202      	movs	r2, #2
 80007a2:	2112      	movs	r1, #18
 80007a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a8:	f7ff bf86 	b.w	80006b8 <std>
 80007ac:	200001b4 	.word	0x200001b4
 80007b0:	2000007c 	.word	0x2000007c
 80007b4:	08000725 	.word	0x08000725

080007b8 <__sfp_lock_acquire>:
 80007b8:	4801      	ldr	r0, [pc, #4]	@ (80007c0 <__sfp_lock_acquire+0x8>)
 80007ba:	f000 b90e 	b.w	80009da <__retarget_lock_acquire_recursive>
 80007be:	bf00      	nop
 80007c0:	200001bd 	.word	0x200001bd

080007c4 <__sfp_lock_release>:
 80007c4:	4801      	ldr	r0, [pc, #4]	@ (80007cc <__sfp_lock_release+0x8>)
 80007c6:	f000 b909 	b.w	80009dc <__retarget_lock_release_recursive>
 80007ca:	bf00      	nop
 80007cc:	200001bd 	.word	0x200001bd

080007d0 <__sinit>:
 80007d0:	b510      	push	{r4, lr}
 80007d2:	4604      	mov	r4, r0
 80007d4:	f7ff fff0 	bl	80007b8 <__sfp_lock_acquire>
 80007d8:	6a23      	ldr	r3, [r4, #32]
 80007da:	b11b      	cbz	r3, 80007e4 <__sinit+0x14>
 80007dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e0:	f7ff bff0 	b.w	80007c4 <__sfp_lock_release>
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <__sinit+0x28>)
 80007e6:	6223      	str	r3, [r4, #32]
 80007e8:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <__sinit+0x2c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f5      	bne.n	80007dc <__sinit+0xc>
 80007f0:	f7ff ffc4 	bl	800077c <global_stdio_init.part.0>
 80007f4:	e7f2      	b.n	80007dc <__sinit+0xc>
 80007f6:	bf00      	nop
 80007f8:	0800073d 	.word	0x0800073d
 80007fc:	200001b4 	.word	0x200001b4

08000800 <_fwalk_sglue>:
 8000800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000804:	4607      	mov	r7, r0
 8000806:	4688      	mov	r8, r1
 8000808:	4614      	mov	r4, r2
 800080a:	2600      	movs	r6, #0
 800080c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000810:	f1b9 0901 	subs.w	r9, r9, #1
 8000814:	d505      	bpl.n	8000822 <_fwalk_sglue+0x22>
 8000816:	6824      	ldr	r4, [r4, #0]
 8000818:	2c00      	cmp	r4, #0
 800081a:	d1f7      	bne.n	800080c <_fwalk_sglue+0xc>
 800081c:	4630      	mov	r0, r6
 800081e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000822:	89ab      	ldrh	r3, [r5, #12]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d907      	bls.n	8000838 <_fwalk_sglue+0x38>
 8000828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800082c:	3301      	adds	r3, #1
 800082e:	d003      	beq.n	8000838 <_fwalk_sglue+0x38>
 8000830:	4629      	mov	r1, r5
 8000832:	4638      	mov	r0, r7
 8000834:	47c0      	blx	r8
 8000836:	4306      	orrs	r6, r0
 8000838:	3568      	adds	r5, #104	@ 0x68
 800083a:	e7e9      	b.n	8000810 <_fwalk_sglue+0x10>

0800083c <iprintf>:
 800083c:	b40f      	push	{r0, r1, r2, r3}
 800083e:	b507      	push	{r0, r1, r2, lr}
 8000840:	4906      	ldr	r1, [pc, #24]	@ (800085c <iprintf+0x20>)
 8000842:	ab04      	add	r3, sp, #16
 8000844:	6808      	ldr	r0, [r1, #0]
 8000846:	f853 2b04 	ldr.w	r2, [r3], #4
 800084a:	6881      	ldr	r1, [r0, #8]
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	f000 f9e9 	bl	8000c24 <_vfiprintf_r>
 8000852:	b003      	add	sp, #12
 8000854:	f85d eb04 	ldr.w	lr, [sp], #4
 8000858:	b004      	add	sp, #16
 800085a:	4770      	bx	lr
 800085c:	2000000c 	.word	0x2000000c

08000860 <__sread>:
 8000860:	b510      	push	{r4, lr}
 8000862:	460c      	mov	r4, r1
 8000864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000868:	f000 f868 	bl	800093c <_read_r>
 800086c:	2800      	cmp	r0, #0
 800086e:	bfab      	itete	ge
 8000870:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000872:	89a3      	ldrhlt	r3, [r4, #12]
 8000874:	181b      	addge	r3, r3, r0
 8000876:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800087a:	bfac      	ite	ge
 800087c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800087e:	81a3      	strhlt	r3, [r4, #12]
 8000880:	bd10      	pop	{r4, pc}

08000882 <__swrite>:
 8000882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000886:	461f      	mov	r7, r3
 8000888:	898b      	ldrh	r3, [r1, #12]
 800088a:	4605      	mov	r5, r0
 800088c:	460c      	mov	r4, r1
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	4616      	mov	r6, r2
 8000892:	d505      	bpl.n	80008a0 <__swrite+0x1e>
 8000894:	2302      	movs	r3, #2
 8000896:	2200      	movs	r2, #0
 8000898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800089c:	f000 f83c 	bl	8000918 <_lseek_r>
 80008a0:	89a3      	ldrh	r3, [r4, #12]
 80008a2:	4632      	mov	r2, r6
 80008a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008a8:	4628      	mov	r0, r5
 80008aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008ae:	81a3      	strh	r3, [r4, #12]
 80008b0:	463b      	mov	r3, r7
 80008b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008b6:	f000 b853 	b.w	8000960 <_write_r>

080008ba <__sseek>:
 80008ba:	b510      	push	{r4, lr}
 80008bc:	460c      	mov	r4, r1
 80008be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c2:	f000 f829 	bl	8000918 <_lseek_r>
 80008c6:	1c43      	adds	r3, r0, #1
 80008c8:	89a3      	ldrh	r3, [r4, #12]
 80008ca:	bf15      	itete	ne
 80008cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008d6:	81a3      	strheq	r3, [r4, #12]
 80008d8:	bf18      	it	ne
 80008da:	81a3      	strhne	r3, [r4, #12]
 80008dc:	bd10      	pop	{r4, pc}

080008de <__sclose>:
 80008de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e2:	f000 b809 	b.w	80008f8 <_close_r>

080008e6 <memset>:
 80008e6:	4402      	add	r2, r0
 80008e8:	4603      	mov	r3, r0
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d100      	bne.n	80008f0 <memset+0xa>
 80008ee:	4770      	bx	lr
 80008f0:	f803 1b01 	strb.w	r1, [r3], #1
 80008f4:	e7f9      	b.n	80008ea <memset+0x4>
	...

080008f8 <_close_r>:
 80008f8:	b538      	push	{r3, r4, r5, lr}
 80008fa:	2300      	movs	r3, #0
 80008fc:	4d05      	ldr	r5, [pc, #20]	@ (8000914 <_close_r+0x1c>)
 80008fe:	4604      	mov	r4, r0
 8000900:	4608      	mov	r0, r1
 8000902:	602b      	str	r3, [r5, #0]
 8000904:	f7ff fe44 	bl	8000590 <_close>
 8000908:	1c43      	adds	r3, r0, #1
 800090a:	d102      	bne.n	8000912 <_close_r+0x1a>
 800090c:	682b      	ldr	r3, [r5, #0]
 800090e:	b103      	cbz	r3, 8000912 <_close_r+0x1a>
 8000910:	6023      	str	r3, [r4, #0]
 8000912:	bd38      	pop	{r3, r4, r5, pc}
 8000914:	200001b8 	.word	0x200001b8

08000918 <_lseek_r>:
 8000918:	b538      	push	{r3, r4, r5, lr}
 800091a:	4604      	mov	r4, r0
 800091c:	4d06      	ldr	r5, [pc, #24]	@ (8000938 <_lseek_r+0x20>)
 800091e:	4608      	mov	r0, r1
 8000920:	4611      	mov	r1, r2
 8000922:	2200      	movs	r2, #0
 8000924:	602a      	str	r2, [r5, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	f7ff fe59 	bl	80005de <_lseek>
 800092c:	1c43      	adds	r3, r0, #1
 800092e:	d102      	bne.n	8000936 <_lseek_r+0x1e>
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	b103      	cbz	r3, 8000936 <_lseek_r+0x1e>
 8000934:	6023      	str	r3, [r4, #0]
 8000936:	bd38      	pop	{r3, r4, r5, pc}
 8000938:	200001b8 	.word	0x200001b8

0800093c <_read_r>:
 800093c:	b538      	push	{r3, r4, r5, lr}
 800093e:	4604      	mov	r4, r0
 8000940:	4d06      	ldr	r5, [pc, #24]	@ (800095c <_read_r+0x20>)
 8000942:	4608      	mov	r0, r1
 8000944:	4611      	mov	r1, r2
 8000946:	2200      	movs	r2, #0
 8000948:	602a      	str	r2, [r5, #0]
 800094a:	461a      	mov	r2, r3
 800094c:	f7ff fdee 	bl	800052c <_read>
 8000950:	1c43      	adds	r3, r0, #1
 8000952:	d102      	bne.n	800095a <_read_r+0x1e>
 8000954:	682b      	ldr	r3, [r5, #0]
 8000956:	b103      	cbz	r3, 800095a <_read_r+0x1e>
 8000958:	6023      	str	r3, [r4, #0]
 800095a:	bd38      	pop	{r3, r4, r5, pc}
 800095c:	200001b8 	.word	0x200001b8

08000960 <_write_r>:
 8000960:	b538      	push	{r3, r4, r5, lr}
 8000962:	4604      	mov	r4, r0
 8000964:	4d06      	ldr	r5, [pc, #24]	@ (8000980 <_write_r+0x20>)
 8000966:	4608      	mov	r0, r1
 8000968:	4611      	mov	r1, r2
 800096a:	2200      	movs	r2, #0
 800096c:	602a      	str	r2, [r5, #0]
 800096e:	461a      	mov	r2, r3
 8000970:	f7ff fdc0 	bl	80004f4 <_write>
 8000974:	1c43      	adds	r3, r0, #1
 8000976:	d102      	bne.n	800097e <_write_r+0x1e>
 8000978:	682b      	ldr	r3, [r5, #0]
 800097a:	b103      	cbz	r3, 800097e <_write_r+0x1e>
 800097c:	6023      	str	r3, [r4, #0]
 800097e:	bd38      	pop	{r3, r4, r5, pc}
 8000980:	200001b8 	.word	0x200001b8

08000984 <__errno>:
 8000984:	4b01      	ldr	r3, [pc, #4]	@ (800098c <__errno+0x8>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	2000000c 	.word	0x2000000c

08000990 <__libc_init_array>:
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	4d0d      	ldr	r5, [pc, #52]	@ (80009c8 <__libc_init_array+0x38>)
 8000994:	2600      	movs	r6, #0
 8000996:	4c0d      	ldr	r4, [pc, #52]	@ (80009cc <__libc_init_array+0x3c>)
 8000998:	1b64      	subs	r4, r4, r5
 800099a:	10a4      	asrs	r4, r4, #2
 800099c:	42a6      	cmp	r6, r4
 800099e:	d109      	bne.n	80009b4 <__libc_init_array+0x24>
 80009a0:	4d0b      	ldr	r5, [pc, #44]	@ (80009d0 <__libc_init_array+0x40>)
 80009a2:	2600      	movs	r6, #0
 80009a4:	4c0b      	ldr	r4, [pc, #44]	@ (80009d4 <__libc_init_array+0x44>)
 80009a6:	f000 fdc9 	bl	800153c <_init>
 80009aa:	1b64      	subs	r4, r4, r5
 80009ac:	10a4      	asrs	r4, r4, #2
 80009ae:	42a6      	cmp	r6, r4
 80009b0:	d105      	bne.n	80009be <__libc_init_array+0x2e>
 80009b2:	bd70      	pop	{r4, r5, r6, pc}
 80009b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b8:	3601      	adds	r6, #1
 80009ba:	4798      	blx	r3
 80009bc:	e7ee      	b.n	800099c <__libc_init_array+0xc>
 80009be:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c2:	3601      	adds	r6, #1
 80009c4:	4798      	blx	r3
 80009c6:	e7f2      	b.n	80009ae <__libc_init_array+0x1e>
 80009c8:	08001a00 	.word	0x08001a00
 80009cc:	08001a00 	.word	0x08001a00
 80009d0:	08001a00 	.word	0x08001a00
 80009d4:	08001a04 	.word	0x08001a04

080009d8 <__retarget_lock_init_recursive>:
 80009d8:	4770      	bx	lr

080009da <__retarget_lock_acquire_recursive>:
 80009da:	4770      	bx	lr

080009dc <__retarget_lock_release_recursive>:
 80009dc:	4770      	bx	lr
	...

080009e0 <_free_r>:
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4605      	mov	r5, r0
 80009e4:	2900      	cmp	r1, #0
 80009e6:	d041      	beq.n	8000a6c <_free_r+0x8c>
 80009e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009ec:	1f0c      	subs	r4, r1, #4
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	bfb8      	it	lt
 80009f2:	18e4      	addlt	r4, r4, r3
 80009f4:	f000 f8e0 	bl	8000bb8 <__malloc_lock>
 80009f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a70 <_free_r+0x90>)
 80009fa:	6813      	ldr	r3, [r2, #0]
 80009fc:	b933      	cbnz	r3, 8000a0c <_free_r+0x2c>
 80009fe:	6063      	str	r3, [r4, #4]
 8000a00:	6014      	str	r4, [r2, #0]
 8000a02:	4628      	mov	r0, r5
 8000a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a08:	f000 b8dc 	b.w	8000bc4 <__malloc_unlock>
 8000a0c:	42a3      	cmp	r3, r4
 8000a0e:	d908      	bls.n	8000a22 <_free_r+0x42>
 8000a10:	6820      	ldr	r0, [r4, #0]
 8000a12:	1821      	adds	r1, r4, r0
 8000a14:	428b      	cmp	r3, r1
 8000a16:	bf01      	itttt	eq
 8000a18:	6819      	ldreq	r1, [r3, #0]
 8000a1a:	685b      	ldreq	r3, [r3, #4]
 8000a1c:	1809      	addeq	r1, r1, r0
 8000a1e:	6021      	streq	r1, [r4, #0]
 8000a20:	e7ed      	b.n	80009fe <_free_r+0x1e>
 8000a22:	461a      	mov	r2, r3
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	b10b      	cbz	r3, 8000a2c <_free_r+0x4c>
 8000a28:	42a3      	cmp	r3, r4
 8000a2a:	d9fa      	bls.n	8000a22 <_free_r+0x42>
 8000a2c:	6811      	ldr	r1, [r2, #0]
 8000a2e:	1850      	adds	r0, r2, r1
 8000a30:	42a0      	cmp	r0, r4
 8000a32:	d10b      	bne.n	8000a4c <_free_r+0x6c>
 8000a34:	6820      	ldr	r0, [r4, #0]
 8000a36:	4401      	add	r1, r0
 8000a38:	1850      	adds	r0, r2, r1
 8000a3a:	6011      	str	r1, [r2, #0]
 8000a3c:	4283      	cmp	r3, r0
 8000a3e:	d1e0      	bne.n	8000a02 <_free_r+0x22>
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	4408      	add	r0, r1
 8000a46:	6053      	str	r3, [r2, #4]
 8000a48:	6010      	str	r0, [r2, #0]
 8000a4a:	e7da      	b.n	8000a02 <_free_r+0x22>
 8000a4c:	d902      	bls.n	8000a54 <_free_r+0x74>
 8000a4e:	230c      	movs	r3, #12
 8000a50:	602b      	str	r3, [r5, #0]
 8000a52:	e7d6      	b.n	8000a02 <_free_r+0x22>
 8000a54:	6820      	ldr	r0, [r4, #0]
 8000a56:	1821      	adds	r1, r4, r0
 8000a58:	428b      	cmp	r3, r1
 8000a5a:	bf02      	ittt	eq
 8000a5c:	6819      	ldreq	r1, [r3, #0]
 8000a5e:	685b      	ldreq	r3, [r3, #4]
 8000a60:	1809      	addeq	r1, r1, r0
 8000a62:	6063      	str	r3, [r4, #4]
 8000a64:	bf08      	it	eq
 8000a66:	6021      	streq	r1, [r4, #0]
 8000a68:	6054      	str	r4, [r2, #4]
 8000a6a:	e7ca      	b.n	8000a02 <_free_r+0x22>
 8000a6c:	bd38      	pop	{r3, r4, r5, pc}
 8000a6e:	bf00      	nop
 8000a70:	200001c4 	.word	0x200001c4

08000a74 <sbrk_aligned>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	4e0f      	ldr	r6, [pc, #60]	@ (8000ab4 <sbrk_aligned+0x40>)
 8000a78:	460c      	mov	r4, r1
 8000a7a:	4605      	mov	r5, r0
 8000a7c:	6831      	ldr	r1, [r6, #0]
 8000a7e:	b911      	cbnz	r1, 8000a86 <sbrk_aligned+0x12>
 8000a80:	f000 fcba 	bl	80013f8 <_sbrk_r>
 8000a84:	6030      	str	r0, [r6, #0]
 8000a86:	4621      	mov	r1, r4
 8000a88:	4628      	mov	r0, r5
 8000a8a:	f000 fcb5 	bl	80013f8 <_sbrk_r>
 8000a8e:	1c43      	adds	r3, r0, #1
 8000a90:	d103      	bne.n	8000a9a <sbrk_aligned+0x26>
 8000a92:	f04f 34ff 	mov.w	r4, #4294967295
 8000a96:	4620      	mov	r0, r4
 8000a98:	bd70      	pop	{r4, r5, r6, pc}
 8000a9a:	1cc4      	adds	r4, r0, #3
 8000a9c:	f024 0403 	bic.w	r4, r4, #3
 8000aa0:	42a0      	cmp	r0, r4
 8000aa2:	d0f8      	beq.n	8000a96 <sbrk_aligned+0x22>
 8000aa4:	1a21      	subs	r1, r4, r0
 8000aa6:	4628      	mov	r0, r5
 8000aa8:	f000 fca6 	bl	80013f8 <_sbrk_r>
 8000aac:	3001      	adds	r0, #1
 8000aae:	d1f2      	bne.n	8000a96 <sbrk_aligned+0x22>
 8000ab0:	e7ef      	b.n	8000a92 <sbrk_aligned+0x1e>
 8000ab2:	bf00      	nop
 8000ab4:	200001c0 	.word	0x200001c0

08000ab8 <_malloc_r>:
 8000ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000abc:	1ccd      	adds	r5, r1, #3
 8000abe:	4606      	mov	r6, r0
 8000ac0:	f025 0503 	bic.w	r5, r5, #3
 8000ac4:	3508      	adds	r5, #8
 8000ac6:	2d0c      	cmp	r5, #12
 8000ac8:	bf38      	it	cc
 8000aca:	250c      	movcc	r5, #12
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	db01      	blt.n	8000ad4 <_malloc_r+0x1c>
 8000ad0:	42a9      	cmp	r1, r5
 8000ad2:	d904      	bls.n	8000ade <_malloc_r+0x26>
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	6033      	str	r3, [r6, #0]
 8000ad8:	2000      	movs	r0, #0
 8000ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ade:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bb4 <_malloc_r+0xfc>
 8000ae2:	f000 f869 	bl	8000bb8 <__malloc_lock>
 8000ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8000aea:	461c      	mov	r4, r3
 8000aec:	bb44      	cbnz	r4, 8000b40 <_malloc_r+0x88>
 8000aee:	4629      	mov	r1, r5
 8000af0:	4630      	mov	r0, r6
 8000af2:	f7ff ffbf 	bl	8000a74 <sbrk_aligned>
 8000af6:	1c43      	adds	r3, r0, #1
 8000af8:	4604      	mov	r4, r0
 8000afa:	d158      	bne.n	8000bae <_malloc_r+0xf6>
 8000afc:	f8d8 4000 	ldr.w	r4, [r8]
 8000b00:	4627      	mov	r7, r4
 8000b02:	2f00      	cmp	r7, #0
 8000b04:	d143      	bne.n	8000b8e <_malloc_r+0xd6>
 8000b06:	2c00      	cmp	r4, #0
 8000b08:	d04b      	beq.n	8000ba2 <_malloc_r+0xea>
 8000b0a:	6823      	ldr	r3, [r4, #0]
 8000b0c:	4639      	mov	r1, r7
 8000b0e:	4630      	mov	r0, r6
 8000b10:	eb04 0903 	add.w	r9, r4, r3
 8000b14:	f000 fc70 	bl	80013f8 <_sbrk_r>
 8000b18:	4581      	cmp	r9, r0
 8000b1a:	d142      	bne.n	8000ba2 <_malloc_r+0xea>
 8000b1c:	6821      	ldr	r1, [r4, #0]
 8000b1e:	4630      	mov	r0, r6
 8000b20:	1a6d      	subs	r5, r5, r1
 8000b22:	4629      	mov	r1, r5
 8000b24:	f7ff ffa6 	bl	8000a74 <sbrk_aligned>
 8000b28:	3001      	adds	r0, #1
 8000b2a:	d03a      	beq.n	8000ba2 <_malloc_r+0xea>
 8000b2c:	6823      	ldr	r3, [r4, #0]
 8000b2e:	442b      	add	r3, r5
 8000b30:	6023      	str	r3, [r4, #0]
 8000b32:	f8d8 3000 	ldr.w	r3, [r8]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	bb62      	cbnz	r2, 8000b94 <_malloc_r+0xdc>
 8000b3a:	f8c8 7000 	str.w	r7, [r8]
 8000b3e:	e00f      	b.n	8000b60 <_malloc_r+0xa8>
 8000b40:	6822      	ldr	r2, [r4, #0]
 8000b42:	1b52      	subs	r2, r2, r5
 8000b44:	d420      	bmi.n	8000b88 <_malloc_r+0xd0>
 8000b46:	2a0b      	cmp	r2, #11
 8000b48:	d917      	bls.n	8000b7a <_malloc_r+0xc2>
 8000b4a:	1961      	adds	r1, r4, r5
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	6025      	str	r5, [r4, #0]
 8000b50:	bf18      	it	ne
 8000b52:	6059      	strne	r1, [r3, #4]
 8000b54:	6863      	ldr	r3, [r4, #4]
 8000b56:	bf08      	it	eq
 8000b58:	f8c8 1000 	streq.w	r1, [r8]
 8000b5c:	5162      	str	r2, [r4, r5]
 8000b5e:	604b      	str	r3, [r1, #4]
 8000b60:	4630      	mov	r0, r6
 8000b62:	f000 f82f 	bl	8000bc4 <__malloc_unlock>
 8000b66:	f104 000b 	add.w	r0, r4, #11
 8000b6a:	1d23      	adds	r3, r4, #4
 8000b6c:	f020 0007 	bic.w	r0, r0, #7
 8000b70:	1ac2      	subs	r2, r0, r3
 8000b72:	bf1c      	itt	ne
 8000b74:	1a1b      	subne	r3, r3, r0
 8000b76:	50a3      	strne	r3, [r4, r2]
 8000b78:	e7af      	b.n	8000ada <_malloc_r+0x22>
 8000b7a:	6862      	ldr	r2, [r4, #4]
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	bf0c      	ite	eq
 8000b80:	f8c8 2000 	streq.w	r2, [r8]
 8000b84:	605a      	strne	r2, [r3, #4]
 8000b86:	e7eb      	b.n	8000b60 <_malloc_r+0xa8>
 8000b88:	4623      	mov	r3, r4
 8000b8a:	6864      	ldr	r4, [r4, #4]
 8000b8c:	e7ae      	b.n	8000aec <_malloc_r+0x34>
 8000b8e:	463c      	mov	r4, r7
 8000b90:	687f      	ldr	r7, [r7, #4]
 8000b92:	e7b6      	b.n	8000b02 <_malloc_r+0x4a>
 8000b94:	461a      	mov	r2, r3
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	42a3      	cmp	r3, r4
 8000b9a:	d1fb      	bne.n	8000b94 <_malloc_r+0xdc>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	6053      	str	r3, [r2, #4]
 8000ba0:	e7de      	b.n	8000b60 <_malloc_r+0xa8>
 8000ba2:	230c      	movs	r3, #12
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	6033      	str	r3, [r6, #0]
 8000ba8:	f000 f80c 	bl	8000bc4 <__malloc_unlock>
 8000bac:	e794      	b.n	8000ad8 <_malloc_r+0x20>
 8000bae:	6005      	str	r5, [r0, #0]
 8000bb0:	e7d6      	b.n	8000b60 <_malloc_r+0xa8>
 8000bb2:	bf00      	nop
 8000bb4:	200001c4 	.word	0x200001c4

08000bb8 <__malloc_lock>:
 8000bb8:	4801      	ldr	r0, [pc, #4]	@ (8000bc0 <__malloc_lock+0x8>)
 8000bba:	f7ff bf0e 	b.w	80009da <__retarget_lock_acquire_recursive>
 8000bbe:	bf00      	nop
 8000bc0:	200001bc 	.word	0x200001bc

08000bc4 <__malloc_unlock>:
 8000bc4:	4801      	ldr	r0, [pc, #4]	@ (8000bcc <__malloc_unlock+0x8>)
 8000bc6:	f7ff bf09 	b.w	80009dc <__retarget_lock_release_recursive>
 8000bca:	bf00      	nop
 8000bcc:	200001bc 	.word	0x200001bc

08000bd0 <__sfputc_r>:
 8000bd0:	6893      	ldr	r3, [r2, #8]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	6093      	str	r3, [r2, #8]
 8000bd8:	b410      	push	{r4}
 8000bda:	da08      	bge.n	8000bee <__sfputc_r+0x1e>
 8000bdc:	6994      	ldr	r4, [r2, #24]
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	db01      	blt.n	8000be6 <__sfputc_r+0x16>
 8000be2:	290a      	cmp	r1, #10
 8000be4:	d103      	bne.n	8000bee <__sfputc_r+0x1e>
 8000be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bea:	f000 bb71 	b.w	80012d0 <__swbuf_r>
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	1c58      	adds	r0, r3, #1
 8000bf2:	6010      	str	r0, [r2, #0]
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	7019      	strb	r1, [r3, #0]
 8000bf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <__sfputs_r>:
 8000bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c00:	4606      	mov	r6, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	4614      	mov	r4, r2
 8000c06:	18d5      	adds	r5, r2, r3
 8000c08:	42ac      	cmp	r4, r5
 8000c0a:	d101      	bne.n	8000c10 <__sfputs_r+0x12>
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	e007      	b.n	8000c20 <__sfputs_r+0x22>
 8000c10:	463a      	mov	r2, r7
 8000c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c16:	4630      	mov	r0, r6
 8000c18:	f7ff ffda 	bl	8000bd0 <__sfputc_r>
 8000c1c:	1c43      	adds	r3, r0, #1
 8000c1e:	d1f3      	bne.n	8000c08 <__sfputs_r+0xa>
 8000c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c24 <_vfiprintf_r>:
 8000c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c28:	460d      	mov	r5, r1
 8000c2a:	b09d      	sub	sp, #116	@ 0x74
 8000c2c:	4614      	mov	r4, r2
 8000c2e:	4698      	mov	r8, r3
 8000c30:	4606      	mov	r6, r0
 8000c32:	b118      	cbz	r0, 8000c3c <_vfiprintf_r+0x18>
 8000c34:	6a03      	ldr	r3, [r0, #32]
 8000c36:	b90b      	cbnz	r3, 8000c3c <_vfiprintf_r+0x18>
 8000c38:	f7ff fdca 	bl	80007d0 <__sinit>
 8000c3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c3e:	07d9      	lsls	r1, r3, #31
 8000c40:	d405      	bmi.n	8000c4e <_vfiprintf_r+0x2a>
 8000c42:	89ab      	ldrh	r3, [r5, #12]
 8000c44:	059a      	lsls	r2, r3, #22
 8000c46:	d402      	bmi.n	8000c4e <_vfiprintf_r+0x2a>
 8000c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c4a:	f7ff fec6 	bl	80009da <__retarget_lock_acquire_recursive>
 8000c4e:	89ab      	ldrh	r3, [r5, #12]
 8000c50:	071b      	lsls	r3, r3, #28
 8000c52:	d501      	bpl.n	8000c58 <_vfiprintf_r+0x34>
 8000c54:	692b      	ldr	r3, [r5, #16]
 8000c56:	b99b      	cbnz	r3, 8000c80 <_vfiprintf_r+0x5c>
 8000c58:	4629      	mov	r1, r5
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	f000 fb76 	bl	800134c <__swsetup_r>
 8000c60:	b170      	cbz	r0, 8000c80 <_vfiprintf_r+0x5c>
 8000c62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c64:	07dc      	lsls	r4, r3, #31
 8000c66:	d504      	bpl.n	8000c72 <_vfiprintf_r+0x4e>
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	b01d      	add	sp, #116	@ 0x74
 8000c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c72:	89ab      	ldrh	r3, [r5, #12]
 8000c74:	0598      	lsls	r0, r3, #22
 8000c76:	d4f7      	bmi.n	8000c68 <_vfiprintf_r+0x44>
 8000c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c7a:	f7ff feaf 	bl	80009dc <__retarget_lock_release_recursive>
 8000c7e:	e7f3      	b.n	8000c68 <_vfiprintf_r+0x44>
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c86:	f04f 0901 	mov.w	r9, #1
 8000c8a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8000e40 <_vfiprintf_r+0x21c>
 8000c8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c90:	2320      	movs	r3, #32
 8000c92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c96:	2330      	movs	r3, #48	@ 0x30
 8000c98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c9c:	4623      	mov	r3, r4
 8000c9e:	469a      	mov	sl, r3
 8000ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ca4:	b10a      	cbz	r2, 8000caa <_vfiprintf_r+0x86>
 8000ca6:	2a25      	cmp	r2, #37	@ 0x25
 8000ca8:	d1f9      	bne.n	8000c9e <_vfiprintf_r+0x7a>
 8000caa:	ebba 0b04 	subs.w	fp, sl, r4
 8000cae:	d00b      	beq.n	8000cc8 <_vfiprintf_r+0xa4>
 8000cb0:	465b      	mov	r3, fp
 8000cb2:	4622      	mov	r2, r4
 8000cb4:	4629      	mov	r1, r5
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	f7ff ffa1 	bl	8000bfe <__sfputs_r>
 8000cbc:	3001      	adds	r0, #1
 8000cbe:	f000 80a7 	beq.w	8000e10 <_vfiprintf_r+0x1ec>
 8000cc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cc4:	445a      	add	r2, fp
 8000cc6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f000 809f 	beq.w	8000e10 <_vfiprintf_r+0x1ec>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	f10a 0a01 	add.w	sl, sl, #1
 8000cdc:	9304      	str	r3, [sp, #16]
 8000cde:	9307      	str	r3, [sp, #28]
 8000ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8000ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cea:	4654      	mov	r4, sl
 8000cec:	2205      	movs	r2, #5
 8000cee:	4854      	ldr	r0, [pc, #336]	@ (8000e40 <_vfiprintf_r+0x21c>)
 8000cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf4:	f000 fb90 	bl	8001418 <memchr>
 8000cf8:	9a04      	ldr	r2, [sp, #16]
 8000cfa:	b9d8      	cbnz	r0, 8000d34 <_vfiprintf_r+0x110>
 8000cfc:	06d1      	lsls	r1, r2, #27
 8000cfe:	bf44      	itt	mi
 8000d00:	2320      	movmi	r3, #32
 8000d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d06:	0713      	lsls	r3, r2, #28
 8000d08:	bf44      	itt	mi
 8000d0a:	232b      	movmi	r3, #43	@ 0x2b
 8000d0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d10:	f89a 3000 	ldrb.w	r3, [sl]
 8000d14:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d16:	d015      	beq.n	8000d44 <_vfiprintf_r+0x120>
 8000d18:	9a07      	ldr	r2, [sp, #28]
 8000d1a:	4654      	mov	r4, sl
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f04f 0c0a 	mov.w	ip, #10
 8000d22:	4621      	mov	r1, r4
 8000d24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d28:	3b30      	subs	r3, #48	@ 0x30
 8000d2a:	2b09      	cmp	r3, #9
 8000d2c:	d94b      	bls.n	8000dc6 <_vfiprintf_r+0x1a2>
 8000d2e:	b1b0      	cbz	r0, 8000d5e <_vfiprintf_r+0x13a>
 8000d30:	9207      	str	r2, [sp, #28]
 8000d32:	e014      	b.n	8000d5e <_vfiprintf_r+0x13a>
 8000d34:	eba0 0308 	sub.w	r3, r0, r8
 8000d38:	46a2      	mov	sl, r4
 8000d3a:	fa09 f303 	lsl.w	r3, r9, r3
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	9304      	str	r3, [sp, #16]
 8000d42:	e7d2      	b.n	8000cea <_vfiprintf_r+0xc6>
 8000d44:	9b03      	ldr	r3, [sp, #12]
 8000d46:	1d19      	adds	r1, r3, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	9103      	str	r1, [sp, #12]
 8000d4e:	bfbb      	ittet	lt
 8000d50:	425b      	neglt	r3, r3
 8000d52:	f042 0202 	orrlt.w	r2, r2, #2
 8000d56:	9307      	strge	r3, [sp, #28]
 8000d58:	9307      	strlt	r3, [sp, #28]
 8000d5a:	bfb8      	it	lt
 8000d5c:	9204      	strlt	r2, [sp, #16]
 8000d5e:	7823      	ldrb	r3, [r4, #0]
 8000d60:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d62:	d10a      	bne.n	8000d7a <_vfiprintf_r+0x156>
 8000d64:	7863      	ldrb	r3, [r4, #1]
 8000d66:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d68:	d132      	bne.n	8000dd0 <_vfiprintf_r+0x1ac>
 8000d6a:	9b03      	ldr	r3, [sp, #12]
 8000d6c:	3402      	adds	r4, #2
 8000d6e:	1d1a      	adds	r2, r3, #4
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d76:	9203      	str	r2, [sp, #12]
 8000d78:	9305      	str	r3, [sp, #20]
 8000d7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e50 <_vfiprintf_r+0x22c>
 8000d7e:	2203      	movs	r2, #3
 8000d80:	7821      	ldrb	r1, [r4, #0]
 8000d82:	4650      	mov	r0, sl
 8000d84:	f000 fb48 	bl	8001418 <memchr>
 8000d88:	b138      	cbz	r0, 8000d9a <_vfiprintf_r+0x176>
 8000d8a:	eba0 000a 	sub.w	r0, r0, sl
 8000d8e:	2240      	movs	r2, #64	@ 0x40
 8000d90:	9b04      	ldr	r3, [sp, #16]
 8000d92:	3401      	adds	r4, #1
 8000d94:	4082      	lsls	r2, r0
 8000d96:	4313      	orrs	r3, r2
 8000d98:	9304      	str	r3, [sp, #16]
 8000d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d9e:	2206      	movs	r2, #6
 8000da0:	4828      	ldr	r0, [pc, #160]	@ (8000e44 <_vfiprintf_r+0x220>)
 8000da2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000da6:	f000 fb37 	bl	8001418 <memchr>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d03f      	beq.n	8000e2e <_vfiprintf_r+0x20a>
 8000dae:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <_vfiprintf_r+0x224>)
 8000db0:	bb1b      	cbnz	r3, 8000dfa <_vfiprintf_r+0x1d6>
 8000db2:	9b03      	ldr	r3, [sp, #12]
 8000db4:	3307      	adds	r3, #7
 8000db6:	f023 0307 	bic.w	r3, r3, #7
 8000dba:	3308      	adds	r3, #8
 8000dbc:	9303      	str	r3, [sp, #12]
 8000dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000dc0:	443b      	add	r3, r7
 8000dc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dc4:	e76a      	b.n	8000c9c <_vfiprintf_r+0x78>
 8000dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dca:	460c      	mov	r4, r1
 8000dcc:	2001      	movs	r0, #1
 8000dce:	e7a8      	b.n	8000d22 <_vfiprintf_r+0xfe>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	3401      	adds	r4, #1
 8000dd4:	f04f 0c0a 	mov.w	ip, #10
 8000dd8:	4619      	mov	r1, r3
 8000dda:	9305      	str	r3, [sp, #20]
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000de2:	3a30      	subs	r2, #48	@ 0x30
 8000de4:	2a09      	cmp	r2, #9
 8000de6:	d903      	bls.n	8000df0 <_vfiprintf_r+0x1cc>
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0c6      	beq.n	8000d7a <_vfiprintf_r+0x156>
 8000dec:	9105      	str	r1, [sp, #20]
 8000dee:	e7c4      	b.n	8000d7a <_vfiprintf_r+0x156>
 8000df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000df4:	4604      	mov	r4, r0
 8000df6:	2301      	movs	r3, #1
 8000df8:	e7f0      	b.n	8000ddc <_vfiprintf_r+0x1b8>
 8000dfa:	ab03      	add	r3, sp, #12
 8000dfc:	462a      	mov	r2, r5
 8000dfe:	a904      	add	r1, sp, #16
 8000e00:	4630      	mov	r0, r6
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <_vfiprintf_r+0x228>)
 8000e06:	f3af 8000 	nop.w
 8000e0a:	4607      	mov	r7, r0
 8000e0c:	1c78      	adds	r0, r7, #1
 8000e0e:	d1d6      	bne.n	8000dbe <_vfiprintf_r+0x19a>
 8000e10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e12:	07d9      	lsls	r1, r3, #31
 8000e14:	d405      	bmi.n	8000e22 <_vfiprintf_r+0x1fe>
 8000e16:	89ab      	ldrh	r3, [r5, #12]
 8000e18:	059a      	lsls	r2, r3, #22
 8000e1a:	d402      	bmi.n	8000e22 <_vfiprintf_r+0x1fe>
 8000e1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e1e:	f7ff fddd 	bl	80009dc <__retarget_lock_release_recursive>
 8000e22:	89ab      	ldrh	r3, [r5, #12]
 8000e24:	065b      	lsls	r3, r3, #25
 8000e26:	f53f af1f 	bmi.w	8000c68 <_vfiprintf_r+0x44>
 8000e2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e2c:	e71e      	b.n	8000c6c <_vfiprintf_r+0x48>
 8000e2e:	ab03      	add	r3, sp, #12
 8000e30:	462a      	mov	r2, r5
 8000e32:	a904      	add	r1, sp, #16
 8000e34:	4630      	mov	r0, r6
 8000e36:	9300      	str	r3, [sp, #0]
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <_vfiprintf_r+0x228>)
 8000e3a:	f000 f87d 	bl	8000f38 <_printf_i>
 8000e3e:	e7e4      	b.n	8000e0a <_vfiprintf_r+0x1e6>
 8000e40:	080019cc 	.word	0x080019cc
 8000e44:	080019d6 	.word	0x080019d6
 8000e48:	00000000 	.word	0x00000000
 8000e4c:	08000bff 	.word	0x08000bff
 8000e50:	080019d2 	.word	0x080019d2

08000e54 <_printf_common>:
 8000e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e58:	4616      	mov	r6, r2
 8000e5a:	4698      	mov	r8, r3
 8000e5c:	688a      	ldr	r2, [r1, #8]
 8000e5e:	4607      	mov	r7, r0
 8000e60:	690b      	ldr	r3, [r1, #16]
 8000e62:	460c      	mov	r4, r1
 8000e64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	bfb8      	it	lt
 8000e6c:	4613      	movlt	r3, r2
 8000e6e:	6033      	str	r3, [r6, #0]
 8000e70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e74:	b10a      	cbz	r2, 8000e7a <_printf_common+0x26>
 8000e76:	3301      	adds	r3, #1
 8000e78:	6033      	str	r3, [r6, #0]
 8000e7a:	6823      	ldr	r3, [r4, #0]
 8000e7c:	0699      	lsls	r1, r3, #26
 8000e7e:	bf42      	ittt	mi
 8000e80:	6833      	ldrmi	r3, [r6, #0]
 8000e82:	3302      	addmi	r3, #2
 8000e84:	6033      	strmi	r3, [r6, #0]
 8000e86:	6825      	ldr	r5, [r4, #0]
 8000e88:	f015 0506 	ands.w	r5, r5, #6
 8000e8c:	d106      	bne.n	8000e9c <_printf_common+0x48>
 8000e8e:	f104 0a19 	add.w	sl, r4, #25
 8000e92:	68e3      	ldr	r3, [r4, #12]
 8000e94:	6832      	ldr	r2, [r6, #0]
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	dc2b      	bgt.n	8000ef4 <_printf_common+0xa0>
 8000e9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ea0:	6822      	ldr	r2, [r4, #0]
 8000ea2:	3b00      	subs	r3, #0
 8000ea4:	bf18      	it	ne
 8000ea6:	2301      	movne	r3, #1
 8000ea8:	0692      	lsls	r2, r2, #26
 8000eaa:	d430      	bmi.n	8000f0e <_printf_common+0xba>
 8000eac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000eb0:	4641      	mov	r1, r8
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	47c8      	blx	r9
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	d023      	beq.n	8000f02 <_printf_common+0xae>
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	341a      	adds	r4, #26
 8000ebe:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8000ec2:	f003 0306 	and.w	r3, r3, #6
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf0a      	itet	eq
 8000eca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8000ece:	2500      	movne	r5, #0
 8000ed0:	6833      	ldreq	r3, [r6, #0]
 8000ed2:	f04f 0600 	mov.w	r6, #0
 8000ed6:	bf08      	it	eq
 8000ed8:	1aed      	subeq	r5, r5, r3
 8000eda:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000ede:	bf08      	it	eq
 8000ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	bfc4      	itt	gt
 8000ee8:	1a9b      	subgt	r3, r3, r2
 8000eea:	18ed      	addgt	r5, r5, r3
 8000eec:	42b5      	cmp	r5, r6
 8000eee:	d11a      	bne.n	8000f26 <_printf_common+0xd2>
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	e008      	b.n	8000f06 <_printf_common+0xb2>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	4641      	mov	r1, r8
 8000efa:	4638      	mov	r0, r7
 8000efc:	47c8      	blx	r9
 8000efe:	3001      	adds	r0, #1
 8000f00:	d103      	bne.n	8000f0a <_printf_common+0xb6>
 8000f02:	f04f 30ff 	mov.w	r0, #4294967295
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	3501      	adds	r5, #1
 8000f0c:	e7c1      	b.n	8000e92 <_printf_common+0x3e>
 8000f0e:	18e1      	adds	r1, r4, r3
 8000f10:	1c5a      	adds	r2, r3, #1
 8000f12:	2030      	movs	r0, #48	@ 0x30
 8000f14:	3302      	adds	r3, #2
 8000f16:	4422      	add	r2, r4
 8000f18:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f24:	e7c2      	b.n	8000eac <_printf_common+0x58>
 8000f26:	2301      	movs	r3, #1
 8000f28:	4622      	mov	r2, r4
 8000f2a:	4641      	mov	r1, r8
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	47c8      	blx	r9
 8000f30:	3001      	adds	r0, #1
 8000f32:	d0e6      	beq.n	8000f02 <_printf_common+0xae>
 8000f34:	3601      	adds	r6, #1
 8000f36:	e7d9      	b.n	8000eec <_printf_common+0x98>

08000f38 <_printf_i>:
 8000f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f3c:	7e0f      	ldrb	r7, [r1, #24]
 8000f3e:	4691      	mov	r9, r2
 8000f40:	4680      	mov	r8, r0
 8000f42:	460c      	mov	r4, r1
 8000f44:	2f78      	cmp	r7, #120	@ 0x78
 8000f46:	469a      	mov	sl, r3
 8000f48:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f4e:	d807      	bhi.n	8000f60 <_printf_i+0x28>
 8000f50:	2f62      	cmp	r7, #98	@ 0x62
 8000f52:	d80a      	bhi.n	8000f6a <_printf_i+0x32>
 8000f54:	2f00      	cmp	r7, #0
 8000f56:	f000 80d2 	beq.w	80010fe <_printf_i+0x1c6>
 8000f5a:	2f58      	cmp	r7, #88	@ 0x58
 8000f5c:	f000 80b9 	beq.w	80010d2 <_printf_i+0x19a>
 8000f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f68:	e03a      	b.n	8000fe0 <_printf_i+0xa8>
 8000f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f6e:	2b15      	cmp	r3, #21
 8000f70:	d8f6      	bhi.n	8000f60 <_printf_i+0x28>
 8000f72:	a101      	add	r1, pc, #4	@ (adr r1, 8000f78 <_printf_i+0x40>)
 8000f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f78:	08000fd1 	.word	0x08000fd1
 8000f7c:	08000fe5 	.word	0x08000fe5
 8000f80:	08000f61 	.word	0x08000f61
 8000f84:	08000f61 	.word	0x08000f61
 8000f88:	08000f61 	.word	0x08000f61
 8000f8c:	08000f61 	.word	0x08000f61
 8000f90:	08000fe5 	.word	0x08000fe5
 8000f94:	08000f61 	.word	0x08000f61
 8000f98:	08000f61 	.word	0x08000f61
 8000f9c:	08000f61 	.word	0x08000f61
 8000fa0:	08000f61 	.word	0x08000f61
 8000fa4:	080010e5 	.word	0x080010e5
 8000fa8:	0800100f 	.word	0x0800100f
 8000fac:	0800109f 	.word	0x0800109f
 8000fb0:	08000f61 	.word	0x08000f61
 8000fb4:	08000f61 	.word	0x08000f61
 8000fb8:	08001107 	.word	0x08001107
 8000fbc:	08000f61 	.word	0x08000f61
 8000fc0:	0800100f 	.word	0x0800100f
 8000fc4:	08000f61 	.word	0x08000f61
 8000fc8:	08000f61 	.word	0x08000f61
 8000fcc:	080010a7 	.word	0x080010a7
 8000fd0:	6833      	ldr	r3, [r6, #0]
 8000fd2:	1d1a      	adds	r2, r3, #4
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6032      	str	r2, [r6, #0]
 8000fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e09d      	b.n	8001120 <_printf_i+0x1e8>
 8000fe4:	6833      	ldr	r3, [r6, #0]
 8000fe6:	6820      	ldr	r0, [r4, #0]
 8000fe8:	1d19      	adds	r1, r3, #4
 8000fea:	6031      	str	r1, [r6, #0]
 8000fec:	0606      	lsls	r6, r0, #24
 8000fee:	d501      	bpl.n	8000ff4 <_printf_i+0xbc>
 8000ff0:	681d      	ldr	r5, [r3, #0]
 8000ff2:	e003      	b.n	8000ffc <_printf_i+0xc4>
 8000ff4:	0645      	lsls	r5, r0, #25
 8000ff6:	d5fb      	bpl.n	8000ff0 <_printf_i+0xb8>
 8000ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ffc:	2d00      	cmp	r5, #0
 8000ffe:	da03      	bge.n	8001008 <_printf_i+0xd0>
 8001000:	232d      	movs	r3, #45	@ 0x2d
 8001002:	426d      	negs	r5, r5
 8001004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001008:	4859      	ldr	r0, [pc, #356]	@ (8001170 <_printf_i+0x238>)
 800100a:	230a      	movs	r3, #10
 800100c:	e011      	b.n	8001032 <_printf_i+0xfa>
 800100e:	6821      	ldr	r1, [r4, #0]
 8001010:	6833      	ldr	r3, [r6, #0]
 8001012:	0608      	lsls	r0, r1, #24
 8001014:	f853 5b04 	ldr.w	r5, [r3], #4
 8001018:	d402      	bmi.n	8001020 <_printf_i+0xe8>
 800101a:	0649      	lsls	r1, r1, #25
 800101c:	bf48      	it	mi
 800101e:	b2ad      	uxthmi	r5, r5
 8001020:	2f6f      	cmp	r7, #111	@ 0x6f
 8001022:	6033      	str	r3, [r6, #0]
 8001024:	4852      	ldr	r0, [pc, #328]	@ (8001170 <_printf_i+0x238>)
 8001026:	bf14      	ite	ne
 8001028:	230a      	movne	r3, #10
 800102a:	2308      	moveq	r3, #8
 800102c:	2100      	movs	r1, #0
 800102e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001032:	6866      	ldr	r6, [r4, #4]
 8001034:	2e00      	cmp	r6, #0
 8001036:	60a6      	str	r6, [r4, #8]
 8001038:	bfa2      	ittt	ge
 800103a:	6821      	ldrge	r1, [r4, #0]
 800103c:	f021 0104 	bicge.w	r1, r1, #4
 8001040:	6021      	strge	r1, [r4, #0]
 8001042:	b90d      	cbnz	r5, 8001048 <_printf_i+0x110>
 8001044:	2e00      	cmp	r6, #0
 8001046:	d04b      	beq.n	80010e0 <_printf_i+0x1a8>
 8001048:	4616      	mov	r6, r2
 800104a:	fbb5 f1f3 	udiv	r1, r5, r3
 800104e:	fb03 5711 	mls	r7, r3, r1, r5
 8001052:	5dc7      	ldrb	r7, [r0, r7]
 8001054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001058:	462f      	mov	r7, r5
 800105a:	460d      	mov	r5, r1
 800105c:	42bb      	cmp	r3, r7
 800105e:	d9f4      	bls.n	800104a <_printf_i+0x112>
 8001060:	2b08      	cmp	r3, #8
 8001062:	d10b      	bne.n	800107c <_printf_i+0x144>
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	07df      	lsls	r7, r3, #31
 8001068:	d508      	bpl.n	800107c <_printf_i+0x144>
 800106a:	6923      	ldr	r3, [r4, #16]
 800106c:	6861      	ldr	r1, [r4, #4]
 800106e:	4299      	cmp	r1, r3
 8001070:	bfde      	ittt	le
 8001072:	2330      	movle	r3, #48	@ 0x30
 8001074:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800107c:	1b92      	subs	r2, r2, r6
 800107e:	6122      	str	r2, [r4, #16]
 8001080:	464b      	mov	r3, r9
 8001082:	aa03      	add	r2, sp, #12
 8001084:	4621      	mov	r1, r4
 8001086:	4640      	mov	r0, r8
 8001088:	f8cd a000 	str.w	sl, [sp]
 800108c:	f7ff fee2 	bl	8000e54 <_printf_common>
 8001090:	3001      	adds	r0, #1
 8001092:	d14a      	bne.n	800112a <_printf_i+0x1f2>
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	b004      	add	sp, #16
 800109a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	f043 0320 	orr.w	r3, r3, #32
 80010a4:	6023      	str	r3, [r4, #0]
 80010a6:	2778      	movs	r7, #120	@ 0x78
 80010a8:	4832      	ldr	r0, [pc, #200]	@ (8001174 <_printf_i+0x23c>)
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010b0:	061f      	lsls	r7, r3, #24
 80010b2:	6831      	ldr	r1, [r6, #0]
 80010b4:	f851 5b04 	ldr.w	r5, [r1], #4
 80010b8:	d402      	bmi.n	80010c0 <_printf_i+0x188>
 80010ba:	065f      	lsls	r7, r3, #25
 80010bc:	bf48      	it	mi
 80010be:	b2ad      	uxthmi	r5, r5
 80010c0:	6031      	str	r1, [r6, #0]
 80010c2:	07d9      	lsls	r1, r3, #31
 80010c4:	bf44      	itt	mi
 80010c6:	f043 0320 	orrmi.w	r3, r3, #32
 80010ca:	6023      	strmi	r3, [r4, #0]
 80010cc:	b11d      	cbz	r5, 80010d6 <_printf_i+0x19e>
 80010ce:	2310      	movs	r3, #16
 80010d0:	e7ac      	b.n	800102c <_printf_i+0xf4>
 80010d2:	4827      	ldr	r0, [pc, #156]	@ (8001170 <_printf_i+0x238>)
 80010d4:	e7e9      	b.n	80010aa <_printf_i+0x172>
 80010d6:	6823      	ldr	r3, [r4, #0]
 80010d8:	f023 0320 	bic.w	r3, r3, #32
 80010dc:	6023      	str	r3, [r4, #0]
 80010de:	e7f6      	b.n	80010ce <_printf_i+0x196>
 80010e0:	4616      	mov	r6, r2
 80010e2:	e7bd      	b.n	8001060 <_printf_i+0x128>
 80010e4:	6833      	ldr	r3, [r6, #0]
 80010e6:	6825      	ldr	r5, [r4, #0]
 80010e8:	1d18      	adds	r0, r3, #4
 80010ea:	6961      	ldr	r1, [r4, #20]
 80010ec:	6030      	str	r0, [r6, #0]
 80010ee:	062e      	lsls	r6, r5, #24
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	d501      	bpl.n	80010f8 <_printf_i+0x1c0>
 80010f4:	6019      	str	r1, [r3, #0]
 80010f6:	e002      	b.n	80010fe <_printf_i+0x1c6>
 80010f8:	0668      	lsls	r0, r5, #25
 80010fa:	d5fb      	bpl.n	80010f4 <_printf_i+0x1bc>
 80010fc:	8019      	strh	r1, [r3, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	4616      	mov	r6, r2
 8001102:	6123      	str	r3, [r4, #16]
 8001104:	e7bc      	b.n	8001080 <_printf_i+0x148>
 8001106:	6833      	ldr	r3, [r6, #0]
 8001108:	2100      	movs	r1, #0
 800110a:	1d1a      	adds	r2, r3, #4
 800110c:	6032      	str	r2, [r6, #0]
 800110e:	681e      	ldr	r6, [r3, #0]
 8001110:	6862      	ldr	r2, [r4, #4]
 8001112:	4630      	mov	r0, r6
 8001114:	f000 f980 	bl	8001418 <memchr>
 8001118:	b108      	cbz	r0, 800111e <_printf_i+0x1e6>
 800111a:	1b80      	subs	r0, r0, r6
 800111c:	6060      	str	r0, [r4, #4]
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	6123      	str	r3, [r4, #16]
 8001122:	2300      	movs	r3, #0
 8001124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001128:	e7aa      	b.n	8001080 <_printf_i+0x148>
 800112a:	6923      	ldr	r3, [r4, #16]
 800112c:	4632      	mov	r2, r6
 800112e:	4649      	mov	r1, r9
 8001130:	4640      	mov	r0, r8
 8001132:	47d0      	blx	sl
 8001134:	3001      	adds	r0, #1
 8001136:	d0ad      	beq.n	8001094 <_printf_i+0x15c>
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	079b      	lsls	r3, r3, #30
 800113c:	d413      	bmi.n	8001166 <_printf_i+0x22e>
 800113e:	68e0      	ldr	r0, [r4, #12]
 8001140:	9b03      	ldr	r3, [sp, #12]
 8001142:	4298      	cmp	r0, r3
 8001144:	bfb8      	it	lt
 8001146:	4618      	movlt	r0, r3
 8001148:	e7a6      	b.n	8001098 <_printf_i+0x160>
 800114a:	2301      	movs	r3, #1
 800114c:	4632      	mov	r2, r6
 800114e:	4649      	mov	r1, r9
 8001150:	4640      	mov	r0, r8
 8001152:	47d0      	blx	sl
 8001154:	3001      	adds	r0, #1
 8001156:	d09d      	beq.n	8001094 <_printf_i+0x15c>
 8001158:	3501      	adds	r5, #1
 800115a:	68e3      	ldr	r3, [r4, #12]
 800115c:	9903      	ldr	r1, [sp, #12]
 800115e:	1a5b      	subs	r3, r3, r1
 8001160:	42ab      	cmp	r3, r5
 8001162:	dcf2      	bgt.n	800114a <_printf_i+0x212>
 8001164:	e7eb      	b.n	800113e <_printf_i+0x206>
 8001166:	2500      	movs	r5, #0
 8001168:	f104 0619 	add.w	r6, r4, #25
 800116c:	e7f5      	b.n	800115a <_printf_i+0x222>
 800116e:	bf00      	nop
 8001170:	080019dd 	.word	0x080019dd
 8001174:	080019ee 	.word	0x080019ee

08001178 <__sflush_r>:
 8001178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800117c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001180:	0716      	lsls	r6, r2, #28
 8001182:	4605      	mov	r5, r0
 8001184:	460c      	mov	r4, r1
 8001186:	d454      	bmi.n	8001232 <__sflush_r+0xba>
 8001188:	684b      	ldr	r3, [r1, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	dc02      	bgt.n	8001194 <__sflush_r+0x1c>
 800118e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd48      	ble.n	8001226 <__sflush_r+0xae>
 8001194:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001196:	2e00      	cmp	r6, #0
 8001198:	d045      	beq.n	8001226 <__sflush_r+0xae>
 800119a:	2300      	movs	r3, #0
 800119c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011a0:	682f      	ldr	r7, [r5, #0]
 80011a2:	6a21      	ldr	r1, [r4, #32]
 80011a4:	602b      	str	r3, [r5, #0]
 80011a6:	d030      	beq.n	800120a <__sflush_r+0x92>
 80011a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011aa:	89a3      	ldrh	r3, [r4, #12]
 80011ac:	0759      	lsls	r1, r3, #29
 80011ae:	d505      	bpl.n	80011bc <__sflush_r+0x44>
 80011b0:	6863      	ldr	r3, [r4, #4]
 80011b2:	1ad2      	subs	r2, r2, r3
 80011b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011b6:	b10b      	cbz	r3, 80011bc <__sflush_r+0x44>
 80011b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011ba:	1ad2      	subs	r2, r2, r3
 80011bc:	2300      	movs	r3, #0
 80011be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011c0:	6a21      	ldr	r1, [r4, #32]
 80011c2:	4628      	mov	r0, r5
 80011c4:	47b0      	blx	r6
 80011c6:	1c43      	adds	r3, r0, #1
 80011c8:	89a3      	ldrh	r3, [r4, #12]
 80011ca:	d106      	bne.n	80011da <__sflush_r+0x62>
 80011cc:	6829      	ldr	r1, [r5, #0]
 80011ce:	291d      	cmp	r1, #29
 80011d0:	d82b      	bhi.n	800122a <__sflush_r+0xb2>
 80011d2:	4a2a      	ldr	r2, [pc, #168]	@ (800127c <__sflush_r+0x104>)
 80011d4:	410a      	asrs	r2, r1
 80011d6:	07d6      	lsls	r6, r2, #31
 80011d8:	d427      	bmi.n	800122a <__sflush_r+0xb2>
 80011da:	2200      	movs	r2, #0
 80011dc:	04d9      	lsls	r1, r3, #19
 80011de:	6062      	str	r2, [r4, #4]
 80011e0:	6922      	ldr	r2, [r4, #16]
 80011e2:	6022      	str	r2, [r4, #0]
 80011e4:	d504      	bpl.n	80011f0 <__sflush_r+0x78>
 80011e6:	1c42      	adds	r2, r0, #1
 80011e8:	d101      	bne.n	80011ee <__sflush_r+0x76>
 80011ea:	682b      	ldr	r3, [r5, #0]
 80011ec:	b903      	cbnz	r3, 80011f0 <__sflush_r+0x78>
 80011ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80011f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011f2:	602f      	str	r7, [r5, #0]
 80011f4:	b1b9      	cbz	r1, 8001226 <__sflush_r+0xae>
 80011f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011fa:	4299      	cmp	r1, r3
 80011fc:	d002      	beq.n	8001204 <__sflush_r+0x8c>
 80011fe:	4628      	mov	r0, r5
 8001200:	f7ff fbee 	bl	80009e0 <_free_r>
 8001204:	2300      	movs	r3, #0
 8001206:	6363      	str	r3, [r4, #52]	@ 0x34
 8001208:	e00d      	b.n	8001226 <__sflush_r+0xae>
 800120a:	2301      	movs	r3, #1
 800120c:	4628      	mov	r0, r5
 800120e:	47b0      	blx	r6
 8001210:	4602      	mov	r2, r0
 8001212:	1c50      	adds	r0, r2, #1
 8001214:	d1c9      	bne.n	80011aa <__sflush_r+0x32>
 8001216:	682b      	ldr	r3, [r5, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d0c6      	beq.n	80011aa <__sflush_r+0x32>
 800121c:	2b1d      	cmp	r3, #29
 800121e:	d001      	beq.n	8001224 <__sflush_r+0xac>
 8001220:	2b16      	cmp	r3, #22
 8001222:	d11d      	bne.n	8001260 <__sflush_r+0xe8>
 8001224:	602f      	str	r7, [r5, #0]
 8001226:	2000      	movs	r0, #0
 8001228:	e021      	b.n	800126e <__sflush_r+0xf6>
 800122a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800122e:	b21b      	sxth	r3, r3
 8001230:	e01a      	b.n	8001268 <__sflush_r+0xf0>
 8001232:	690f      	ldr	r7, [r1, #16]
 8001234:	2f00      	cmp	r7, #0
 8001236:	d0f6      	beq.n	8001226 <__sflush_r+0xae>
 8001238:	0793      	lsls	r3, r2, #30
 800123a:	680e      	ldr	r6, [r1, #0]
 800123c:	600f      	str	r7, [r1, #0]
 800123e:	bf0c      	ite	eq
 8001240:	694b      	ldreq	r3, [r1, #20]
 8001242:	2300      	movne	r3, #0
 8001244:	eba6 0807 	sub.w	r8, r6, r7
 8001248:	608b      	str	r3, [r1, #8]
 800124a:	f1b8 0f00 	cmp.w	r8, #0
 800124e:	ddea      	ble.n	8001226 <__sflush_r+0xae>
 8001250:	4643      	mov	r3, r8
 8001252:	463a      	mov	r2, r7
 8001254:	6a21      	ldr	r1, [r4, #32]
 8001256:	4628      	mov	r0, r5
 8001258:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800125a:	47b0      	blx	r6
 800125c:	2800      	cmp	r0, #0
 800125e:	dc08      	bgt.n	8001272 <__sflush_r+0xfa>
 8001260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001264:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	81a3      	strh	r3, [r4, #12]
 800126e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001272:	4407      	add	r7, r0
 8001274:	eba8 0800 	sub.w	r8, r8, r0
 8001278:	e7e7      	b.n	800124a <__sflush_r+0xd2>
 800127a:	bf00      	nop
 800127c:	dfbffffe 	.word	0xdfbffffe

08001280 <_fflush_r>:
 8001280:	b538      	push	{r3, r4, r5, lr}
 8001282:	690b      	ldr	r3, [r1, #16]
 8001284:	4605      	mov	r5, r0
 8001286:	460c      	mov	r4, r1
 8001288:	b913      	cbnz	r3, 8001290 <_fflush_r+0x10>
 800128a:	2500      	movs	r5, #0
 800128c:	4628      	mov	r0, r5
 800128e:	bd38      	pop	{r3, r4, r5, pc}
 8001290:	b118      	cbz	r0, 800129a <_fflush_r+0x1a>
 8001292:	6a03      	ldr	r3, [r0, #32]
 8001294:	b90b      	cbnz	r3, 800129a <_fflush_r+0x1a>
 8001296:	f7ff fa9b 	bl	80007d0 <__sinit>
 800129a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f3      	beq.n	800128a <_fflush_r+0xa>
 80012a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012a4:	07d0      	lsls	r0, r2, #31
 80012a6:	d404      	bmi.n	80012b2 <_fflush_r+0x32>
 80012a8:	0599      	lsls	r1, r3, #22
 80012aa:	d402      	bmi.n	80012b2 <_fflush_r+0x32>
 80012ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012ae:	f7ff fb94 	bl	80009da <__retarget_lock_acquire_recursive>
 80012b2:	4628      	mov	r0, r5
 80012b4:	4621      	mov	r1, r4
 80012b6:	f7ff ff5f 	bl	8001178 <__sflush_r>
 80012ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012bc:	4605      	mov	r5, r0
 80012be:	07da      	lsls	r2, r3, #31
 80012c0:	d4e4      	bmi.n	800128c <_fflush_r+0xc>
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	059b      	lsls	r3, r3, #22
 80012c6:	d4e1      	bmi.n	800128c <_fflush_r+0xc>
 80012c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012ca:	f7ff fb87 	bl	80009dc <__retarget_lock_release_recursive>
 80012ce:	e7dd      	b.n	800128c <_fflush_r+0xc>

080012d0 <__swbuf_r>:
 80012d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d2:	460e      	mov	r6, r1
 80012d4:	4614      	mov	r4, r2
 80012d6:	4605      	mov	r5, r0
 80012d8:	b118      	cbz	r0, 80012e2 <__swbuf_r+0x12>
 80012da:	6a03      	ldr	r3, [r0, #32]
 80012dc:	b90b      	cbnz	r3, 80012e2 <__swbuf_r+0x12>
 80012de:	f7ff fa77 	bl	80007d0 <__sinit>
 80012e2:	69a3      	ldr	r3, [r4, #24]
 80012e4:	60a3      	str	r3, [r4, #8]
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	071a      	lsls	r2, r3, #28
 80012ea:	d501      	bpl.n	80012f0 <__swbuf_r+0x20>
 80012ec:	6923      	ldr	r3, [r4, #16]
 80012ee:	b943      	cbnz	r3, 8001302 <__swbuf_r+0x32>
 80012f0:	4621      	mov	r1, r4
 80012f2:	4628      	mov	r0, r5
 80012f4:	f000 f82a 	bl	800134c <__swsetup_r>
 80012f8:	b118      	cbz	r0, 8001302 <__swbuf_r+0x32>
 80012fa:	f04f 37ff 	mov.w	r7, #4294967295
 80012fe:	4638      	mov	r0, r7
 8001300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	b2f6      	uxtb	r6, r6
 8001306:	6922      	ldr	r2, [r4, #16]
 8001308:	4637      	mov	r7, r6
 800130a:	1a98      	subs	r0, r3, r2
 800130c:	6963      	ldr	r3, [r4, #20]
 800130e:	4283      	cmp	r3, r0
 8001310:	dc05      	bgt.n	800131e <__swbuf_r+0x4e>
 8001312:	4621      	mov	r1, r4
 8001314:	4628      	mov	r0, r5
 8001316:	f7ff ffb3 	bl	8001280 <_fflush_r>
 800131a:	2800      	cmp	r0, #0
 800131c:	d1ed      	bne.n	80012fa <__swbuf_r+0x2a>
 800131e:	68a3      	ldr	r3, [r4, #8]
 8001320:	3b01      	subs	r3, #1
 8001322:	60a3      	str	r3, [r4, #8]
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	6022      	str	r2, [r4, #0]
 800132a:	701e      	strb	r6, [r3, #0]
 800132c:	1c43      	adds	r3, r0, #1
 800132e:	6962      	ldr	r2, [r4, #20]
 8001330:	429a      	cmp	r2, r3
 8001332:	d004      	beq.n	800133e <__swbuf_r+0x6e>
 8001334:	89a3      	ldrh	r3, [r4, #12]
 8001336:	07db      	lsls	r3, r3, #31
 8001338:	d5e1      	bpl.n	80012fe <__swbuf_r+0x2e>
 800133a:	2e0a      	cmp	r6, #10
 800133c:	d1df      	bne.n	80012fe <__swbuf_r+0x2e>
 800133e:	4621      	mov	r1, r4
 8001340:	4628      	mov	r0, r5
 8001342:	f7ff ff9d 	bl	8001280 <_fflush_r>
 8001346:	2800      	cmp	r0, #0
 8001348:	d0d9      	beq.n	80012fe <__swbuf_r+0x2e>
 800134a:	e7d6      	b.n	80012fa <__swbuf_r+0x2a>

0800134c <__swsetup_r>:
 800134c:	b538      	push	{r3, r4, r5, lr}
 800134e:	4b29      	ldr	r3, [pc, #164]	@ (80013f4 <__swsetup_r+0xa8>)
 8001350:	4605      	mov	r5, r0
 8001352:	460c      	mov	r4, r1
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	b118      	cbz	r0, 8001360 <__swsetup_r+0x14>
 8001358:	6a03      	ldr	r3, [r0, #32]
 800135a:	b90b      	cbnz	r3, 8001360 <__swsetup_r+0x14>
 800135c:	f7ff fa38 	bl	80007d0 <__sinit>
 8001360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001364:	0719      	lsls	r1, r3, #28
 8001366:	d422      	bmi.n	80013ae <__swsetup_r+0x62>
 8001368:	06da      	lsls	r2, r3, #27
 800136a:	d407      	bmi.n	800137c <__swsetup_r+0x30>
 800136c:	2209      	movs	r2, #9
 800136e:	602a      	str	r2, [r5, #0]
 8001370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	81a3      	strh	r3, [r4, #12]
 800137a:	e033      	b.n	80013e4 <__swsetup_r+0x98>
 800137c:	0758      	lsls	r0, r3, #29
 800137e:	d512      	bpl.n	80013a6 <__swsetup_r+0x5a>
 8001380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001382:	b141      	cbz	r1, 8001396 <__swsetup_r+0x4a>
 8001384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001388:	4299      	cmp	r1, r3
 800138a:	d002      	beq.n	8001392 <__swsetup_r+0x46>
 800138c:	4628      	mov	r0, r5
 800138e:	f7ff fb27 	bl	80009e0 <_free_r>
 8001392:	2300      	movs	r3, #0
 8001394:	6363      	str	r3, [r4, #52]	@ 0x34
 8001396:	89a3      	ldrh	r3, [r4, #12]
 8001398:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800139c:	81a3      	strh	r3, [r4, #12]
 800139e:	2300      	movs	r3, #0
 80013a0:	6063      	str	r3, [r4, #4]
 80013a2:	6923      	ldr	r3, [r4, #16]
 80013a4:	6023      	str	r3, [r4, #0]
 80013a6:	89a3      	ldrh	r3, [r4, #12]
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	81a3      	strh	r3, [r4, #12]
 80013ae:	6923      	ldr	r3, [r4, #16]
 80013b0:	b94b      	cbnz	r3, 80013c6 <__swsetup_r+0x7a>
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013bc:	d003      	beq.n	80013c6 <__swsetup_r+0x7a>
 80013be:	4621      	mov	r1, r4
 80013c0:	4628      	mov	r0, r5
 80013c2:	f000 f85c 	bl	800147e <__smakebuf_r>
 80013c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ca:	f013 0201 	ands.w	r2, r3, #1
 80013ce:	d00a      	beq.n	80013e6 <__swsetup_r+0x9a>
 80013d0:	2200      	movs	r2, #0
 80013d2:	60a2      	str	r2, [r4, #8]
 80013d4:	6962      	ldr	r2, [r4, #20]
 80013d6:	4252      	negs	r2, r2
 80013d8:	61a2      	str	r2, [r4, #24]
 80013da:	6922      	ldr	r2, [r4, #16]
 80013dc:	b942      	cbnz	r2, 80013f0 <__swsetup_r+0xa4>
 80013de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013e2:	d1c5      	bne.n	8001370 <__swsetup_r+0x24>
 80013e4:	bd38      	pop	{r3, r4, r5, pc}
 80013e6:	0799      	lsls	r1, r3, #30
 80013e8:	bf58      	it	pl
 80013ea:	6962      	ldrpl	r2, [r4, #20]
 80013ec:	60a2      	str	r2, [r4, #8]
 80013ee:	e7f4      	b.n	80013da <__swsetup_r+0x8e>
 80013f0:	2000      	movs	r0, #0
 80013f2:	e7f7      	b.n	80013e4 <__swsetup_r+0x98>
 80013f4:	2000000c 	.word	0x2000000c

080013f8 <_sbrk_r>:
 80013f8:	b538      	push	{r3, r4, r5, lr}
 80013fa:	2300      	movs	r3, #0
 80013fc:	4d05      	ldr	r5, [pc, #20]	@ (8001414 <_sbrk_r+0x1c>)
 80013fe:	4604      	mov	r4, r0
 8001400:	4608      	mov	r0, r1
 8001402:	602b      	str	r3, [r5, #0]
 8001404:	f7ff f8f8 	bl	80005f8 <_sbrk>
 8001408:	1c43      	adds	r3, r0, #1
 800140a:	d102      	bne.n	8001412 <_sbrk_r+0x1a>
 800140c:	682b      	ldr	r3, [r5, #0]
 800140e:	b103      	cbz	r3, 8001412 <_sbrk_r+0x1a>
 8001410:	6023      	str	r3, [r4, #0]
 8001412:	bd38      	pop	{r3, r4, r5, pc}
 8001414:	200001b8 	.word	0x200001b8

08001418 <memchr>:
 8001418:	b2c9      	uxtb	r1, r1
 800141a:	4603      	mov	r3, r0
 800141c:	4402      	add	r2, r0
 800141e:	b510      	push	{r4, lr}
 8001420:	4293      	cmp	r3, r2
 8001422:	4618      	mov	r0, r3
 8001424:	d101      	bne.n	800142a <memchr+0x12>
 8001426:	2000      	movs	r0, #0
 8001428:	e003      	b.n	8001432 <memchr+0x1a>
 800142a:	7804      	ldrb	r4, [r0, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	428c      	cmp	r4, r1
 8001430:	d1f6      	bne.n	8001420 <memchr+0x8>
 8001432:	bd10      	pop	{r4, pc}

08001434 <__swhatbuf_r>:
 8001434:	b570      	push	{r4, r5, r6, lr}
 8001436:	460c      	mov	r4, r1
 8001438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800143c:	b096      	sub	sp, #88	@ 0x58
 800143e:	4615      	mov	r5, r2
 8001440:	2900      	cmp	r1, #0
 8001442:	461e      	mov	r6, r3
 8001444:	da0c      	bge.n	8001460 <__swhatbuf_r+0x2c>
 8001446:	89a3      	ldrh	r3, [r4, #12]
 8001448:	2100      	movs	r1, #0
 800144a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800144e:	bf14      	ite	ne
 8001450:	2340      	movne	r3, #64	@ 0x40
 8001452:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001456:	2000      	movs	r0, #0
 8001458:	6031      	str	r1, [r6, #0]
 800145a:	602b      	str	r3, [r5, #0]
 800145c:	b016      	add	sp, #88	@ 0x58
 800145e:	bd70      	pop	{r4, r5, r6, pc}
 8001460:	466a      	mov	r2, sp
 8001462:	f000 f849 	bl	80014f8 <_fstat_r>
 8001466:	2800      	cmp	r0, #0
 8001468:	dbed      	blt.n	8001446 <__swhatbuf_r+0x12>
 800146a:	9901      	ldr	r1, [sp, #4]
 800146c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001470:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001474:	4259      	negs	r1, r3
 8001476:	4159      	adcs	r1, r3
 8001478:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800147c:	e7eb      	b.n	8001456 <__swhatbuf_r+0x22>

0800147e <__smakebuf_r>:
 800147e:	898b      	ldrh	r3, [r1, #12]
 8001480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001482:	079d      	lsls	r5, r3, #30
 8001484:	4606      	mov	r6, r0
 8001486:	460c      	mov	r4, r1
 8001488:	d507      	bpl.n	800149a <__smakebuf_r+0x1c>
 800148a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800148e:	6023      	str	r3, [r4, #0]
 8001490:	6123      	str	r3, [r4, #16]
 8001492:	2301      	movs	r3, #1
 8001494:	6163      	str	r3, [r4, #20]
 8001496:	b003      	add	sp, #12
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	ab01      	add	r3, sp, #4
 800149c:	466a      	mov	r2, sp
 800149e:	f7ff ffc9 	bl	8001434 <__swhatbuf_r>
 80014a2:	9f00      	ldr	r7, [sp, #0]
 80014a4:	4605      	mov	r5, r0
 80014a6:	4630      	mov	r0, r6
 80014a8:	4639      	mov	r1, r7
 80014aa:	f7ff fb05 	bl	8000ab8 <_malloc_r>
 80014ae:	b948      	cbnz	r0, 80014c4 <__smakebuf_r+0x46>
 80014b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014b4:	059a      	lsls	r2, r3, #22
 80014b6:	d4ee      	bmi.n	8001496 <__smakebuf_r+0x18>
 80014b8:	f023 0303 	bic.w	r3, r3, #3
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	81a3      	strh	r3, [r4, #12]
 80014c2:	e7e2      	b.n	800148a <__smakebuf_r+0xc>
 80014c4:	89a3      	ldrh	r3, [r4, #12]
 80014c6:	6020      	str	r0, [r4, #0]
 80014c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014cc:	81a3      	strh	r3, [r4, #12]
 80014ce:	9b01      	ldr	r3, [sp, #4]
 80014d0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014d4:	b15b      	cbz	r3, 80014ee <__smakebuf_r+0x70>
 80014d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014da:	4630      	mov	r0, r6
 80014dc:	f000 f81e 	bl	800151c <_isatty_r>
 80014e0:	b128      	cbz	r0, 80014ee <__smakebuf_r+0x70>
 80014e2:	89a3      	ldrh	r3, [r4, #12]
 80014e4:	f023 0303 	bic.w	r3, r3, #3
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	81a3      	strh	r3, [r4, #12]
 80014ee:	89a3      	ldrh	r3, [r4, #12]
 80014f0:	431d      	orrs	r5, r3
 80014f2:	81a5      	strh	r5, [r4, #12]
 80014f4:	e7cf      	b.n	8001496 <__smakebuf_r+0x18>
	...

080014f8 <_fstat_r>:
 80014f8:	b538      	push	{r3, r4, r5, lr}
 80014fa:	2300      	movs	r3, #0
 80014fc:	4d06      	ldr	r5, [pc, #24]	@ (8001518 <_fstat_r+0x20>)
 80014fe:	4604      	mov	r4, r0
 8001500:	4608      	mov	r0, r1
 8001502:	4611      	mov	r1, r2
 8001504:	602b      	str	r3, [r5, #0]
 8001506:	f7ff f84f 	bl	80005a8 <_fstat>
 800150a:	1c43      	adds	r3, r0, #1
 800150c:	d102      	bne.n	8001514 <_fstat_r+0x1c>
 800150e:	682b      	ldr	r3, [r5, #0]
 8001510:	b103      	cbz	r3, 8001514 <_fstat_r+0x1c>
 8001512:	6023      	str	r3, [r4, #0]
 8001514:	bd38      	pop	{r3, r4, r5, pc}
 8001516:	bf00      	nop
 8001518:	200001b8 	.word	0x200001b8

0800151c <_isatty_r>:
 800151c:	b538      	push	{r3, r4, r5, lr}
 800151e:	2300      	movs	r3, #0
 8001520:	4d05      	ldr	r5, [pc, #20]	@ (8001538 <_isatty_r+0x1c>)
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	602b      	str	r3, [r5, #0]
 8001528:	f7ff f84e 	bl	80005c8 <_isatty>
 800152c:	1c43      	adds	r3, r0, #1
 800152e:	d102      	bne.n	8001536 <_isatty_r+0x1a>
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	b103      	cbz	r3, 8001536 <_isatty_r+0x1a>
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	bd38      	pop	{r3, r4, r5, pc}
 8001538:	200001b8 	.word	0x200001b8

0800153c <_init>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	bf00      	nop
 8001540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001542:	bc08      	pop	{r3}
 8001544:	469e      	mov	lr, r3
 8001546:	4770      	bx	lr

08001548 <_fini>:
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	bf00      	nop
 800154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154e:	bc08      	pop	{r3}
 8001550:	469e      	mov	lr, r3
 8001552:	4770      	bx	lr
