
CacheMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013a4  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080015f0  080015f0  000025f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a9c  08001a9c  00003070  2**0
                  CONTENTS
  4 .ARM          00000000  08001a9c  08001a9c  00003070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a9c  08001a9c  00003070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a9c  08001a9c  00002a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001aa0  08001aa0  00002aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08001aa4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000070  08001b14  00003070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001b14  000031dc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002110  00000000  00000000  000030a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007af  00000000  00000000  000051b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00005968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000164  00000000  00000000  00005b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025284  00000000  00000000  00005cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002b3c  00000000  00000000  0002af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7f48  00000000  00000000  0002da94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001059dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e18  00000000  00000000  00105a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00106838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000070 	.word	0x20000070
 8000268:	00000000 	.word	0x00000000
 800026c:	080015d8 	.word	0x080015d8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000074 	.word	0x20000074
 8000288:	080015d8 	.word	0x080015d8

0800028c <ICACHE_Init>:
#include "ICACHE.h"
#include <stdio.h>

void ICACHE_Init(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
    // Disable ICACHE before configuration
    ICACHE->CR &= ~ICACHE_CR_EN;
 8000290:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <ICACHE_Init+0x58>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a13      	ldr	r2, [pc, #76]	@ (80002e4 <ICACHE_Init+0x58>)
 8000296:	f023 0301 	bic.w	r3, r3, #1
 800029a:	6013      	str	r3, [r2, #0]

    // Invalidate the cache
    ICACHE->CR |= ICACHE_CR_CACHEINV;
 800029c:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <ICACHE_Init+0x58>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a10      	ldr	r2, [pc, #64]	@ (80002e4 <ICACHE_Init+0x58>)
 80002a2:	f043 0302 	orr.w	r3, r3, #2
 80002a6:	6013      	str	r3, [r2, #0]
    while (ICACHE->SR & ICACHE_SR_BUSYF); // Wait until invalidation completes
 80002a8:	bf00      	nop
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <ICACHE_Init+0x58>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d1f9      	bne.n	80002aa <ICACHE_Init+0x1e>

    // Enable HIT/MISS monitoring
    ICACHE->CR |= ICACHE_CR_MISSMEN | ICACHE_CR_HITMEN;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <ICACHE_Init+0x58>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a0a      	ldr	r2, [pc, #40]	@ (80002e4 <ICACHE_Init+0x58>)
 80002bc:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80002c0:	6013      	str	r3, [r2, #0]

    // Reset HIT/MISS counters
    ICACHE->CR &= ~(ICACHE_CR_MISSMRST | ICACHE_CR_HITMRST);
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <ICACHE_Init+0x58>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <ICACHE_Init+0x58>)
 80002c8:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80002cc:	6013      	str	r3, [r2, #0]

    // Enable ICACHE
    ICACHE->CR |= ICACHE_CR_EN;
 80002ce:	4b05      	ldr	r3, [pc, #20]	@ (80002e4 <ICACHE_Init+0x58>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <ICACHE_Init+0x58>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6013      	str	r3, [r2, #0]
}
 80002da:	bf00      	nop
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	40030400 	.word	0x40030400

080002e8 <ICACHE_ClearMonitor>:

static void ICACHE_ClearMonitor(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
	printf("\033[2J\033[H");
 80002ec:	4802      	ldr	r0, [pc, #8]	@ (80002f8 <ICACHE_ClearMonitor+0x10>)
 80002ee:	f000 faf3 	bl	80008d8 <iprintf>
}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	080015f0 	.word	0x080015f0

080002fc <ICACHE_PrintBanner>:

static void ICACHE_PrintBanner(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	printf("\n\r");
 8000300:	480b      	ldr	r0, [pc, #44]	@ (8000330 <ICACHE_PrintBanner+0x34>)
 8000302:	f000 fae9 	bl	80008d8 <iprintf>
	printf(" ██████  █████   ██████ ██   ██ ███████     ███    ███  ██████  ███    ██ ██ ████████  ██████  ██████  \n\r");
 8000306:	480b      	ldr	r0, [pc, #44]	@ (8000334 <ICACHE_PrintBanner+0x38>)
 8000308:	f000 fae6 	bl	80008d8 <iprintf>
	printf("██      ██   ██ ██      ██   ██ ██          ████  ████ ██    ██ ████   ██ ██    ██    ██    ██ ██   ██ \n\r");
 800030c:	480a      	ldr	r0, [pc, #40]	@ (8000338 <ICACHE_PrintBanner+0x3c>)
 800030e:	f000 fae3 	bl	80008d8 <iprintf>
	printf("██      ███████ ██      ███████ █████       ██ ████ ██ ██    ██ ██ ██  ██ ██    ██    ██    ██ ██████  \n\r");
 8000312:	480a      	ldr	r0, [pc, #40]	@ (800033c <ICACHE_PrintBanner+0x40>)
 8000314:	f000 fae0 	bl	80008d8 <iprintf>
	printf("██      ██   ██ ██      ██   ██ ██          ██  ██  ██ ██    ██ ██  ██ ██ ██    ██    ██    ██ ██   ██ \n\r");
 8000318:	4809      	ldr	r0, [pc, #36]	@ (8000340 <ICACHE_PrintBanner+0x44>)
 800031a:	f000 fadd 	bl	80008d8 <iprintf>
	printf(" ██████ ██   ██  ██████ ██   ██ ███████     ██      ██  ██████  ██   ████ ██    ██     ██████  ██   ██ \n\r");
 800031e:	4809      	ldr	r0, [pc, #36]	@ (8000344 <ICACHE_PrintBanner+0x48>)
 8000320:	f000 fada 	bl	80008d8 <iprintf>
	printf("\n\r");
 8000324:	4802      	ldr	r0, [pc, #8]	@ (8000330 <ICACHE_PrintBanner+0x34>)
 8000326:	f000 fad7 	bl	80008d8 <iprintf>
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	080015f8 	.word	0x080015f8
 8000334:	080015fc 	.word	0x080015fc
 8000338:	080016ec 	.word	0x080016ec
 800033c:	080017b0 	.word	0x080017b0
 8000340:	08001888 	.word	0x08001888
 8000344:	08001948 	.word	0x08001948

08000348 <ICACHE_UpdateMonitor>:

void ICACHE_UpdateMonitor(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	ICACHE_ClearMonitor();
 800034c:	f7ff ffcc 	bl	80002e8 <ICACHE_ClearMonitor>
	ICACHE_PrintBanner();
 8000350:	f7ff ffd4 	bl	80002fc <ICACHE_PrintBanner>
	printf("\n\n\r");
 8000354:	480b      	ldr	r0, [pc, #44]	@ (8000384 <ICACHE_UpdateMonitor+0x3c>)
 8000356:	f000 fabf 	bl	80008d8 <iprintf>
	printf("█ ICACHE HIT  Counter : %lu\n\r", ICACHE->HMONR);
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <ICACHE_UpdateMonitor+0x40>)
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	4619      	mov	r1, r3
 8000360:	480a      	ldr	r0, [pc, #40]	@ (800038c <ICACHE_UpdateMonitor+0x44>)
 8000362:	f000 fab9 	bl	80008d8 <iprintf>
    printf("\n\r");
 8000366:	480a      	ldr	r0, [pc, #40]	@ (8000390 <ICACHE_UpdateMonitor+0x48>)
 8000368:	f000 fab6 	bl	80008d8 <iprintf>
    printf("█ ICACHE MISS Counter : %lu\n\r", ICACHE->MMONR);
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <ICACHE_UpdateMonitor+0x40>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4619      	mov	r1, r3
 8000372:	4808      	ldr	r0, [pc, #32]	@ (8000394 <ICACHE_UpdateMonitor+0x4c>)
 8000374:	f000 fab0 	bl	80008d8 <iprintf>
    printf("\n\r");
 8000378:	4805      	ldr	r0, [pc, #20]	@ (8000390 <ICACHE_UpdateMonitor+0x48>)
 800037a:	f000 faad 	bl	80008d8 <iprintf>
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	08001a24 	.word	0x08001a24
 8000388:	40030400 	.word	0x40030400
 800038c:	08001a28 	.word	0x08001a28
 8000390:	080015f8 	.word	0x080015f8
 8000394:	08001a48 	.word	0x08001a48

08000398 <TIM2_IRQHandler>:
    TIM2->CR1 |= TIM_CR1_CEN;
}

// TIM2 Interrupt Handler
void TIM2_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 800039c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003a0:	691b      	ldr	r3, [r3, #16]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d009      	beq.n	80003be <TIM2_IRQHandler+0x26>
    { // Check update interrupt flag
        TIM2->SR &= ~TIM_SR_UIF; // Clear the flag
 80003aa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003b4:	f023 0301 	bic.w	r3, r3, #1
 80003b8:	6113      	str	r3, [r2, #16]
        ICACHE_UpdateMonitor();
 80003ba:	f7ff ffc5 	bl	8000348 <ICACHE_UpdateMonitor>
    }
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}

080003c2 <Compute_UART_Baud>:
#define UART_BAUDRATE	115200
#define SYS_FREQ		32000000
#define APB1_CLK		SYS_FREQ

static uint16_t Compute_UART_Baud(uint32_t periph_clk, uint32_t baudrate)
{
 80003c2:	b480      	push	{r7}
 80003c4:	b083      	sub	sp, #12
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
 80003ca:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate/2U))/baudrate);
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	085a      	lsrs	r2, r3, #1
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	441a      	add	r2, r3
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003da:	b29b      	uxth	r3, r3
}
 80003dc:	4618      	mov	r0, r3
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr

080003e8 <UART3_SetBaudRate>:

static void UART3_SetBaudRate(uint32_t periph_clk, uint32_t baudrate)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
	USART3->BRR = Compute_UART_Baud(periph_clk,baudrate);
 80003f2:	6839      	ldr	r1, [r7, #0]
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ffe4 	bl	80003c2 <Compute_UART_Baud>
 80003fa:	4603      	mov	r3, r0
 80003fc:	461a      	mov	r2, r3
 80003fe:	4b03      	ldr	r3, [pc, #12]	@ (800040c <UART3_SetBaudRate+0x24>)
 8000400:	60da      	str	r2, [r3, #12]
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40004800 	.word	0x40004800

08000410 <UART3_Init>:

void UART3_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
    /* Enable clock access to GPIOA and UART2 */
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIODEN;
 8000414:	4b1a      	ldr	r3, [pc, #104]	@ (8000480 <UART3_Init+0x70>)
 8000416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800041a:	4a19      	ldr	r2, [pc, #100]	@ (8000480 <UART3_Init+0x70>)
 800041c:	f043 0308 	orr.w	r3, r3, #8
 8000420:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    RCC->APB1LENR |= RCC_APB1LENR_USART3EN;
 8000424:	4b16      	ldr	r3, [pc, #88]	@ (8000480 <UART3_Init+0x70>)
 8000426:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800042a:	4a15      	ldr	r2, [pc, #84]	@ (8000480 <UART3_Init+0x70>)
 800042c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000430:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    /* Set PD8 and PD9 to alternate function mode */
    GPIOD->MODER &= ~((3U << 16) | (3U << 18));
 8000434:	4b13      	ldr	r3, [pc, #76]	@ (8000484 <UART3_Init+0x74>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a12      	ldr	r2, [pc, #72]	@ (8000484 <UART3_Init+0x74>)
 800043a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800043e:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (2U << 16) | (2U << 18);
 8000440:	4b10      	ldr	r3, [pc, #64]	@ (8000484 <UART3_Init+0x74>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a0f      	ldr	r2, [pc, #60]	@ (8000484 <UART3_Init+0x74>)
 8000446:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 800044a:	6013      	str	r3, [r2, #0]

    /* Set Alternate Function type to USART3 (AF7) */
    GPIOD->AFR[1] |= (7U << 0) | (7U << 4);
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <UART3_Init+0x74>)
 800044e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000450:	4a0c      	ldr	r2, [pc, #48]	@ (8000484 <UART3_Init+0x74>)
 8000452:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8000456:	6253      	str	r3, [r2, #36]	@ 0x24

    // Disable USART3 Peripheral
    USART3->CR1 &= ~(1<<0);
 8000458:	4b0b      	ldr	r3, [pc, #44]	@ (8000488 <UART3_Init+0x78>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <UART3_Init+0x78>)
 800045e:	f023 0301 	bic.w	r3, r3, #1
 8000462:	6013      	str	r3, [r2, #0]

    /* Configure Baud Rate */
    UART3_SetBaudRate(APB1_CLK,UART_BAUDRATE); // For 32 MHz and 115200 baud
 8000464:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000468:	4808      	ldr	r0, [pc, #32]	@ (800048c <UART3_Init+0x7c>)
 800046a:	f7ff ffbd 	bl	80003e8 <UART3_SetBaudRate>

    /* Enable TX, RX, and UART */
    USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800046e:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <UART3_Init+0x78>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a05      	ldr	r2, [pc, #20]	@ (8000488 <UART3_Init+0x78>)
 8000474:	f043 030d 	orr.w	r3, r3, #13
 8000478:	6013      	str	r3, [r2, #0]
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	44020c00 	.word	0x44020c00
 8000484:	42020c00 	.word	0x42020c00
 8000488:	40004800 	.word	0x40004800
 800048c:	01e84800 	.word	0x01e84800

08000490 <UART3_TxChar>:

void UART3_TxChar(char ch)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
	/*Wait for Transmit Data Register to be empty*/
	while(!(USART3->ISR & USART_ISR_TXE));
 800049a:	bf00      	nop
 800049c:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <UART3_TxChar+0x2c>)
 800049e:	69db      	ldr	r3, [r3, #28]
 80004a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d0f9      	beq.n	800049c <UART3_TxChar+0xc>
	/*Write to the Transmit Data Register*/
	USART3->TDR = (ch & 0xFF);
 80004a8:	4a04      	ldr	r2, [pc, #16]	@ (80004bc <UART3_TxChar+0x2c>)
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40004800 	.word	0x40004800

080004c0 <UART3_RxChar>:
		UART3_TxChar(*str++);
	}
}

uint8_t UART3_RxChar(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
    while(!(USART3->ISR & USART_ISR_RXNE)); // Wait for RXNE flag (data received)
 80004c4:	bf00      	nop
 80004c6:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <UART3_RxChar+0x24>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0320 	and.w	r3, r3, #32
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d0f9      	beq.n	80004c6 <UART3_RxChar+0x6>
    return (uint8_t)(USART3->RDR & 0xFF); // Return the received data
 80004d2:	4b04      	ldr	r3, [pc, #16]	@ (80004e4 <UART3_RxChar+0x24>)
 80004d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004d6:	b2db      	uxtb	r3, r3
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40004800 	.word	0x40004800

080004e8 <_write>:

int _write(int file, char *ptr, int len)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	60f8      	str	r0, [r7, #12]
 80004f0:	60b9      	str	r1, [r7, #8]
 80004f2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	e009      	b.n	800050e <_write+0x26>
    {
        UART3_TxChar(ptr[i]);  // Transmit each character via UART2
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	68ba      	ldr	r2, [r7, #8]
 80004fe:	4413      	add	r3, r2
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ffc4 	bl	8000490 <UART3_TxChar>
    for (int i = 0; i < len; i++)
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	3301      	adds	r3, #1
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	697a      	ldr	r2, [r7, #20]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	429a      	cmp	r2, r3
 8000514:	dbf1      	blt.n	80004fa <_write+0x12>
    }
    return len;  // Return the number of characters written
 8000516:	687b      	ldr	r3, [r7, #4]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <_read>:

int _read(int file, char *ptr, int len)
{
 8000520:	b590      	push	{r4, r7, lr}
 8000522:	b087      	sub	sp, #28
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	e017      	b.n	8000562 <_read+0x42>
    {
        ptr[i] = UART3_RxChar();  // Read each character via UART2
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	68ba      	ldr	r2, [r7, #8]
 8000536:	18d4      	adds	r4, r2, r3
 8000538:	f7ff ffc2 	bl	80004c0 <UART3_RxChar>
 800053c:	4603      	mov	r3, r0
 800053e:	7023      	strb	r3, [r4, #0]
        if (ptr[i] == '\r')      // Handle Enter key as a newline
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	68ba      	ldr	r2, [r7, #8]
 8000544:	4413      	add	r3, r2
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b0d      	cmp	r3, #13
 800054a:	d107      	bne.n	800055c <_read+0x3c>
        {
            ptr[i] = '\n';       // Convert '\r' to '\n' for standard behavior
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	68ba      	ldr	r2, [r7, #8]
 8000550:	4413      	add	r3, r2
 8000552:	220a      	movs	r2, #10
 8000554:	701a      	strb	r2, [r3, #0]
            return i + 1;        // Return number of characters read
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	3301      	adds	r3, #1
 800055a:	e007      	b.n	800056c <_read+0x4c>
    for (int i = 0; i < len; i++)
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	3301      	adds	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	429a      	cmp	r2, r3
 8000568:	dbe3      	blt.n	8000532 <_read+0x12>
        }
    }
    return len;  // Return number of characters read
 800056a:	687b      	ldr	r3, [r7, #4]
}
 800056c:	4618      	mov	r0, r3
 800056e:	371c      	adds	r7, #28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd90      	pop	{r4, r7, pc}

08000574 <run_icache_intensive_task>:
// Function pointer array to introduce randomness
void (*func_array[NUM_FUNCTIONS])(void) = {func1, func2, func3, func4, func5};

// ICACHE-Intensive Application
void run_icache_intensive_task(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < LOOP_COUNT; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	e011      	b.n	80005a4 <run_icache_intensive_task+0x30>
    {
        // Randomly call different functions
        func_array[i % NUM_FUNCTIONS]();
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	4b0d      	ldr	r3, [pc, #52]	@ (80005b8 <run_icache_intensive_task+0x44>)
 8000584:	fb83 2301 	smull	r2, r3, r3, r1
 8000588:	105a      	asrs	r2, r3, #1
 800058a:	17cb      	asrs	r3, r1, #31
 800058c:	1ad2      	subs	r2, r2, r3
 800058e:	4613      	mov	r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4413      	add	r3, r2
 8000594:	1aca      	subs	r2, r1, r3
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <run_icache_intensive_task+0x48>)
 8000598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800059c:	4798      	blx	r3
    for (volatile int i = 0; i < LOOP_COUNT; i++)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <run_icache_intensive_task+0x4c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	dde9      	ble.n	8000580 <run_icache_intensive_task+0xc>
    }
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	66666667 	.word	0x66666667
 80005bc:	20000000 	.word	0x20000000
 80005c0:	0001869f 	.word	0x0001869f

080005c4 <func1>:

// Simple functions that will be frequently called
void func1(void) { asm volatile("nop"); }
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <func2>:
void func2(void) { asm volatile("nop"); }
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	bf00      	nop
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <func3>:
void func3(void) { asm volatile("nop"); }
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <func4>:
void func4(void) { asm volatile("nop"); }
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr

08000604 <func5>:
void func5(void) { asm volatile("nop"); }
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <main>:

int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	UART3_Init();
 8000618:	f7ff fefa 	bl	8000410 <UART3_Init>
    ICACHE_Init();
 800061c:	f7ff fe36 	bl	800028c <ICACHE_Init>

    while (1)
    {
        run_icache_intensive_task();  // ICACHE-heavy workload
 8000620:	f7ff ffa8 	bl	8000574 <run_icache_intensive_task>
        ICACHE_UpdateMonitor();             // Print HIT/MISS counters
 8000624:	f7ff fe90 	bl	8000348 <ICACHE_UpdateMonitor>
        run_icache_intensive_task();  // ICACHE-heavy workload
 8000628:	bf00      	nop
 800062a:	e7f9      	b.n	8000620 <main+0xc>

0800062c <_close>:
  }
  return len;
}

int _close(int file)
{
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000654:	605a      	str	r2, [r3, #4]
  return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <_isatty>:

int _isatty(int file)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800066c:	2301      	movs	r3, #1
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800067a:	b480      	push	{r7}
 800067c:	b085      	sub	sp, #20
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	60b9      	str	r1, [r7, #8]
 8000684:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000686:	2300      	movs	r3, #0
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800069c:	4a14      	ldr	r2, [pc, #80]	@ (80006f0 <_sbrk+0x5c>)
 800069e:	4b15      	ldr	r3, [pc, #84]	@ (80006f4 <_sbrk+0x60>)
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006a8:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <_sbrk+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006b0:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <_sbrk+0x64>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	@ (80006fc <_sbrk+0x68>)
 80006b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d207      	bcs.n	80006d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006c4:	f000 f9ac 	bl	8000a20 <__errno>
 80006c8:	4603      	mov	r3, r0
 80006ca:	220c      	movs	r2, #12
 80006cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	e009      	b.n	80006e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <_sbrk+0x64>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <_sbrk+0x64>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	4a05      	ldr	r2, [pc, #20]	@ (80006f8 <_sbrk+0x64>)
 80006e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3718      	adds	r7, #24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200a0000 	.word	0x200a0000
 80006f4:	00000400 	.word	0x00000400
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	200001e0 	.word	0x200001e0

08000700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	@ (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000704:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	@ (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	@ (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072e:	f000 f97d 	bl	8000a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff ff6f 	bl	8000614 <main>

08000736 <LoopForever>:

LoopForever:
  b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000744:	08001aa4 	.word	0x08001aa4
  ldr r2, =_sbss
 8000748:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800074c:	200001dc 	.word	0x200001dc

08000750 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_IRQHandler>
	...

08000754 <std>:
 8000754:	2300      	movs	r3, #0
 8000756:	b510      	push	{r4, lr}
 8000758:	4604      	mov	r4, r0
 800075a:	6083      	str	r3, [r0, #8]
 800075c:	8181      	strh	r1, [r0, #12]
 800075e:	4619      	mov	r1, r3
 8000760:	6643      	str	r3, [r0, #100]	@ 0x64
 8000762:	81c2      	strh	r2, [r0, #14]
 8000764:	2208      	movs	r2, #8
 8000766:	6183      	str	r3, [r0, #24]
 8000768:	e9c0 3300 	strd	r3, r3, [r0]
 800076c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000770:	305c      	adds	r0, #92	@ 0x5c
 8000772:	f000 f906 	bl	8000982 <memset>
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <std+0x58>)
 8000778:	6224      	str	r4, [r4, #32]
 800077a:	6263      	str	r3, [r4, #36]	@ 0x24
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <std+0x5c>)
 800077e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <std+0x60>)
 8000782:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000784:	4b0c      	ldr	r3, [pc, #48]	@ (80007b8 <std+0x64>)
 8000786:	6323      	str	r3, [r4, #48]	@ 0x30
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <std+0x68>)
 800078a:	429c      	cmp	r4, r3
 800078c:	d006      	beq.n	800079c <std+0x48>
 800078e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000792:	4294      	cmp	r4, r2
 8000794:	d002      	beq.n	800079c <std+0x48>
 8000796:	33d0      	adds	r3, #208	@ 0xd0
 8000798:	429c      	cmp	r4, r3
 800079a:	d105      	bne.n	80007a8 <std+0x54>
 800079c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80007a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a4:	f000 b966 	b.w	8000a74 <__retarget_lock_init_recursive>
 80007a8:	bd10      	pop	{r4, pc}
 80007aa:	bf00      	nop
 80007ac:	080008fd 	.word	0x080008fd
 80007b0:	0800091f 	.word	0x0800091f
 80007b4:	08000957 	.word	0x08000957
 80007b8:	0800097b 	.word	0x0800097b
 80007bc:	20000090 	.word	0x20000090

080007c0 <stdio_exit_handler>:
 80007c0:	4a02      	ldr	r2, [pc, #8]	@ (80007cc <stdio_exit_handler+0xc>)
 80007c2:	4903      	ldr	r1, [pc, #12]	@ (80007d0 <stdio_exit_handler+0x10>)
 80007c4:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <stdio_exit_handler+0x14>)
 80007c6:	f000 b869 	b.w	800089c <_fwalk_sglue>
 80007ca:	bf00      	nop
 80007cc:	20000014 	.word	0x20000014
 80007d0:	0800131d 	.word	0x0800131d
 80007d4:	20000024 	.word	0x20000024

080007d8 <cleanup_stdio>:
 80007d8:	6841      	ldr	r1, [r0, #4]
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <cleanup_stdio+0x34>)
 80007dc:	4299      	cmp	r1, r3
 80007de:	b510      	push	{r4, lr}
 80007e0:	4604      	mov	r4, r0
 80007e2:	d001      	beq.n	80007e8 <cleanup_stdio+0x10>
 80007e4:	f000 fd9a 	bl	800131c <_fflush_r>
 80007e8:	68a1      	ldr	r1, [r4, #8]
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <cleanup_stdio+0x38>)
 80007ec:	4299      	cmp	r1, r3
 80007ee:	d002      	beq.n	80007f6 <cleanup_stdio+0x1e>
 80007f0:	4620      	mov	r0, r4
 80007f2:	f000 fd93 	bl	800131c <_fflush_r>
 80007f6:	68e1      	ldr	r1, [r4, #12]
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <cleanup_stdio+0x3c>)
 80007fa:	4299      	cmp	r1, r3
 80007fc:	d004      	beq.n	8000808 <cleanup_stdio+0x30>
 80007fe:	4620      	mov	r0, r4
 8000800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000804:	f000 bd8a 	b.w	800131c <_fflush_r>
 8000808:	bd10      	pop	{r4, pc}
 800080a:	bf00      	nop
 800080c:	20000090 	.word	0x20000090
 8000810:	200000f8 	.word	0x200000f8
 8000814:	20000160 	.word	0x20000160

08000818 <global_stdio_init.part.0>:
 8000818:	b510      	push	{r4, lr}
 800081a:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <global_stdio_init.part.0+0x30>)
 800081c:	2104      	movs	r1, #4
 800081e:	4c0b      	ldr	r4, [pc, #44]	@ (800084c <global_stdio_init.part.0+0x34>)
 8000820:	4a0b      	ldr	r2, [pc, #44]	@ (8000850 <global_stdio_init.part.0+0x38>)
 8000822:	4620      	mov	r0, r4
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	2200      	movs	r2, #0
 8000828:	f7ff ff94 	bl	8000754 <std>
 800082c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000830:	2201      	movs	r2, #1
 8000832:	2109      	movs	r1, #9
 8000834:	f7ff ff8e 	bl	8000754 <std>
 8000838:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800083c:	2202      	movs	r2, #2
 800083e:	2112      	movs	r1, #18
 8000840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000844:	f7ff bf86 	b.w	8000754 <std>
 8000848:	200001c8 	.word	0x200001c8
 800084c:	20000090 	.word	0x20000090
 8000850:	080007c1 	.word	0x080007c1

08000854 <__sfp_lock_acquire>:
 8000854:	4801      	ldr	r0, [pc, #4]	@ (800085c <__sfp_lock_acquire+0x8>)
 8000856:	f000 b90e 	b.w	8000a76 <__retarget_lock_acquire_recursive>
 800085a:	bf00      	nop
 800085c:	200001d1 	.word	0x200001d1

08000860 <__sfp_lock_release>:
 8000860:	4801      	ldr	r0, [pc, #4]	@ (8000868 <__sfp_lock_release+0x8>)
 8000862:	f000 b909 	b.w	8000a78 <__retarget_lock_release_recursive>
 8000866:	bf00      	nop
 8000868:	200001d1 	.word	0x200001d1

0800086c <__sinit>:
 800086c:	b510      	push	{r4, lr}
 800086e:	4604      	mov	r4, r0
 8000870:	f7ff fff0 	bl	8000854 <__sfp_lock_acquire>
 8000874:	6a23      	ldr	r3, [r4, #32]
 8000876:	b11b      	cbz	r3, 8000880 <__sinit+0x14>
 8000878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800087c:	f7ff bff0 	b.w	8000860 <__sfp_lock_release>
 8000880:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <__sinit+0x28>)
 8000882:	6223      	str	r3, [r4, #32]
 8000884:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <__sinit+0x2c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1f5      	bne.n	8000878 <__sinit+0xc>
 800088c:	f7ff ffc4 	bl	8000818 <global_stdio_init.part.0>
 8000890:	e7f2      	b.n	8000878 <__sinit+0xc>
 8000892:	bf00      	nop
 8000894:	080007d9 	.word	0x080007d9
 8000898:	200001c8 	.word	0x200001c8

0800089c <_fwalk_sglue>:
 800089c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008a0:	4607      	mov	r7, r0
 80008a2:	4688      	mov	r8, r1
 80008a4:	4614      	mov	r4, r2
 80008a6:	2600      	movs	r6, #0
 80008a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008ac:	f1b9 0901 	subs.w	r9, r9, #1
 80008b0:	d505      	bpl.n	80008be <_fwalk_sglue+0x22>
 80008b2:	6824      	ldr	r4, [r4, #0]
 80008b4:	2c00      	cmp	r4, #0
 80008b6:	d1f7      	bne.n	80008a8 <_fwalk_sglue+0xc>
 80008b8:	4630      	mov	r0, r6
 80008ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008be:	89ab      	ldrh	r3, [r5, #12]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d907      	bls.n	80008d4 <_fwalk_sglue+0x38>
 80008c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80008c8:	3301      	adds	r3, #1
 80008ca:	d003      	beq.n	80008d4 <_fwalk_sglue+0x38>
 80008cc:	4629      	mov	r1, r5
 80008ce:	4638      	mov	r0, r7
 80008d0:	47c0      	blx	r8
 80008d2:	4306      	orrs	r6, r0
 80008d4:	3568      	adds	r5, #104	@ 0x68
 80008d6:	e7e9      	b.n	80008ac <_fwalk_sglue+0x10>

080008d8 <iprintf>:
 80008d8:	b40f      	push	{r0, r1, r2, r3}
 80008da:	b507      	push	{r0, r1, r2, lr}
 80008dc:	4906      	ldr	r1, [pc, #24]	@ (80008f8 <iprintf+0x20>)
 80008de:	ab04      	add	r3, sp, #16
 80008e0:	6808      	ldr	r0, [r1, #0]
 80008e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80008e6:	6881      	ldr	r1, [r0, #8]
 80008e8:	9301      	str	r3, [sp, #4]
 80008ea:	f000 f9e9 	bl	8000cc0 <_vfiprintf_r>
 80008ee:	b003      	add	sp, #12
 80008f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80008f4:	b004      	add	sp, #16
 80008f6:	4770      	bx	lr
 80008f8:	20000020 	.word	0x20000020

080008fc <__sread>:
 80008fc:	b510      	push	{r4, lr}
 80008fe:	460c      	mov	r4, r1
 8000900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000904:	f000 f868 	bl	80009d8 <_read_r>
 8000908:	2800      	cmp	r0, #0
 800090a:	bfab      	itete	ge
 800090c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800090e:	89a3      	ldrhlt	r3, [r4, #12]
 8000910:	181b      	addge	r3, r3, r0
 8000912:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000916:	bfac      	ite	ge
 8000918:	6563      	strge	r3, [r4, #84]	@ 0x54
 800091a:	81a3      	strhlt	r3, [r4, #12]
 800091c:	bd10      	pop	{r4, pc}

0800091e <__swrite>:
 800091e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000922:	461f      	mov	r7, r3
 8000924:	898b      	ldrh	r3, [r1, #12]
 8000926:	4605      	mov	r5, r0
 8000928:	460c      	mov	r4, r1
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	4616      	mov	r6, r2
 800092e:	d505      	bpl.n	800093c <__swrite+0x1e>
 8000930:	2302      	movs	r3, #2
 8000932:	2200      	movs	r2, #0
 8000934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000938:	f000 f83c 	bl	80009b4 <_lseek_r>
 800093c:	89a3      	ldrh	r3, [r4, #12]
 800093e:	4632      	mov	r2, r6
 8000940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000944:	4628      	mov	r0, r5
 8000946:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800094a:	81a3      	strh	r3, [r4, #12]
 800094c:	463b      	mov	r3, r7
 800094e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000952:	f000 b853 	b.w	80009fc <_write_r>

08000956 <__sseek>:
 8000956:	b510      	push	{r4, lr}
 8000958:	460c      	mov	r4, r1
 800095a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095e:	f000 f829 	bl	80009b4 <_lseek_r>
 8000962:	1c43      	adds	r3, r0, #1
 8000964:	89a3      	ldrh	r3, [r4, #12]
 8000966:	bf15      	itete	ne
 8000968:	6560      	strne	r0, [r4, #84]	@ 0x54
 800096a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800096e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000972:	81a3      	strheq	r3, [r4, #12]
 8000974:	bf18      	it	ne
 8000976:	81a3      	strhne	r3, [r4, #12]
 8000978:	bd10      	pop	{r4, pc}

0800097a <__sclose>:
 800097a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800097e:	f000 b809 	b.w	8000994 <_close_r>

08000982 <memset>:
 8000982:	4402      	add	r2, r0
 8000984:	4603      	mov	r3, r0
 8000986:	4293      	cmp	r3, r2
 8000988:	d100      	bne.n	800098c <memset+0xa>
 800098a:	4770      	bx	lr
 800098c:	f803 1b01 	strb.w	r1, [r3], #1
 8000990:	e7f9      	b.n	8000986 <memset+0x4>
	...

08000994 <_close_r>:
 8000994:	b538      	push	{r3, r4, r5, lr}
 8000996:	2300      	movs	r3, #0
 8000998:	4d05      	ldr	r5, [pc, #20]	@ (80009b0 <_close_r+0x1c>)
 800099a:	4604      	mov	r4, r0
 800099c:	4608      	mov	r0, r1
 800099e:	602b      	str	r3, [r5, #0]
 80009a0:	f7ff fe44 	bl	800062c <_close>
 80009a4:	1c43      	adds	r3, r0, #1
 80009a6:	d102      	bne.n	80009ae <_close_r+0x1a>
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	b103      	cbz	r3, 80009ae <_close_r+0x1a>
 80009ac:	6023      	str	r3, [r4, #0]
 80009ae:	bd38      	pop	{r3, r4, r5, pc}
 80009b0:	200001cc 	.word	0x200001cc

080009b4 <_lseek_r>:
 80009b4:	b538      	push	{r3, r4, r5, lr}
 80009b6:	4604      	mov	r4, r0
 80009b8:	4d06      	ldr	r5, [pc, #24]	@ (80009d4 <_lseek_r+0x20>)
 80009ba:	4608      	mov	r0, r1
 80009bc:	4611      	mov	r1, r2
 80009be:	2200      	movs	r2, #0
 80009c0:	602a      	str	r2, [r5, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	f7ff fe59 	bl	800067a <_lseek>
 80009c8:	1c43      	adds	r3, r0, #1
 80009ca:	d102      	bne.n	80009d2 <_lseek_r+0x1e>
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	b103      	cbz	r3, 80009d2 <_lseek_r+0x1e>
 80009d0:	6023      	str	r3, [r4, #0]
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
 80009d4:	200001cc 	.word	0x200001cc

080009d8 <_read_r>:
 80009d8:	b538      	push	{r3, r4, r5, lr}
 80009da:	4604      	mov	r4, r0
 80009dc:	4d06      	ldr	r5, [pc, #24]	@ (80009f8 <_read_r+0x20>)
 80009de:	4608      	mov	r0, r1
 80009e0:	4611      	mov	r1, r2
 80009e2:	2200      	movs	r2, #0
 80009e4:	602a      	str	r2, [r5, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	f7ff fd9a 	bl	8000520 <_read>
 80009ec:	1c43      	adds	r3, r0, #1
 80009ee:	d102      	bne.n	80009f6 <_read_r+0x1e>
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	b103      	cbz	r3, 80009f6 <_read_r+0x1e>
 80009f4:	6023      	str	r3, [r4, #0]
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
 80009f8:	200001cc 	.word	0x200001cc

080009fc <_write_r>:
 80009fc:	b538      	push	{r3, r4, r5, lr}
 80009fe:	4604      	mov	r4, r0
 8000a00:	4d06      	ldr	r5, [pc, #24]	@ (8000a1c <_write_r+0x20>)
 8000a02:	4608      	mov	r0, r1
 8000a04:	4611      	mov	r1, r2
 8000a06:	2200      	movs	r2, #0
 8000a08:	602a      	str	r2, [r5, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	f7ff fd6c 	bl	80004e8 <_write>
 8000a10:	1c43      	adds	r3, r0, #1
 8000a12:	d102      	bne.n	8000a1a <_write_r+0x1e>
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	b103      	cbz	r3, 8000a1a <_write_r+0x1e>
 8000a18:	6023      	str	r3, [r4, #0]
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}
 8000a1c:	200001cc 	.word	0x200001cc

08000a20 <__errno>:
 8000a20:	4b01      	ldr	r3, [pc, #4]	@ (8000a28 <__errno+0x8>)
 8000a22:	6818      	ldr	r0, [r3, #0]
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000020 	.word	0x20000020

08000a2c <__libc_init_array>:
 8000a2c:	b570      	push	{r4, r5, r6, lr}
 8000a2e:	4d0d      	ldr	r5, [pc, #52]	@ (8000a64 <__libc_init_array+0x38>)
 8000a30:	2600      	movs	r6, #0
 8000a32:	4c0d      	ldr	r4, [pc, #52]	@ (8000a68 <__libc_init_array+0x3c>)
 8000a34:	1b64      	subs	r4, r4, r5
 8000a36:	10a4      	asrs	r4, r4, #2
 8000a38:	42a6      	cmp	r6, r4
 8000a3a:	d109      	bne.n	8000a50 <__libc_init_array+0x24>
 8000a3c:	4d0b      	ldr	r5, [pc, #44]	@ (8000a6c <__libc_init_array+0x40>)
 8000a3e:	2600      	movs	r6, #0
 8000a40:	4c0b      	ldr	r4, [pc, #44]	@ (8000a70 <__libc_init_array+0x44>)
 8000a42:	f000 fdc9 	bl	80015d8 <_init>
 8000a46:	1b64      	subs	r4, r4, r5
 8000a48:	10a4      	asrs	r4, r4, #2
 8000a4a:	42a6      	cmp	r6, r4
 8000a4c:	d105      	bne.n	8000a5a <__libc_init_array+0x2e>
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a54:	3601      	adds	r6, #1
 8000a56:	4798      	blx	r3
 8000a58:	e7ee      	b.n	8000a38 <__libc_init_array+0xc>
 8000a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5e:	3601      	adds	r6, #1
 8000a60:	4798      	blx	r3
 8000a62:	e7f2      	b.n	8000a4a <__libc_init_array+0x1e>
 8000a64:	08001a9c 	.word	0x08001a9c
 8000a68:	08001a9c 	.word	0x08001a9c
 8000a6c:	08001a9c 	.word	0x08001a9c
 8000a70:	08001aa0 	.word	0x08001aa0

08000a74 <__retarget_lock_init_recursive>:
 8000a74:	4770      	bx	lr

08000a76 <__retarget_lock_acquire_recursive>:
 8000a76:	4770      	bx	lr

08000a78 <__retarget_lock_release_recursive>:
 8000a78:	4770      	bx	lr
	...

08000a7c <_free_r>:
 8000a7c:	b538      	push	{r3, r4, r5, lr}
 8000a7e:	4605      	mov	r5, r0
 8000a80:	2900      	cmp	r1, #0
 8000a82:	d041      	beq.n	8000b08 <_free_r+0x8c>
 8000a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a88:	1f0c      	subs	r4, r1, #4
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bfb8      	it	lt
 8000a8e:	18e4      	addlt	r4, r4, r3
 8000a90:	f000 f8e0 	bl	8000c54 <__malloc_lock>
 8000a94:	4a1d      	ldr	r2, [pc, #116]	@ (8000b0c <_free_r+0x90>)
 8000a96:	6813      	ldr	r3, [r2, #0]
 8000a98:	b933      	cbnz	r3, 8000aa8 <_free_r+0x2c>
 8000a9a:	6063      	str	r3, [r4, #4]
 8000a9c:	6014      	str	r4, [r2, #0]
 8000a9e:	4628      	mov	r0, r5
 8000aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000aa4:	f000 b8dc 	b.w	8000c60 <__malloc_unlock>
 8000aa8:	42a3      	cmp	r3, r4
 8000aaa:	d908      	bls.n	8000abe <_free_r+0x42>
 8000aac:	6820      	ldr	r0, [r4, #0]
 8000aae:	1821      	adds	r1, r4, r0
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	bf01      	itttt	eq
 8000ab4:	6819      	ldreq	r1, [r3, #0]
 8000ab6:	685b      	ldreq	r3, [r3, #4]
 8000ab8:	1809      	addeq	r1, r1, r0
 8000aba:	6021      	streq	r1, [r4, #0]
 8000abc:	e7ed      	b.n	8000a9a <_free_r+0x1e>
 8000abe:	461a      	mov	r2, r3
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	b10b      	cbz	r3, 8000ac8 <_free_r+0x4c>
 8000ac4:	42a3      	cmp	r3, r4
 8000ac6:	d9fa      	bls.n	8000abe <_free_r+0x42>
 8000ac8:	6811      	ldr	r1, [r2, #0]
 8000aca:	1850      	adds	r0, r2, r1
 8000acc:	42a0      	cmp	r0, r4
 8000ace:	d10b      	bne.n	8000ae8 <_free_r+0x6c>
 8000ad0:	6820      	ldr	r0, [r4, #0]
 8000ad2:	4401      	add	r1, r0
 8000ad4:	1850      	adds	r0, r2, r1
 8000ad6:	6011      	str	r1, [r2, #0]
 8000ad8:	4283      	cmp	r3, r0
 8000ada:	d1e0      	bne.n	8000a9e <_free_r+0x22>
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4408      	add	r0, r1
 8000ae2:	6053      	str	r3, [r2, #4]
 8000ae4:	6010      	str	r0, [r2, #0]
 8000ae6:	e7da      	b.n	8000a9e <_free_r+0x22>
 8000ae8:	d902      	bls.n	8000af0 <_free_r+0x74>
 8000aea:	230c      	movs	r3, #12
 8000aec:	602b      	str	r3, [r5, #0]
 8000aee:	e7d6      	b.n	8000a9e <_free_r+0x22>
 8000af0:	6820      	ldr	r0, [r4, #0]
 8000af2:	1821      	adds	r1, r4, r0
 8000af4:	428b      	cmp	r3, r1
 8000af6:	bf02      	ittt	eq
 8000af8:	6819      	ldreq	r1, [r3, #0]
 8000afa:	685b      	ldreq	r3, [r3, #4]
 8000afc:	1809      	addeq	r1, r1, r0
 8000afe:	6063      	str	r3, [r4, #4]
 8000b00:	bf08      	it	eq
 8000b02:	6021      	streq	r1, [r4, #0]
 8000b04:	6054      	str	r4, [r2, #4]
 8000b06:	e7ca      	b.n	8000a9e <_free_r+0x22>
 8000b08:	bd38      	pop	{r3, r4, r5, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200001d8 	.word	0x200001d8

08000b10 <sbrk_aligned>:
 8000b10:	b570      	push	{r4, r5, r6, lr}
 8000b12:	4e0f      	ldr	r6, [pc, #60]	@ (8000b50 <sbrk_aligned+0x40>)
 8000b14:	460c      	mov	r4, r1
 8000b16:	4605      	mov	r5, r0
 8000b18:	6831      	ldr	r1, [r6, #0]
 8000b1a:	b911      	cbnz	r1, 8000b22 <sbrk_aligned+0x12>
 8000b1c:	f000 fcba 	bl	8001494 <_sbrk_r>
 8000b20:	6030      	str	r0, [r6, #0]
 8000b22:	4621      	mov	r1, r4
 8000b24:	4628      	mov	r0, r5
 8000b26:	f000 fcb5 	bl	8001494 <_sbrk_r>
 8000b2a:	1c43      	adds	r3, r0, #1
 8000b2c:	d103      	bne.n	8000b36 <sbrk_aligned+0x26>
 8000b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8000b32:	4620      	mov	r0, r4
 8000b34:	bd70      	pop	{r4, r5, r6, pc}
 8000b36:	1cc4      	adds	r4, r0, #3
 8000b38:	f024 0403 	bic.w	r4, r4, #3
 8000b3c:	42a0      	cmp	r0, r4
 8000b3e:	d0f8      	beq.n	8000b32 <sbrk_aligned+0x22>
 8000b40:	1a21      	subs	r1, r4, r0
 8000b42:	4628      	mov	r0, r5
 8000b44:	f000 fca6 	bl	8001494 <_sbrk_r>
 8000b48:	3001      	adds	r0, #1
 8000b4a:	d1f2      	bne.n	8000b32 <sbrk_aligned+0x22>
 8000b4c:	e7ef      	b.n	8000b2e <sbrk_aligned+0x1e>
 8000b4e:	bf00      	nop
 8000b50:	200001d4 	.word	0x200001d4

08000b54 <_malloc_r>:
 8000b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b58:	1ccd      	adds	r5, r1, #3
 8000b5a:	4606      	mov	r6, r0
 8000b5c:	f025 0503 	bic.w	r5, r5, #3
 8000b60:	3508      	adds	r5, #8
 8000b62:	2d0c      	cmp	r5, #12
 8000b64:	bf38      	it	cc
 8000b66:	250c      	movcc	r5, #12
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	db01      	blt.n	8000b70 <_malloc_r+0x1c>
 8000b6c:	42a9      	cmp	r1, r5
 8000b6e:	d904      	bls.n	8000b7a <_malloc_r+0x26>
 8000b70:	230c      	movs	r3, #12
 8000b72:	6033      	str	r3, [r6, #0]
 8000b74:	2000      	movs	r0, #0
 8000b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c50 <_malloc_r+0xfc>
 8000b7e:	f000 f869 	bl	8000c54 <__malloc_lock>
 8000b82:	f8d8 3000 	ldr.w	r3, [r8]
 8000b86:	461c      	mov	r4, r3
 8000b88:	bb44      	cbnz	r4, 8000bdc <_malloc_r+0x88>
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	f7ff ffbf 	bl	8000b10 <sbrk_aligned>
 8000b92:	1c43      	adds	r3, r0, #1
 8000b94:	4604      	mov	r4, r0
 8000b96:	d158      	bne.n	8000c4a <_malloc_r+0xf6>
 8000b98:	f8d8 4000 	ldr.w	r4, [r8]
 8000b9c:	4627      	mov	r7, r4
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d143      	bne.n	8000c2a <_malloc_r+0xd6>
 8000ba2:	2c00      	cmp	r4, #0
 8000ba4:	d04b      	beq.n	8000c3e <_malloc_r+0xea>
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	4639      	mov	r1, r7
 8000baa:	4630      	mov	r0, r6
 8000bac:	eb04 0903 	add.w	r9, r4, r3
 8000bb0:	f000 fc70 	bl	8001494 <_sbrk_r>
 8000bb4:	4581      	cmp	r9, r0
 8000bb6:	d142      	bne.n	8000c3e <_malloc_r+0xea>
 8000bb8:	6821      	ldr	r1, [r4, #0]
 8000bba:	4630      	mov	r0, r6
 8000bbc:	1a6d      	subs	r5, r5, r1
 8000bbe:	4629      	mov	r1, r5
 8000bc0:	f7ff ffa6 	bl	8000b10 <sbrk_aligned>
 8000bc4:	3001      	adds	r0, #1
 8000bc6:	d03a      	beq.n	8000c3e <_malloc_r+0xea>
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	442b      	add	r3, r5
 8000bcc:	6023      	str	r3, [r4, #0]
 8000bce:	f8d8 3000 	ldr.w	r3, [r8]
 8000bd2:	685a      	ldr	r2, [r3, #4]
 8000bd4:	bb62      	cbnz	r2, 8000c30 <_malloc_r+0xdc>
 8000bd6:	f8c8 7000 	str.w	r7, [r8]
 8000bda:	e00f      	b.n	8000bfc <_malloc_r+0xa8>
 8000bdc:	6822      	ldr	r2, [r4, #0]
 8000bde:	1b52      	subs	r2, r2, r5
 8000be0:	d420      	bmi.n	8000c24 <_malloc_r+0xd0>
 8000be2:	2a0b      	cmp	r2, #11
 8000be4:	d917      	bls.n	8000c16 <_malloc_r+0xc2>
 8000be6:	1961      	adds	r1, r4, r5
 8000be8:	42a3      	cmp	r3, r4
 8000bea:	6025      	str	r5, [r4, #0]
 8000bec:	bf18      	it	ne
 8000bee:	6059      	strne	r1, [r3, #4]
 8000bf0:	6863      	ldr	r3, [r4, #4]
 8000bf2:	bf08      	it	eq
 8000bf4:	f8c8 1000 	streq.w	r1, [r8]
 8000bf8:	5162      	str	r2, [r4, r5]
 8000bfa:	604b      	str	r3, [r1, #4]
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f000 f82f 	bl	8000c60 <__malloc_unlock>
 8000c02:	f104 000b 	add.w	r0, r4, #11
 8000c06:	1d23      	adds	r3, r4, #4
 8000c08:	f020 0007 	bic.w	r0, r0, #7
 8000c0c:	1ac2      	subs	r2, r0, r3
 8000c0e:	bf1c      	itt	ne
 8000c10:	1a1b      	subne	r3, r3, r0
 8000c12:	50a3      	strne	r3, [r4, r2]
 8000c14:	e7af      	b.n	8000b76 <_malloc_r+0x22>
 8000c16:	6862      	ldr	r2, [r4, #4]
 8000c18:	42a3      	cmp	r3, r4
 8000c1a:	bf0c      	ite	eq
 8000c1c:	f8c8 2000 	streq.w	r2, [r8]
 8000c20:	605a      	strne	r2, [r3, #4]
 8000c22:	e7eb      	b.n	8000bfc <_malloc_r+0xa8>
 8000c24:	4623      	mov	r3, r4
 8000c26:	6864      	ldr	r4, [r4, #4]
 8000c28:	e7ae      	b.n	8000b88 <_malloc_r+0x34>
 8000c2a:	463c      	mov	r4, r7
 8000c2c:	687f      	ldr	r7, [r7, #4]
 8000c2e:	e7b6      	b.n	8000b9e <_malloc_r+0x4a>
 8000c30:	461a      	mov	r2, r3
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d1fb      	bne.n	8000c30 <_malloc_r+0xdc>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	6053      	str	r3, [r2, #4]
 8000c3c:	e7de      	b.n	8000bfc <_malloc_r+0xa8>
 8000c3e:	230c      	movs	r3, #12
 8000c40:	4630      	mov	r0, r6
 8000c42:	6033      	str	r3, [r6, #0]
 8000c44:	f000 f80c 	bl	8000c60 <__malloc_unlock>
 8000c48:	e794      	b.n	8000b74 <_malloc_r+0x20>
 8000c4a:	6005      	str	r5, [r0, #0]
 8000c4c:	e7d6      	b.n	8000bfc <_malloc_r+0xa8>
 8000c4e:	bf00      	nop
 8000c50:	200001d8 	.word	0x200001d8

08000c54 <__malloc_lock>:
 8000c54:	4801      	ldr	r0, [pc, #4]	@ (8000c5c <__malloc_lock+0x8>)
 8000c56:	f7ff bf0e 	b.w	8000a76 <__retarget_lock_acquire_recursive>
 8000c5a:	bf00      	nop
 8000c5c:	200001d0 	.word	0x200001d0

08000c60 <__malloc_unlock>:
 8000c60:	4801      	ldr	r0, [pc, #4]	@ (8000c68 <__malloc_unlock+0x8>)
 8000c62:	f7ff bf09 	b.w	8000a78 <__retarget_lock_release_recursive>
 8000c66:	bf00      	nop
 8000c68:	200001d0 	.word	0x200001d0

08000c6c <__sfputc_r>:
 8000c6c:	6893      	ldr	r3, [r2, #8]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	6093      	str	r3, [r2, #8]
 8000c74:	b410      	push	{r4}
 8000c76:	da08      	bge.n	8000c8a <__sfputc_r+0x1e>
 8000c78:	6994      	ldr	r4, [r2, #24]
 8000c7a:	42a3      	cmp	r3, r4
 8000c7c:	db01      	blt.n	8000c82 <__sfputc_r+0x16>
 8000c7e:	290a      	cmp	r1, #10
 8000c80:	d103      	bne.n	8000c8a <__sfputc_r+0x1e>
 8000c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c86:	f000 bb71 	b.w	800136c <__swbuf_r>
 8000c8a:	6813      	ldr	r3, [r2, #0]
 8000c8c:	1c58      	adds	r0, r3, #1
 8000c8e:	6010      	str	r0, [r2, #0]
 8000c90:	4608      	mov	r0, r1
 8000c92:	7019      	strb	r1, [r3, #0]
 8000c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <__sfputs_r>:
 8000c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9c:	4606      	mov	r6, r0
 8000c9e:	460f      	mov	r7, r1
 8000ca0:	4614      	mov	r4, r2
 8000ca2:	18d5      	adds	r5, r2, r3
 8000ca4:	42ac      	cmp	r4, r5
 8000ca6:	d101      	bne.n	8000cac <__sfputs_r+0x12>
 8000ca8:	2000      	movs	r0, #0
 8000caa:	e007      	b.n	8000cbc <__sfputs_r+0x22>
 8000cac:	463a      	mov	r2, r7
 8000cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	f7ff ffda 	bl	8000c6c <__sfputc_r>
 8000cb8:	1c43      	adds	r3, r0, #1
 8000cba:	d1f3      	bne.n	8000ca4 <__sfputs_r+0xa>
 8000cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000cc0 <_vfiprintf_r>:
 8000cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc4:	460d      	mov	r5, r1
 8000cc6:	b09d      	sub	sp, #116	@ 0x74
 8000cc8:	4614      	mov	r4, r2
 8000cca:	4698      	mov	r8, r3
 8000ccc:	4606      	mov	r6, r0
 8000cce:	b118      	cbz	r0, 8000cd8 <_vfiprintf_r+0x18>
 8000cd0:	6a03      	ldr	r3, [r0, #32]
 8000cd2:	b90b      	cbnz	r3, 8000cd8 <_vfiprintf_r+0x18>
 8000cd4:	f7ff fdca 	bl	800086c <__sinit>
 8000cd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000cda:	07d9      	lsls	r1, r3, #31
 8000cdc:	d405      	bmi.n	8000cea <_vfiprintf_r+0x2a>
 8000cde:	89ab      	ldrh	r3, [r5, #12]
 8000ce0:	059a      	lsls	r2, r3, #22
 8000ce2:	d402      	bmi.n	8000cea <_vfiprintf_r+0x2a>
 8000ce4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ce6:	f7ff fec6 	bl	8000a76 <__retarget_lock_acquire_recursive>
 8000cea:	89ab      	ldrh	r3, [r5, #12]
 8000cec:	071b      	lsls	r3, r3, #28
 8000cee:	d501      	bpl.n	8000cf4 <_vfiprintf_r+0x34>
 8000cf0:	692b      	ldr	r3, [r5, #16]
 8000cf2:	b99b      	cbnz	r3, 8000d1c <_vfiprintf_r+0x5c>
 8000cf4:	4629      	mov	r1, r5
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	f000 fb76 	bl	80013e8 <__swsetup_r>
 8000cfc:	b170      	cbz	r0, 8000d1c <_vfiprintf_r+0x5c>
 8000cfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d00:	07dc      	lsls	r4, r3, #31
 8000d02:	d504      	bpl.n	8000d0e <_vfiprintf_r+0x4e>
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	b01d      	add	sp, #116	@ 0x74
 8000d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d0e:	89ab      	ldrh	r3, [r5, #12]
 8000d10:	0598      	lsls	r0, r3, #22
 8000d12:	d4f7      	bmi.n	8000d04 <_vfiprintf_r+0x44>
 8000d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d16:	f7ff feaf 	bl	8000a78 <__retarget_lock_release_recursive>
 8000d1a:	e7f3      	b.n	8000d04 <_vfiprintf_r+0x44>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d22:	f04f 0901 	mov.w	r9, #1
 8000d26:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8000edc <_vfiprintf_r+0x21c>
 8000d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d2c:	2320      	movs	r3, #32
 8000d2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d32:	2330      	movs	r3, #48	@ 0x30
 8000d34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d38:	4623      	mov	r3, r4
 8000d3a:	469a      	mov	sl, r3
 8000d3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d40:	b10a      	cbz	r2, 8000d46 <_vfiprintf_r+0x86>
 8000d42:	2a25      	cmp	r2, #37	@ 0x25
 8000d44:	d1f9      	bne.n	8000d3a <_vfiprintf_r+0x7a>
 8000d46:	ebba 0b04 	subs.w	fp, sl, r4
 8000d4a:	d00b      	beq.n	8000d64 <_vfiprintf_r+0xa4>
 8000d4c:	465b      	mov	r3, fp
 8000d4e:	4622      	mov	r2, r4
 8000d50:	4629      	mov	r1, r5
 8000d52:	4630      	mov	r0, r6
 8000d54:	f7ff ffa1 	bl	8000c9a <__sfputs_r>
 8000d58:	3001      	adds	r0, #1
 8000d5a:	f000 80a7 	beq.w	8000eac <_vfiprintf_r+0x1ec>
 8000d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d60:	445a      	add	r2, fp
 8000d62:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d64:	f89a 3000 	ldrb.w	r3, [sl]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 809f 	beq.w	8000eac <_vfiprintf_r+0x1ec>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	f10a 0a01 	add.w	sl, sl, #1
 8000d78:	9304      	str	r3, [sp, #16]
 8000d7a:	9307      	str	r3, [sp, #28]
 8000d7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d80:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d86:	4654      	mov	r4, sl
 8000d88:	2205      	movs	r2, #5
 8000d8a:	4854      	ldr	r0, [pc, #336]	@ (8000edc <_vfiprintf_r+0x21c>)
 8000d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d90:	f000 fb90 	bl	80014b4 <memchr>
 8000d94:	9a04      	ldr	r2, [sp, #16]
 8000d96:	b9d8      	cbnz	r0, 8000dd0 <_vfiprintf_r+0x110>
 8000d98:	06d1      	lsls	r1, r2, #27
 8000d9a:	bf44      	itt	mi
 8000d9c:	2320      	movmi	r3, #32
 8000d9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000da2:	0713      	lsls	r3, r2, #28
 8000da4:	bf44      	itt	mi
 8000da6:	232b      	movmi	r3, #43	@ 0x2b
 8000da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000dac:	f89a 3000 	ldrb.w	r3, [sl]
 8000db0:	2b2a      	cmp	r3, #42	@ 0x2a
 8000db2:	d015      	beq.n	8000de0 <_vfiprintf_r+0x120>
 8000db4:	9a07      	ldr	r2, [sp, #28]
 8000db6:	4654      	mov	r4, sl
 8000db8:	2000      	movs	r0, #0
 8000dba:	f04f 0c0a 	mov.w	ip, #10
 8000dbe:	4621      	mov	r1, r4
 8000dc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dc4:	3b30      	subs	r3, #48	@ 0x30
 8000dc6:	2b09      	cmp	r3, #9
 8000dc8:	d94b      	bls.n	8000e62 <_vfiprintf_r+0x1a2>
 8000dca:	b1b0      	cbz	r0, 8000dfa <_vfiprintf_r+0x13a>
 8000dcc:	9207      	str	r2, [sp, #28]
 8000dce:	e014      	b.n	8000dfa <_vfiprintf_r+0x13a>
 8000dd0:	eba0 0308 	sub.w	r3, r0, r8
 8000dd4:	46a2      	mov	sl, r4
 8000dd6:	fa09 f303 	lsl.w	r3, r9, r3
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	9304      	str	r3, [sp, #16]
 8000dde:	e7d2      	b.n	8000d86 <_vfiprintf_r+0xc6>
 8000de0:	9b03      	ldr	r3, [sp, #12]
 8000de2:	1d19      	adds	r1, r3, #4
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	9103      	str	r1, [sp, #12]
 8000dea:	bfbb      	ittet	lt
 8000dec:	425b      	neglt	r3, r3
 8000dee:	f042 0202 	orrlt.w	r2, r2, #2
 8000df2:	9307      	strge	r3, [sp, #28]
 8000df4:	9307      	strlt	r3, [sp, #28]
 8000df6:	bfb8      	it	lt
 8000df8:	9204      	strlt	r2, [sp, #16]
 8000dfa:	7823      	ldrb	r3, [r4, #0]
 8000dfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8000dfe:	d10a      	bne.n	8000e16 <_vfiprintf_r+0x156>
 8000e00:	7863      	ldrb	r3, [r4, #1]
 8000e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e04:	d132      	bne.n	8000e6c <_vfiprintf_r+0x1ac>
 8000e06:	9b03      	ldr	r3, [sp, #12]
 8000e08:	3402      	adds	r4, #2
 8000e0a:	1d1a      	adds	r2, r3, #4
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e12:	9203      	str	r2, [sp, #12]
 8000e14:	9305      	str	r3, [sp, #20]
 8000e16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000eec <_vfiprintf_r+0x22c>
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	7821      	ldrb	r1, [r4, #0]
 8000e1e:	4650      	mov	r0, sl
 8000e20:	f000 fb48 	bl	80014b4 <memchr>
 8000e24:	b138      	cbz	r0, 8000e36 <_vfiprintf_r+0x176>
 8000e26:	eba0 000a 	sub.w	r0, r0, sl
 8000e2a:	2240      	movs	r2, #64	@ 0x40
 8000e2c:	9b04      	ldr	r3, [sp, #16]
 8000e2e:	3401      	adds	r4, #1
 8000e30:	4082      	lsls	r2, r0
 8000e32:	4313      	orrs	r3, r2
 8000e34:	9304      	str	r3, [sp, #16]
 8000e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e3a:	2206      	movs	r2, #6
 8000e3c:	4828      	ldr	r0, [pc, #160]	@ (8000ee0 <_vfiprintf_r+0x220>)
 8000e3e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000e42:	f000 fb37 	bl	80014b4 <memchr>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d03f      	beq.n	8000eca <_vfiprintf_r+0x20a>
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <_vfiprintf_r+0x224>)
 8000e4c:	bb1b      	cbnz	r3, 8000e96 <_vfiprintf_r+0x1d6>
 8000e4e:	9b03      	ldr	r3, [sp, #12]
 8000e50:	3307      	adds	r3, #7
 8000e52:	f023 0307 	bic.w	r3, r3, #7
 8000e56:	3308      	adds	r3, #8
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e5c:	443b      	add	r3, r7
 8000e5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e60:	e76a      	b.n	8000d38 <_vfiprintf_r+0x78>
 8000e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e66:	460c      	mov	r4, r1
 8000e68:	2001      	movs	r0, #1
 8000e6a:	e7a8      	b.n	8000dbe <_vfiprintf_r+0xfe>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	3401      	adds	r4, #1
 8000e70:	f04f 0c0a 	mov.w	ip, #10
 8000e74:	4619      	mov	r1, r3
 8000e76:	9305      	str	r3, [sp, #20]
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e7e:	3a30      	subs	r2, #48	@ 0x30
 8000e80:	2a09      	cmp	r2, #9
 8000e82:	d903      	bls.n	8000e8c <_vfiprintf_r+0x1cc>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0c6      	beq.n	8000e16 <_vfiprintf_r+0x156>
 8000e88:	9105      	str	r1, [sp, #20]
 8000e8a:	e7c4      	b.n	8000e16 <_vfiprintf_r+0x156>
 8000e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e90:	4604      	mov	r4, r0
 8000e92:	2301      	movs	r3, #1
 8000e94:	e7f0      	b.n	8000e78 <_vfiprintf_r+0x1b8>
 8000e96:	ab03      	add	r3, sp, #12
 8000e98:	462a      	mov	r2, r5
 8000e9a:	a904      	add	r1, sp, #16
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <_vfiprintf_r+0x228>)
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4607      	mov	r7, r0
 8000ea8:	1c78      	adds	r0, r7, #1
 8000eaa:	d1d6      	bne.n	8000e5a <_vfiprintf_r+0x19a>
 8000eac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000eae:	07d9      	lsls	r1, r3, #31
 8000eb0:	d405      	bmi.n	8000ebe <_vfiprintf_r+0x1fe>
 8000eb2:	89ab      	ldrh	r3, [r5, #12]
 8000eb4:	059a      	lsls	r2, r3, #22
 8000eb6:	d402      	bmi.n	8000ebe <_vfiprintf_r+0x1fe>
 8000eb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000eba:	f7ff fddd 	bl	8000a78 <__retarget_lock_release_recursive>
 8000ebe:	89ab      	ldrh	r3, [r5, #12]
 8000ec0:	065b      	lsls	r3, r3, #25
 8000ec2:	f53f af1f 	bmi.w	8000d04 <_vfiprintf_r+0x44>
 8000ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ec8:	e71e      	b.n	8000d08 <_vfiprintf_r+0x48>
 8000eca:	ab03      	add	r3, sp, #12
 8000ecc:	462a      	mov	r2, r5
 8000ece:	a904      	add	r1, sp, #16
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <_vfiprintf_r+0x228>)
 8000ed6:	f000 f87d 	bl	8000fd4 <_printf_i>
 8000eda:	e7e4      	b.n	8000ea6 <_vfiprintf_r+0x1e6>
 8000edc:	08001a68 	.word	0x08001a68
 8000ee0:	08001a72 	.word	0x08001a72
 8000ee4:	00000000 	.word	0x00000000
 8000ee8:	08000c9b 	.word	0x08000c9b
 8000eec:	08001a6e 	.word	0x08001a6e

08000ef0 <_printf_common>:
 8000ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ef4:	4616      	mov	r6, r2
 8000ef6:	4698      	mov	r8, r3
 8000ef8:	688a      	ldr	r2, [r1, #8]
 8000efa:	4607      	mov	r7, r0
 8000efc:	690b      	ldr	r3, [r1, #16]
 8000efe:	460c      	mov	r4, r1
 8000f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f04:	4293      	cmp	r3, r2
 8000f06:	bfb8      	it	lt
 8000f08:	4613      	movlt	r3, r2
 8000f0a:	6033      	str	r3, [r6, #0]
 8000f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f10:	b10a      	cbz	r2, 8000f16 <_printf_common+0x26>
 8000f12:	3301      	adds	r3, #1
 8000f14:	6033      	str	r3, [r6, #0]
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	0699      	lsls	r1, r3, #26
 8000f1a:	bf42      	ittt	mi
 8000f1c:	6833      	ldrmi	r3, [r6, #0]
 8000f1e:	3302      	addmi	r3, #2
 8000f20:	6033      	strmi	r3, [r6, #0]
 8000f22:	6825      	ldr	r5, [r4, #0]
 8000f24:	f015 0506 	ands.w	r5, r5, #6
 8000f28:	d106      	bne.n	8000f38 <_printf_common+0x48>
 8000f2a:	f104 0a19 	add.w	sl, r4, #25
 8000f2e:	68e3      	ldr	r3, [r4, #12]
 8000f30:	6832      	ldr	r2, [r6, #0]
 8000f32:	1a9b      	subs	r3, r3, r2
 8000f34:	42ab      	cmp	r3, r5
 8000f36:	dc2b      	bgt.n	8000f90 <_printf_common+0xa0>
 8000f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000f3c:	6822      	ldr	r2, [r4, #0]
 8000f3e:	3b00      	subs	r3, #0
 8000f40:	bf18      	it	ne
 8000f42:	2301      	movne	r3, #1
 8000f44:	0692      	lsls	r2, r2, #26
 8000f46:	d430      	bmi.n	8000faa <_printf_common+0xba>
 8000f48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000f4c:	4641      	mov	r1, r8
 8000f4e:	4638      	mov	r0, r7
 8000f50:	47c8      	blx	r9
 8000f52:	3001      	adds	r0, #1
 8000f54:	d023      	beq.n	8000f9e <_printf_common+0xae>
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	341a      	adds	r4, #26
 8000f5a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8000f5e:	f003 0306 	and.w	r3, r3, #6
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf0a      	itet	eq
 8000f66:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8000f6a:	2500      	movne	r5, #0
 8000f6c:	6833      	ldreq	r3, [r6, #0]
 8000f6e:	f04f 0600 	mov.w	r6, #0
 8000f72:	bf08      	it	eq
 8000f74:	1aed      	subeq	r5, r5, r3
 8000f76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000f7a:	bf08      	it	eq
 8000f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f80:	4293      	cmp	r3, r2
 8000f82:	bfc4      	itt	gt
 8000f84:	1a9b      	subgt	r3, r3, r2
 8000f86:	18ed      	addgt	r5, r5, r3
 8000f88:	42b5      	cmp	r5, r6
 8000f8a:	d11a      	bne.n	8000fc2 <_printf_common+0xd2>
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	e008      	b.n	8000fa2 <_printf_common+0xb2>
 8000f90:	2301      	movs	r3, #1
 8000f92:	4652      	mov	r2, sl
 8000f94:	4641      	mov	r1, r8
 8000f96:	4638      	mov	r0, r7
 8000f98:	47c8      	blx	r9
 8000f9a:	3001      	adds	r0, #1
 8000f9c:	d103      	bne.n	8000fa6 <_printf_common+0xb6>
 8000f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	3501      	adds	r5, #1
 8000fa8:	e7c1      	b.n	8000f2e <_printf_common+0x3e>
 8000faa:	18e1      	adds	r1, r4, r3
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	2030      	movs	r0, #48	@ 0x30
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	4422      	add	r2, r4
 8000fb4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000fbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000fc0:	e7c2      	b.n	8000f48 <_printf_common+0x58>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	4622      	mov	r2, r4
 8000fc6:	4641      	mov	r1, r8
 8000fc8:	4638      	mov	r0, r7
 8000fca:	47c8      	blx	r9
 8000fcc:	3001      	adds	r0, #1
 8000fce:	d0e6      	beq.n	8000f9e <_printf_common+0xae>
 8000fd0:	3601      	adds	r6, #1
 8000fd2:	e7d9      	b.n	8000f88 <_printf_common+0x98>

08000fd4 <_printf_i>:
 8000fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd8:	7e0f      	ldrb	r7, [r1, #24]
 8000fda:	4691      	mov	r9, r2
 8000fdc:	4680      	mov	r8, r0
 8000fde:	460c      	mov	r4, r1
 8000fe0:	2f78      	cmp	r7, #120	@ 0x78
 8000fe2:	469a      	mov	sl, r3
 8000fe4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000fea:	d807      	bhi.n	8000ffc <_printf_i+0x28>
 8000fec:	2f62      	cmp	r7, #98	@ 0x62
 8000fee:	d80a      	bhi.n	8001006 <_printf_i+0x32>
 8000ff0:	2f00      	cmp	r7, #0
 8000ff2:	f000 80d2 	beq.w	800119a <_printf_i+0x1c6>
 8000ff6:	2f58      	cmp	r7, #88	@ 0x58
 8000ff8:	f000 80b9 	beq.w	800116e <_printf_i+0x19a>
 8000ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001004:	e03a      	b.n	800107c <_printf_i+0xa8>
 8001006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800100a:	2b15      	cmp	r3, #21
 800100c:	d8f6      	bhi.n	8000ffc <_printf_i+0x28>
 800100e:	a101      	add	r1, pc, #4	@ (adr r1, 8001014 <_printf_i+0x40>)
 8001010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001014:	0800106d 	.word	0x0800106d
 8001018:	08001081 	.word	0x08001081
 800101c:	08000ffd 	.word	0x08000ffd
 8001020:	08000ffd 	.word	0x08000ffd
 8001024:	08000ffd 	.word	0x08000ffd
 8001028:	08000ffd 	.word	0x08000ffd
 800102c:	08001081 	.word	0x08001081
 8001030:	08000ffd 	.word	0x08000ffd
 8001034:	08000ffd 	.word	0x08000ffd
 8001038:	08000ffd 	.word	0x08000ffd
 800103c:	08000ffd 	.word	0x08000ffd
 8001040:	08001181 	.word	0x08001181
 8001044:	080010ab 	.word	0x080010ab
 8001048:	0800113b 	.word	0x0800113b
 800104c:	08000ffd 	.word	0x08000ffd
 8001050:	08000ffd 	.word	0x08000ffd
 8001054:	080011a3 	.word	0x080011a3
 8001058:	08000ffd 	.word	0x08000ffd
 800105c:	080010ab 	.word	0x080010ab
 8001060:	08000ffd 	.word	0x08000ffd
 8001064:	08000ffd 	.word	0x08000ffd
 8001068:	08001143 	.word	0x08001143
 800106c:	6833      	ldr	r3, [r6, #0]
 800106e:	1d1a      	adds	r2, r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6032      	str	r2, [r6, #0]
 8001074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800107c:	2301      	movs	r3, #1
 800107e:	e09d      	b.n	80011bc <_printf_i+0x1e8>
 8001080:	6833      	ldr	r3, [r6, #0]
 8001082:	6820      	ldr	r0, [r4, #0]
 8001084:	1d19      	adds	r1, r3, #4
 8001086:	6031      	str	r1, [r6, #0]
 8001088:	0606      	lsls	r6, r0, #24
 800108a:	d501      	bpl.n	8001090 <_printf_i+0xbc>
 800108c:	681d      	ldr	r5, [r3, #0]
 800108e:	e003      	b.n	8001098 <_printf_i+0xc4>
 8001090:	0645      	lsls	r5, r0, #25
 8001092:	d5fb      	bpl.n	800108c <_printf_i+0xb8>
 8001094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001098:	2d00      	cmp	r5, #0
 800109a:	da03      	bge.n	80010a4 <_printf_i+0xd0>
 800109c:	232d      	movs	r3, #45	@ 0x2d
 800109e:	426d      	negs	r5, r5
 80010a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010a4:	4859      	ldr	r0, [pc, #356]	@ (800120c <_printf_i+0x238>)
 80010a6:	230a      	movs	r3, #10
 80010a8:	e011      	b.n	80010ce <_printf_i+0xfa>
 80010aa:	6821      	ldr	r1, [r4, #0]
 80010ac:	6833      	ldr	r3, [r6, #0]
 80010ae:	0608      	lsls	r0, r1, #24
 80010b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80010b4:	d402      	bmi.n	80010bc <_printf_i+0xe8>
 80010b6:	0649      	lsls	r1, r1, #25
 80010b8:	bf48      	it	mi
 80010ba:	b2ad      	uxthmi	r5, r5
 80010bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80010be:	6033      	str	r3, [r6, #0]
 80010c0:	4852      	ldr	r0, [pc, #328]	@ (800120c <_printf_i+0x238>)
 80010c2:	bf14      	ite	ne
 80010c4:	230a      	movne	r3, #10
 80010c6:	2308      	moveq	r3, #8
 80010c8:	2100      	movs	r1, #0
 80010ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80010ce:	6866      	ldr	r6, [r4, #4]
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	60a6      	str	r6, [r4, #8]
 80010d4:	bfa2      	ittt	ge
 80010d6:	6821      	ldrge	r1, [r4, #0]
 80010d8:	f021 0104 	bicge.w	r1, r1, #4
 80010dc:	6021      	strge	r1, [r4, #0]
 80010de:	b90d      	cbnz	r5, 80010e4 <_printf_i+0x110>
 80010e0:	2e00      	cmp	r6, #0
 80010e2:	d04b      	beq.n	800117c <_printf_i+0x1a8>
 80010e4:	4616      	mov	r6, r2
 80010e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80010ea:	fb03 5711 	mls	r7, r3, r1, r5
 80010ee:	5dc7      	ldrb	r7, [r0, r7]
 80010f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80010f4:	462f      	mov	r7, r5
 80010f6:	460d      	mov	r5, r1
 80010f8:	42bb      	cmp	r3, r7
 80010fa:	d9f4      	bls.n	80010e6 <_printf_i+0x112>
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d10b      	bne.n	8001118 <_printf_i+0x144>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	07df      	lsls	r7, r3, #31
 8001104:	d508      	bpl.n	8001118 <_printf_i+0x144>
 8001106:	6923      	ldr	r3, [r4, #16]
 8001108:	6861      	ldr	r1, [r4, #4]
 800110a:	4299      	cmp	r1, r3
 800110c:	bfde      	ittt	le
 800110e:	2330      	movle	r3, #48	@ 0x30
 8001110:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001114:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001118:	1b92      	subs	r2, r2, r6
 800111a:	6122      	str	r2, [r4, #16]
 800111c:	464b      	mov	r3, r9
 800111e:	aa03      	add	r2, sp, #12
 8001120:	4621      	mov	r1, r4
 8001122:	4640      	mov	r0, r8
 8001124:	f8cd a000 	str.w	sl, [sp]
 8001128:	f7ff fee2 	bl	8000ef0 <_printf_common>
 800112c:	3001      	adds	r0, #1
 800112e:	d14a      	bne.n	80011c6 <_printf_i+0x1f2>
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	b004      	add	sp, #16
 8001136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113a:	6823      	ldr	r3, [r4, #0]
 800113c:	f043 0320 	orr.w	r3, r3, #32
 8001140:	6023      	str	r3, [r4, #0]
 8001142:	2778      	movs	r7, #120	@ 0x78
 8001144:	4832      	ldr	r0, [pc, #200]	@ (8001210 <_printf_i+0x23c>)
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800114c:	061f      	lsls	r7, r3, #24
 800114e:	6831      	ldr	r1, [r6, #0]
 8001150:	f851 5b04 	ldr.w	r5, [r1], #4
 8001154:	d402      	bmi.n	800115c <_printf_i+0x188>
 8001156:	065f      	lsls	r7, r3, #25
 8001158:	bf48      	it	mi
 800115a:	b2ad      	uxthmi	r5, r5
 800115c:	6031      	str	r1, [r6, #0]
 800115e:	07d9      	lsls	r1, r3, #31
 8001160:	bf44      	itt	mi
 8001162:	f043 0320 	orrmi.w	r3, r3, #32
 8001166:	6023      	strmi	r3, [r4, #0]
 8001168:	b11d      	cbz	r5, 8001172 <_printf_i+0x19e>
 800116a:	2310      	movs	r3, #16
 800116c:	e7ac      	b.n	80010c8 <_printf_i+0xf4>
 800116e:	4827      	ldr	r0, [pc, #156]	@ (800120c <_printf_i+0x238>)
 8001170:	e7e9      	b.n	8001146 <_printf_i+0x172>
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	f023 0320 	bic.w	r3, r3, #32
 8001178:	6023      	str	r3, [r4, #0]
 800117a:	e7f6      	b.n	800116a <_printf_i+0x196>
 800117c:	4616      	mov	r6, r2
 800117e:	e7bd      	b.n	80010fc <_printf_i+0x128>
 8001180:	6833      	ldr	r3, [r6, #0]
 8001182:	6825      	ldr	r5, [r4, #0]
 8001184:	1d18      	adds	r0, r3, #4
 8001186:	6961      	ldr	r1, [r4, #20]
 8001188:	6030      	str	r0, [r6, #0]
 800118a:	062e      	lsls	r6, r5, #24
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	d501      	bpl.n	8001194 <_printf_i+0x1c0>
 8001190:	6019      	str	r1, [r3, #0]
 8001192:	e002      	b.n	800119a <_printf_i+0x1c6>
 8001194:	0668      	lsls	r0, r5, #25
 8001196:	d5fb      	bpl.n	8001190 <_printf_i+0x1bc>
 8001198:	8019      	strh	r1, [r3, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	4616      	mov	r6, r2
 800119e:	6123      	str	r3, [r4, #16]
 80011a0:	e7bc      	b.n	800111c <_printf_i+0x148>
 80011a2:	6833      	ldr	r3, [r6, #0]
 80011a4:	2100      	movs	r1, #0
 80011a6:	1d1a      	adds	r2, r3, #4
 80011a8:	6032      	str	r2, [r6, #0]
 80011aa:	681e      	ldr	r6, [r3, #0]
 80011ac:	6862      	ldr	r2, [r4, #4]
 80011ae:	4630      	mov	r0, r6
 80011b0:	f000 f980 	bl	80014b4 <memchr>
 80011b4:	b108      	cbz	r0, 80011ba <_printf_i+0x1e6>
 80011b6:	1b80      	subs	r0, r0, r6
 80011b8:	6060      	str	r0, [r4, #4]
 80011ba:	6863      	ldr	r3, [r4, #4]
 80011bc:	6123      	str	r3, [r4, #16]
 80011be:	2300      	movs	r3, #0
 80011c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80011c4:	e7aa      	b.n	800111c <_printf_i+0x148>
 80011c6:	6923      	ldr	r3, [r4, #16]
 80011c8:	4632      	mov	r2, r6
 80011ca:	4649      	mov	r1, r9
 80011cc:	4640      	mov	r0, r8
 80011ce:	47d0      	blx	sl
 80011d0:	3001      	adds	r0, #1
 80011d2:	d0ad      	beq.n	8001130 <_printf_i+0x15c>
 80011d4:	6823      	ldr	r3, [r4, #0]
 80011d6:	079b      	lsls	r3, r3, #30
 80011d8:	d413      	bmi.n	8001202 <_printf_i+0x22e>
 80011da:	68e0      	ldr	r0, [r4, #12]
 80011dc:	9b03      	ldr	r3, [sp, #12]
 80011de:	4298      	cmp	r0, r3
 80011e0:	bfb8      	it	lt
 80011e2:	4618      	movlt	r0, r3
 80011e4:	e7a6      	b.n	8001134 <_printf_i+0x160>
 80011e6:	2301      	movs	r3, #1
 80011e8:	4632      	mov	r2, r6
 80011ea:	4649      	mov	r1, r9
 80011ec:	4640      	mov	r0, r8
 80011ee:	47d0      	blx	sl
 80011f0:	3001      	adds	r0, #1
 80011f2:	d09d      	beq.n	8001130 <_printf_i+0x15c>
 80011f4:	3501      	adds	r5, #1
 80011f6:	68e3      	ldr	r3, [r4, #12]
 80011f8:	9903      	ldr	r1, [sp, #12]
 80011fa:	1a5b      	subs	r3, r3, r1
 80011fc:	42ab      	cmp	r3, r5
 80011fe:	dcf2      	bgt.n	80011e6 <_printf_i+0x212>
 8001200:	e7eb      	b.n	80011da <_printf_i+0x206>
 8001202:	2500      	movs	r5, #0
 8001204:	f104 0619 	add.w	r6, r4, #25
 8001208:	e7f5      	b.n	80011f6 <_printf_i+0x222>
 800120a:	bf00      	nop
 800120c:	08001a79 	.word	0x08001a79
 8001210:	08001a8a 	.word	0x08001a8a

08001214 <__sflush_r>:
 8001214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800121c:	0716      	lsls	r6, r2, #28
 800121e:	4605      	mov	r5, r0
 8001220:	460c      	mov	r4, r1
 8001222:	d454      	bmi.n	80012ce <__sflush_r+0xba>
 8001224:	684b      	ldr	r3, [r1, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	dc02      	bgt.n	8001230 <__sflush_r+0x1c>
 800122a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd48      	ble.n	80012c2 <__sflush_r+0xae>
 8001230:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001232:	2e00      	cmp	r6, #0
 8001234:	d045      	beq.n	80012c2 <__sflush_r+0xae>
 8001236:	2300      	movs	r3, #0
 8001238:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800123c:	682f      	ldr	r7, [r5, #0]
 800123e:	6a21      	ldr	r1, [r4, #32]
 8001240:	602b      	str	r3, [r5, #0]
 8001242:	d030      	beq.n	80012a6 <__sflush_r+0x92>
 8001244:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001246:	89a3      	ldrh	r3, [r4, #12]
 8001248:	0759      	lsls	r1, r3, #29
 800124a:	d505      	bpl.n	8001258 <__sflush_r+0x44>
 800124c:	6863      	ldr	r3, [r4, #4]
 800124e:	1ad2      	subs	r2, r2, r3
 8001250:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001252:	b10b      	cbz	r3, 8001258 <__sflush_r+0x44>
 8001254:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001256:	1ad2      	subs	r2, r2, r3
 8001258:	2300      	movs	r3, #0
 800125a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800125c:	6a21      	ldr	r1, [r4, #32]
 800125e:	4628      	mov	r0, r5
 8001260:	47b0      	blx	r6
 8001262:	1c43      	adds	r3, r0, #1
 8001264:	89a3      	ldrh	r3, [r4, #12]
 8001266:	d106      	bne.n	8001276 <__sflush_r+0x62>
 8001268:	6829      	ldr	r1, [r5, #0]
 800126a:	291d      	cmp	r1, #29
 800126c:	d82b      	bhi.n	80012c6 <__sflush_r+0xb2>
 800126e:	4a2a      	ldr	r2, [pc, #168]	@ (8001318 <__sflush_r+0x104>)
 8001270:	410a      	asrs	r2, r1
 8001272:	07d6      	lsls	r6, r2, #31
 8001274:	d427      	bmi.n	80012c6 <__sflush_r+0xb2>
 8001276:	2200      	movs	r2, #0
 8001278:	04d9      	lsls	r1, r3, #19
 800127a:	6062      	str	r2, [r4, #4]
 800127c:	6922      	ldr	r2, [r4, #16]
 800127e:	6022      	str	r2, [r4, #0]
 8001280:	d504      	bpl.n	800128c <__sflush_r+0x78>
 8001282:	1c42      	adds	r2, r0, #1
 8001284:	d101      	bne.n	800128a <__sflush_r+0x76>
 8001286:	682b      	ldr	r3, [r5, #0]
 8001288:	b903      	cbnz	r3, 800128c <__sflush_r+0x78>
 800128a:	6560      	str	r0, [r4, #84]	@ 0x54
 800128c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800128e:	602f      	str	r7, [r5, #0]
 8001290:	b1b9      	cbz	r1, 80012c2 <__sflush_r+0xae>
 8001292:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001296:	4299      	cmp	r1, r3
 8001298:	d002      	beq.n	80012a0 <__sflush_r+0x8c>
 800129a:	4628      	mov	r0, r5
 800129c:	f7ff fbee 	bl	8000a7c <_free_r>
 80012a0:	2300      	movs	r3, #0
 80012a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80012a4:	e00d      	b.n	80012c2 <__sflush_r+0xae>
 80012a6:	2301      	movs	r3, #1
 80012a8:	4628      	mov	r0, r5
 80012aa:	47b0      	blx	r6
 80012ac:	4602      	mov	r2, r0
 80012ae:	1c50      	adds	r0, r2, #1
 80012b0:	d1c9      	bne.n	8001246 <__sflush_r+0x32>
 80012b2:	682b      	ldr	r3, [r5, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0c6      	beq.n	8001246 <__sflush_r+0x32>
 80012b8:	2b1d      	cmp	r3, #29
 80012ba:	d001      	beq.n	80012c0 <__sflush_r+0xac>
 80012bc:	2b16      	cmp	r3, #22
 80012be:	d11d      	bne.n	80012fc <__sflush_r+0xe8>
 80012c0:	602f      	str	r7, [r5, #0]
 80012c2:	2000      	movs	r0, #0
 80012c4:	e021      	b.n	800130a <__sflush_r+0xf6>
 80012c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	e01a      	b.n	8001304 <__sflush_r+0xf0>
 80012ce:	690f      	ldr	r7, [r1, #16]
 80012d0:	2f00      	cmp	r7, #0
 80012d2:	d0f6      	beq.n	80012c2 <__sflush_r+0xae>
 80012d4:	0793      	lsls	r3, r2, #30
 80012d6:	680e      	ldr	r6, [r1, #0]
 80012d8:	600f      	str	r7, [r1, #0]
 80012da:	bf0c      	ite	eq
 80012dc:	694b      	ldreq	r3, [r1, #20]
 80012de:	2300      	movne	r3, #0
 80012e0:	eba6 0807 	sub.w	r8, r6, r7
 80012e4:	608b      	str	r3, [r1, #8]
 80012e6:	f1b8 0f00 	cmp.w	r8, #0
 80012ea:	ddea      	ble.n	80012c2 <__sflush_r+0xae>
 80012ec:	4643      	mov	r3, r8
 80012ee:	463a      	mov	r2, r7
 80012f0:	6a21      	ldr	r1, [r4, #32]
 80012f2:	4628      	mov	r0, r5
 80012f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80012f6:	47b0      	blx	r6
 80012f8:	2800      	cmp	r0, #0
 80012fa:	dc08      	bgt.n	800130e <__sflush_r+0xfa>
 80012fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	81a3      	strh	r3, [r4, #12]
 800130a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800130e:	4407      	add	r7, r0
 8001310:	eba8 0800 	sub.w	r8, r8, r0
 8001314:	e7e7      	b.n	80012e6 <__sflush_r+0xd2>
 8001316:	bf00      	nop
 8001318:	dfbffffe 	.word	0xdfbffffe

0800131c <_fflush_r>:
 800131c:	b538      	push	{r3, r4, r5, lr}
 800131e:	690b      	ldr	r3, [r1, #16]
 8001320:	4605      	mov	r5, r0
 8001322:	460c      	mov	r4, r1
 8001324:	b913      	cbnz	r3, 800132c <_fflush_r+0x10>
 8001326:	2500      	movs	r5, #0
 8001328:	4628      	mov	r0, r5
 800132a:	bd38      	pop	{r3, r4, r5, pc}
 800132c:	b118      	cbz	r0, 8001336 <_fflush_r+0x1a>
 800132e:	6a03      	ldr	r3, [r0, #32]
 8001330:	b90b      	cbnz	r3, 8001336 <_fflush_r+0x1a>
 8001332:	f7ff fa9b 	bl	800086c <__sinit>
 8001336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f3      	beq.n	8001326 <_fflush_r+0xa>
 800133e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001340:	07d0      	lsls	r0, r2, #31
 8001342:	d404      	bmi.n	800134e <_fflush_r+0x32>
 8001344:	0599      	lsls	r1, r3, #22
 8001346:	d402      	bmi.n	800134e <_fflush_r+0x32>
 8001348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800134a:	f7ff fb94 	bl	8000a76 <__retarget_lock_acquire_recursive>
 800134e:	4628      	mov	r0, r5
 8001350:	4621      	mov	r1, r4
 8001352:	f7ff ff5f 	bl	8001214 <__sflush_r>
 8001356:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001358:	4605      	mov	r5, r0
 800135a:	07da      	lsls	r2, r3, #31
 800135c:	d4e4      	bmi.n	8001328 <_fflush_r+0xc>
 800135e:	89a3      	ldrh	r3, [r4, #12]
 8001360:	059b      	lsls	r3, r3, #22
 8001362:	d4e1      	bmi.n	8001328 <_fflush_r+0xc>
 8001364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001366:	f7ff fb87 	bl	8000a78 <__retarget_lock_release_recursive>
 800136a:	e7dd      	b.n	8001328 <_fflush_r+0xc>

0800136c <__swbuf_r>:
 800136c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800136e:	460e      	mov	r6, r1
 8001370:	4614      	mov	r4, r2
 8001372:	4605      	mov	r5, r0
 8001374:	b118      	cbz	r0, 800137e <__swbuf_r+0x12>
 8001376:	6a03      	ldr	r3, [r0, #32]
 8001378:	b90b      	cbnz	r3, 800137e <__swbuf_r+0x12>
 800137a:	f7ff fa77 	bl	800086c <__sinit>
 800137e:	69a3      	ldr	r3, [r4, #24]
 8001380:	60a3      	str	r3, [r4, #8]
 8001382:	89a3      	ldrh	r3, [r4, #12]
 8001384:	071a      	lsls	r2, r3, #28
 8001386:	d501      	bpl.n	800138c <__swbuf_r+0x20>
 8001388:	6923      	ldr	r3, [r4, #16]
 800138a:	b943      	cbnz	r3, 800139e <__swbuf_r+0x32>
 800138c:	4621      	mov	r1, r4
 800138e:	4628      	mov	r0, r5
 8001390:	f000 f82a 	bl	80013e8 <__swsetup_r>
 8001394:	b118      	cbz	r0, 800139e <__swbuf_r+0x32>
 8001396:	f04f 37ff 	mov.w	r7, #4294967295
 800139a:	4638      	mov	r0, r7
 800139c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800139e:	6823      	ldr	r3, [r4, #0]
 80013a0:	b2f6      	uxtb	r6, r6
 80013a2:	6922      	ldr	r2, [r4, #16]
 80013a4:	4637      	mov	r7, r6
 80013a6:	1a98      	subs	r0, r3, r2
 80013a8:	6963      	ldr	r3, [r4, #20]
 80013aa:	4283      	cmp	r3, r0
 80013ac:	dc05      	bgt.n	80013ba <__swbuf_r+0x4e>
 80013ae:	4621      	mov	r1, r4
 80013b0:	4628      	mov	r0, r5
 80013b2:	f7ff ffb3 	bl	800131c <_fflush_r>
 80013b6:	2800      	cmp	r0, #0
 80013b8:	d1ed      	bne.n	8001396 <__swbuf_r+0x2a>
 80013ba:	68a3      	ldr	r3, [r4, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60a3      	str	r3, [r4, #8]
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	6022      	str	r2, [r4, #0]
 80013c6:	701e      	strb	r6, [r3, #0]
 80013c8:	1c43      	adds	r3, r0, #1
 80013ca:	6962      	ldr	r2, [r4, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d004      	beq.n	80013da <__swbuf_r+0x6e>
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	07db      	lsls	r3, r3, #31
 80013d4:	d5e1      	bpl.n	800139a <__swbuf_r+0x2e>
 80013d6:	2e0a      	cmp	r6, #10
 80013d8:	d1df      	bne.n	800139a <__swbuf_r+0x2e>
 80013da:	4621      	mov	r1, r4
 80013dc:	4628      	mov	r0, r5
 80013de:	f7ff ff9d 	bl	800131c <_fflush_r>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d0d9      	beq.n	800139a <__swbuf_r+0x2e>
 80013e6:	e7d6      	b.n	8001396 <__swbuf_r+0x2a>

080013e8 <__swsetup_r>:
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	4b29      	ldr	r3, [pc, #164]	@ (8001490 <__swsetup_r+0xa8>)
 80013ec:	4605      	mov	r5, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	b118      	cbz	r0, 80013fc <__swsetup_r+0x14>
 80013f4:	6a03      	ldr	r3, [r0, #32]
 80013f6:	b90b      	cbnz	r3, 80013fc <__swsetup_r+0x14>
 80013f8:	f7ff fa38 	bl	800086c <__sinit>
 80013fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001400:	0719      	lsls	r1, r3, #28
 8001402:	d422      	bmi.n	800144a <__swsetup_r+0x62>
 8001404:	06da      	lsls	r2, r3, #27
 8001406:	d407      	bmi.n	8001418 <__swsetup_r+0x30>
 8001408:	2209      	movs	r2, #9
 800140a:	602a      	str	r2, [r5, #0]
 800140c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	81a3      	strh	r3, [r4, #12]
 8001416:	e033      	b.n	8001480 <__swsetup_r+0x98>
 8001418:	0758      	lsls	r0, r3, #29
 800141a:	d512      	bpl.n	8001442 <__swsetup_r+0x5a>
 800141c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800141e:	b141      	cbz	r1, 8001432 <__swsetup_r+0x4a>
 8001420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001424:	4299      	cmp	r1, r3
 8001426:	d002      	beq.n	800142e <__swsetup_r+0x46>
 8001428:	4628      	mov	r0, r5
 800142a:	f7ff fb27 	bl	8000a7c <_free_r>
 800142e:	2300      	movs	r3, #0
 8001430:	6363      	str	r3, [r4, #52]	@ 0x34
 8001432:	89a3      	ldrh	r3, [r4, #12]
 8001434:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001438:	81a3      	strh	r3, [r4, #12]
 800143a:	2300      	movs	r3, #0
 800143c:	6063      	str	r3, [r4, #4]
 800143e:	6923      	ldr	r3, [r4, #16]
 8001440:	6023      	str	r3, [r4, #0]
 8001442:	89a3      	ldrh	r3, [r4, #12]
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	81a3      	strh	r3, [r4, #12]
 800144a:	6923      	ldr	r3, [r4, #16]
 800144c:	b94b      	cbnz	r3, 8001462 <__swsetup_r+0x7a>
 800144e:	89a3      	ldrh	r3, [r4, #12]
 8001450:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001458:	d003      	beq.n	8001462 <__swsetup_r+0x7a>
 800145a:	4621      	mov	r1, r4
 800145c:	4628      	mov	r0, r5
 800145e:	f000 f85c 	bl	800151a <__smakebuf_r>
 8001462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001466:	f013 0201 	ands.w	r2, r3, #1
 800146a:	d00a      	beq.n	8001482 <__swsetup_r+0x9a>
 800146c:	2200      	movs	r2, #0
 800146e:	60a2      	str	r2, [r4, #8]
 8001470:	6962      	ldr	r2, [r4, #20]
 8001472:	4252      	negs	r2, r2
 8001474:	61a2      	str	r2, [r4, #24]
 8001476:	6922      	ldr	r2, [r4, #16]
 8001478:	b942      	cbnz	r2, 800148c <__swsetup_r+0xa4>
 800147a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800147e:	d1c5      	bne.n	800140c <__swsetup_r+0x24>
 8001480:	bd38      	pop	{r3, r4, r5, pc}
 8001482:	0799      	lsls	r1, r3, #30
 8001484:	bf58      	it	pl
 8001486:	6962      	ldrpl	r2, [r4, #20]
 8001488:	60a2      	str	r2, [r4, #8]
 800148a:	e7f4      	b.n	8001476 <__swsetup_r+0x8e>
 800148c:	2000      	movs	r0, #0
 800148e:	e7f7      	b.n	8001480 <__swsetup_r+0x98>
 8001490:	20000020 	.word	0x20000020

08001494 <_sbrk_r>:
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	2300      	movs	r3, #0
 8001498:	4d05      	ldr	r5, [pc, #20]	@ (80014b0 <_sbrk_r+0x1c>)
 800149a:	4604      	mov	r4, r0
 800149c:	4608      	mov	r0, r1
 800149e:	602b      	str	r3, [r5, #0]
 80014a0:	f7ff f8f8 	bl	8000694 <_sbrk>
 80014a4:	1c43      	adds	r3, r0, #1
 80014a6:	d102      	bne.n	80014ae <_sbrk_r+0x1a>
 80014a8:	682b      	ldr	r3, [r5, #0]
 80014aa:	b103      	cbz	r3, 80014ae <_sbrk_r+0x1a>
 80014ac:	6023      	str	r3, [r4, #0]
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
 80014b0:	200001cc 	.word	0x200001cc

080014b4 <memchr>:
 80014b4:	b2c9      	uxtb	r1, r1
 80014b6:	4603      	mov	r3, r0
 80014b8:	4402      	add	r2, r0
 80014ba:	b510      	push	{r4, lr}
 80014bc:	4293      	cmp	r3, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	d101      	bne.n	80014c6 <memchr+0x12>
 80014c2:	2000      	movs	r0, #0
 80014c4:	e003      	b.n	80014ce <memchr+0x1a>
 80014c6:	7804      	ldrb	r4, [r0, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	428c      	cmp	r4, r1
 80014cc:	d1f6      	bne.n	80014bc <memchr+0x8>
 80014ce:	bd10      	pop	{r4, pc}

080014d0 <__swhatbuf_r>:
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	460c      	mov	r4, r1
 80014d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014d8:	b096      	sub	sp, #88	@ 0x58
 80014da:	4615      	mov	r5, r2
 80014dc:	2900      	cmp	r1, #0
 80014de:	461e      	mov	r6, r3
 80014e0:	da0c      	bge.n	80014fc <__swhatbuf_r+0x2c>
 80014e2:	89a3      	ldrh	r3, [r4, #12]
 80014e4:	2100      	movs	r1, #0
 80014e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014ea:	bf14      	ite	ne
 80014ec:	2340      	movne	r3, #64	@ 0x40
 80014ee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80014f2:	2000      	movs	r0, #0
 80014f4:	6031      	str	r1, [r6, #0]
 80014f6:	602b      	str	r3, [r5, #0]
 80014f8:	b016      	add	sp, #88	@ 0x58
 80014fa:	bd70      	pop	{r4, r5, r6, pc}
 80014fc:	466a      	mov	r2, sp
 80014fe:	f000 f849 	bl	8001594 <_fstat_r>
 8001502:	2800      	cmp	r0, #0
 8001504:	dbed      	blt.n	80014e2 <__swhatbuf_r+0x12>
 8001506:	9901      	ldr	r1, [sp, #4]
 8001508:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800150c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001510:	4259      	negs	r1, r3
 8001512:	4159      	adcs	r1, r3
 8001514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001518:	e7eb      	b.n	80014f2 <__swhatbuf_r+0x22>

0800151a <__smakebuf_r>:
 800151a:	898b      	ldrh	r3, [r1, #12]
 800151c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800151e:	079d      	lsls	r5, r3, #30
 8001520:	4606      	mov	r6, r0
 8001522:	460c      	mov	r4, r1
 8001524:	d507      	bpl.n	8001536 <__smakebuf_r+0x1c>
 8001526:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800152a:	6023      	str	r3, [r4, #0]
 800152c:	6123      	str	r3, [r4, #16]
 800152e:	2301      	movs	r3, #1
 8001530:	6163      	str	r3, [r4, #20]
 8001532:	b003      	add	sp, #12
 8001534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001536:	ab01      	add	r3, sp, #4
 8001538:	466a      	mov	r2, sp
 800153a:	f7ff ffc9 	bl	80014d0 <__swhatbuf_r>
 800153e:	9f00      	ldr	r7, [sp, #0]
 8001540:	4605      	mov	r5, r0
 8001542:	4630      	mov	r0, r6
 8001544:	4639      	mov	r1, r7
 8001546:	f7ff fb05 	bl	8000b54 <_malloc_r>
 800154a:	b948      	cbnz	r0, 8001560 <__smakebuf_r+0x46>
 800154c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001550:	059a      	lsls	r2, r3, #22
 8001552:	d4ee      	bmi.n	8001532 <__smakebuf_r+0x18>
 8001554:	f023 0303 	bic.w	r3, r3, #3
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	81a3      	strh	r3, [r4, #12]
 800155e:	e7e2      	b.n	8001526 <__smakebuf_r+0xc>
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	6020      	str	r0, [r4, #0]
 8001564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001568:	81a3      	strh	r3, [r4, #12]
 800156a:	9b01      	ldr	r3, [sp, #4]
 800156c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001570:	b15b      	cbz	r3, 800158a <__smakebuf_r+0x70>
 8001572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001576:	4630      	mov	r0, r6
 8001578:	f000 f81e 	bl	80015b8 <_isatty_r>
 800157c:	b128      	cbz	r0, 800158a <__smakebuf_r+0x70>
 800157e:	89a3      	ldrh	r3, [r4, #12]
 8001580:	f023 0303 	bic.w	r3, r3, #3
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	81a3      	strh	r3, [r4, #12]
 800158a:	89a3      	ldrh	r3, [r4, #12]
 800158c:	431d      	orrs	r5, r3
 800158e:	81a5      	strh	r5, [r4, #12]
 8001590:	e7cf      	b.n	8001532 <__smakebuf_r+0x18>
	...

08001594 <_fstat_r>:
 8001594:	b538      	push	{r3, r4, r5, lr}
 8001596:	2300      	movs	r3, #0
 8001598:	4d06      	ldr	r5, [pc, #24]	@ (80015b4 <_fstat_r+0x20>)
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	4611      	mov	r1, r2
 80015a0:	602b      	str	r3, [r5, #0]
 80015a2:	f7ff f84f 	bl	8000644 <_fstat>
 80015a6:	1c43      	adds	r3, r0, #1
 80015a8:	d102      	bne.n	80015b0 <_fstat_r+0x1c>
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	b103      	cbz	r3, 80015b0 <_fstat_r+0x1c>
 80015ae:	6023      	str	r3, [r4, #0]
 80015b0:	bd38      	pop	{r3, r4, r5, pc}
 80015b2:	bf00      	nop
 80015b4:	200001cc 	.word	0x200001cc

080015b8 <_isatty_r>:
 80015b8:	b538      	push	{r3, r4, r5, lr}
 80015ba:	2300      	movs	r3, #0
 80015bc:	4d05      	ldr	r5, [pc, #20]	@ (80015d4 <_isatty_r+0x1c>)
 80015be:	4604      	mov	r4, r0
 80015c0:	4608      	mov	r0, r1
 80015c2:	602b      	str	r3, [r5, #0]
 80015c4:	f7ff f84e 	bl	8000664 <_isatty>
 80015c8:	1c43      	adds	r3, r0, #1
 80015ca:	d102      	bne.n	80015d2 <_isatty_r+0x1a>
 80015cc:	682b      	ldr	r3, [r5, #0]
 80015ce:	b103      	cbz	r3, 80015d2 <_isatty_r+0x1a>
 80015d0:	6023      	str	r3, [r4, #0]
 80015d2:	bd38      	pop	{r3, r4, r5, pc}
 80015d4:	200001cc 	.word	0x200001cc

080015d8 <_init>:
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	bf00      	nop
 80015dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015de:	bc08      	pop	{r3}
 80015e0:	469e      	mov	lr, r3
 80015e2:	4770      	bx	lr

080015e4 <_fini>:
 80015e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e6:	bf00      	nop
 80015e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ea:	bc08      	pop	{r3}
 80015ec:	469e      	mov	lr, r3
 80015ee:	4770      	bx	lr
